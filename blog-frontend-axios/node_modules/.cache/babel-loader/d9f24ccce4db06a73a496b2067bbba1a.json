{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nexport let AuthActionType;\n\n(function (AuthActionType) {\n  AuthActionType[\"LoadUser\"] = \"LOAD_USER\";\n  AuthActionType[\"Logout\"] = \"LOGOUT\";\n  AuthActionType[\"Loading\"] = \"LOADING\";\n  AuthActionType[\"SessionExpired\"] = \"SESSION_EXPIRED\";\n  AuthActionType[\"SetCategoryFilter\"] = \"SET_CATEGORY_FILTER\";\n  AuthActionType[\"SetPostTitleFilter\"] = \"SET_POST_TITLE_FILTER\";\n})(AuthActionType || (AuthActionType = {}));\n\nexport const createActionLogout = () => {\n  return {\n    type: AuthActionType.Logout\n  };\n};\nexport const createActionLoadUser = user => {\n  return {\n    type: AuthActionType.LoadUser,\n    user: user\n  };\n};\nexport const createActionLoading = isLoading => {\n  return {\n    type: AuthActionType.Loading,\n    isLoading: isLoading\n  };\n};\nexport const createActionSessionExpired = () => {\n  return {\n    type: AuthActionType.SessionExpired\n  };\n};\nexport const createActionSetCategoryFilter = category => {\n  return {\n    type: AuthActionType.SetCategoryFilter,\n    categoryFilter: category\n  };\n};\nexport const createActionSetPostTitleFilter = titleFilter => {\n  return {\n    type: AuthActionType.SetPostTitleFilter,\n    postTitleFilter: titleFilter\n  };\n};\n;\nexport const initialState = {\n  isLoading: false,\n  isAuthenticated: false,\n  isSessionExpired: false,\n  categoryFilter: undefined,\n  postTitleFilter: '',\n  user: undefined\n};\nexport function authReducer(state, action) {\n  switch (action.type) {\n    case AuthActionType.LoadUser:\n      {\n        return _objectSpread({}, state, {\n          isAuthenticated: true,\n          isSessionExpired: false,\n          user: action.user\n        });\n      }\n\n    case AuthActionType.Logout:\n      {\n        return _objectSpread({}, state, {\n          isAuthenticated: false,\n          isSessionExpired: false,\n          user: undefined\n        });\n      }\n\n    case AuthActionType.Loading:\n      {\n        return _objectSpread({}, state, {\n          isLoading: action.isLoading\n        });\n      }\n\n    case AuthActionType.SessionExpired:\n      {\n        return _objectSpread({}, state, {\n          isSessionExpired: true\n        });\n      }\n\n    case AuthActionType.SetCategoryFilter:\n      {\n        return _objectSpread({}, state, {\n          categoryFilter: action.categoryFilter\n        });\n      }\n\n    case AuthActionType.SetPostTitleFilter:\n      {\n        return _objectSpread({}, state, {\n          postTitleFilter: action.postTitleFilter\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/reducers/auth.tsx"],"names":["AuthActionType","createActionLogout","type","Logout","createActionLoadUser","user","LoadUser","createActionLoading","isLoading","Loading","createActionSessionExpired","SessionExpired","createActionSetCategoryFilter","category","SetCategoryFilter","categoryFilter","createActionSetPostTitleFilter","titleFilter","SetPostTitleFilter","postTitleFilter","initialState","isAuthenticated","isSessionExpired","undefined","authReducer","state","action"],"mappings":";AAEA,WAAYA,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAQZ,OAAO,MAAMC,kBAAkB,GAAG,MAAmB;AAAE,SAAO;AAACC,IAAAA,IAAI,EAAGF,cAAc,CAACG;AAAvB,GAAP;AAAsC,CAAtF;AACP,OAAO,MAAMC,oBAAoB,GAAIC,IAAD,IAA6B;AAAE,SAAO;AAACH,IAAAA,IAAI,EAAGF,cAAc,CAACM,QAAvB;AAAiCD,IAAAA,IAAI,EAAEA;AAAvC,GAAP;AAAoD,CAAhH;AACP,OAAO,MAAME,mBAAmB,GAAIC,SAAD,IAAqC;AAAE,SAAO;AAACN,IAAAA,IAAI,EAAGF,cAAc,CAACS,OAAvB;AAAgCD,IAAAA,SAAS,EAAEA;AAA3C,GAAP;AAA6D,CAAhI;AACP,OAAO,MAAME,0BAA0B,GAAG,MAAmB;AAAE,SAAO;AAACR,IAAAA,IAAI,EAAGF,cAAc,CAACW;AAAvB,GAAP;AAA8C,CAAtG;AACP,OAAO,MAAMC,6BAA6B,GAAIC,QAAD,IAAsC;AAAE,SAAO;AAACX,IAAAA,IAAI,EAAGF,cAAc,CAACc,iBAAvB;AAA0CC,IAAAA,cAAc,EAAEF;AAA1D,GAAP;AAA2E,CAAzJ;AACP,OAAO,MAAMG,8BAA8B,GAAIC,WAAD,IAAsC;AAAE,SAAO;AAACf,IAAAA,IAAI,EAAGF,cAAc,CAACkB,kBAAvB;AAA2CC,IAAAA,eAAe,EAAEF;AAA5D,GAAP;AAAgF,CAA/J;AAuBN;AAUD,OAAO,MAAMG,YAAuB,GAAG;AACrCZ,EAAAA,SAAS,EAAE,KAD0B;AAErCa,EAAAA,eAAe,EAAE,KAFoB;AAGrCC,EAAAA,gBAAgB,EAAE,KAHmB;AAIrCP,EAAAA,cAAc,EAAEQ,SAJqB;AAKrCJ,EAAAA,eAAe,EAAE,EALoB;AAMrCd,EAAAA,IAAI,EAAEkB;AAN+B,CAAhC;AASP,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAuCC,MAAvC,EAAsE;AAC3E,UAAQA,MAAM,CAACxB,IAAf;AACE,SAAKF,cAAc,CAACM,QAApB;AACA;AACE,iCAAYmB,KAAZ;AAAmBJ,UAAAA,eAAe,EAAE,IAApC;AAA0CC,UAAAA,gBAAgB,EAAE,KAA5D;AAAmEjB,UAAAA,IAAI,EAAEqB,MAAM,CAACrB;AAAhF;AACD;;AACD,SAAKL,cAAc,CAACG,MAApB;AAA4B;AAC1B,iCAAYsB,KAAZ;AAAmBJ,UAAAA,eAAe,EAAE,KAApC;AAA2CC,UAAAA,gBAAgB,EAAE,KAA7D;AAAoEjB,UAAAA,IAAI,EAAEkB;AAA1E;AACD;;AACD,SAAKvB,cAAc,CAACS,OAApB;AAA6B;AAC3B,iCAAYgB,KAAZ;AAAmBjB,UAAAA,SAAS,EAAEkB,MAAM,CAAClB;AAArC;AACD;;AACD,SAAKR,cAAc,CAACW,cAApB;AAAoC;AAClC,iCAAYc,KAAZ;AAAmBH,UAAAA,gBAAgB,EAAE;AAArC;AACD;;AACD,SAAKtB,cAAc,CAACc,iBAApB;AAAuC;AACrC,iCAAYW,KAAZ;AAAmBV,UAAAA,cAAc,EAAEW,MAAM,CAACX;AAA1C;AACD;;AACD,SAAKf,cAAc,CAACkB,kBAApB;AAAwC;AACtC,iCAAYO,KAAZ;AAAmBN,UAAAA,eAAe,EAAEO,MAAM,CAACP;AAA3C;AACD;;AACD;AACE,aAAOM,KAAP;AArBJ;AAuBD","sourcesContent":["import { User, ICategory } from '../types';\r\n\r\nexport enum AuthActionType {\r\n  LoadUser = 'LOAD_USER',\r\n  Logout = 'LOGOUT',\r\n  Loading = 'LOADING',\r\n  SessionExpired = 'SESSION_EXPIRED',\r\n  SetCategoryFilter = 'SET_CATEGORY_FILTER',\r\n  SetPostTitleFilter = 'SET_POST_TITLE_FILTER',\r\n}\r\nexport const createActionLogout = () : AuthAction => { return {type:  AuthActionType.Logout}}\r\nexport const createActionLoadUser = (user: User) : AuthAction => { return {type:  AuthActionType.LoadUser, user: user}}\r\nexport const createActionLoading = (isLoading: boolean) : AuthAction => { return {type:  AuthActionType.Loading, isLoading: isLoading}}\r\nexport const createActionSessionExpired = () : AuthAction => { return {type:  AuthActionType.SessionExpired}}\r\nexport const createActionSetCategoryFilter = (category: ICategory) : AuthAction => { return {type:  AuthActionType.SetCategoryFilter, categoryFilter: category}}\r\nexport const createActionSetPostTitleFilter = (titleFilter: string) : AuthAction => { return {type:  AuthActionType.SetPostTitleFilter, postTitleFilter: titleFilter}}\r\n\r\nexport type AuthAction =\r\n  | {\r\n      type: AuthActionType.LoadUser;\r\n      user: User;\r\n    }\r\n  | { type: AuthActionType.Logout }\r\n  | { \r\n      type: AuthActionType.Loading;\r\n      isLoading: boolean;\r\n    }\r\n  | { \r\n      type: AuthActionType.SessionExpired;\r\n    }\r\n  | { \r\n      type: AuthActionType.SetCategoryFilter;\r\n      categoryFilter: ICategory;\r\n    }\r\n  | { \r\n      type: AuthActionType.SetPostTitleFilter;\r\n      postTitleFilter: string;\r\n    }\r\n;;\r\nexport interface AuthState {\r\n  isLoading: boolean;\r\n  isAuthenticated: boolean;\r\n  isSessionExpired: boolean;\r\n  categoryFilter: ICategory | undefined,\r\n  postTitleFilter: string,\r\n  user: User | undefined;\r\n}\r\n\r\nexport const initialState: AuthState = {\r\n  isLoading: false,\r\n  isAuthenticated: false,\r\n  isSessionExpired: false,\r\n  categoryFilter: undefined,\r\n  postTitleFilter: '',\r\n  user: undefined,\r\n};\r\n\r\nexport function authReducer(state: AuthState, action: AuthAction): AuthState {\r\n  switch (action.type) {\r\n    case AuthActionType.LoadUser:\r\n    {\r\n      return { ...state, isAuthenticated: true, isSessionExpired: false, user: action.user! };\r\n    }\r\n    case AuthActionType.Logout: {\r\n      return { ...state, isAuthenticated: false, isSessionExpired: false, user: undefined };\r\n    }\r\n    case AuthActionType.Loading: {\r\n      return { ...state, isLoading: action.isLoading!};\r\n    }\r\n    case AuthActionType.SessionExpired: {\r\n      return { ...state, isSessionExpired: true};\r\n    }\r\n    case AuthActionType.SetCategoryFilter: {\r\n      return { ...state, categoryFilter: action.categoryFilter};\r\n    }\r\n    case AuthActionType.SetPostTitleFilter: {\r\n      return { ...state, postTitleFilter: action.postTitleFilter};\r\n    }    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}