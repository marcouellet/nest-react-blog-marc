{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\Post.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { toLocalDateString } from '../../utils/utils';\n\nconst Post = () => {\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useAuth = useAuth(),\n        dispatch = _useAuth.dispatch;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await PostApiService.getPostById(postId).then(post => setPost(post)).catch(apiErrors => handleFetchPostError(apiErrors));\n        dispatch(createActionLoading(false));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrors(apiErrors);\n  };\n\n  const getDateString = date => {\n    if (date) {\n      return toLocalDateString(date);\n    } else {\n      return \"no date provided\";\n    }\n  };\n\n  return React.createElement(\"section\", {\n    className: \"post-area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-1 col-md-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"main-post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-top-area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    className: \"pre-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"This post belongs to: \", post.user.username), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Date posted:\\xA0\", getDateString(post.publishDate))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Title:\")), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, post.title), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Description:\")), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, post.description), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Detail:\"), React.createElement(\"p\", {\n    className: \"para\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, post.body)))))))));\n};\n\nexport default Post;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/Post.tsx"],"names":["React","useState","useEffect","useParams","toast","PostApiService","createActionLoading","useAuth","ListErrors","toLocalDateString","Post","postId","dispatch","post","setPost","errors","setErrors","fetchData","getPostById","then","catch","apiErrors","handleFetchPostError","error","getDateString","date","user","username","publishDate","title","description","body"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { IPost } from \"../../types\";\r\nimport { toast } from \"react-toastify\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors } from '../../types';\r\nimport { toLocalDateString } from '../../utils/utils';\r\n\r\nconst Post = () => {\r\n\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const { dispatch } = useAuth();\r\n  const [post, setPost] = useState<IPost>();\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await PostApiService.getPostById(postId!)\r\n        .then((post) => setPost(post))\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors))\r\n        dispatch(createActionLoading(false));\r\n      }\r\n      fetchData();  \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrors(apiErrors);\r\n  }\r\n\r\n  const getDateString = (date: Date): string => {\r\n    if (date) {\r\n      return toLocalDateString(date)!;\r\n    } else {\r\n      return \"no date provided\"\r\n    }\r\n  }\r\n\r\n    return (\r\n        <section className=\"post-area\">\r\n        {errors && <ListErrors errors={errors} />}\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-1 col-md-0\" />\r\n            <div className=\"col-lg-10 col-md-12\">\r\n              {post && \r\n                <div className=\"main-post\">\r\n                  <div className=\"post-top-area\">\r\n                    <h5 className=\"pre-title\">This post belongs to: {post.user!.username}</h5>\r\n                      <div>\r\n                        <br/>\r\n                        <h4 className=\"title\">\r\n                          <span>\r\n                            Date posted:&nbsp;{getDateString(post.publishDate!)}\r\n                          </span>\r\n                        </h4>\r\n                        <br/>\r\n                       <h4 className=\"title\">\r\n                          <span>\r\n                            Title:\r\n                          </span>\r\n                        </h4>\r\n                        <h5>{post.title}</h5>\r\n                        <br/>\r\n                        <h4 className=\"description\">\r\n                          <span>\r\n                            Description:\r\n                          </span>\r\n                        </h4>\r\n                        <h5>{post.description}</h5>\r\n                        <br/>\r\n                        <h4 className=\"body\">\r\n                          <span>\r\n                            Detail: \r\n                          </span>\r\n                          <p className=\"para\">\r\n                            {post.body}\r\n                          </p>\r\n                        </h4>\r\n                       </div>\r\n                  </div>\r\n                </div>              \r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}