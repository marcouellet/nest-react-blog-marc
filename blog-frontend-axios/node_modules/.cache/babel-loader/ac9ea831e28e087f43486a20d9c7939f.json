{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport useAuth from '../../contexts/auth';\nimport { createActionLoadUser, createActionLoading, createActionLogout } from '../../reducers/auth';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from 'react-router-dom';\n\nconst RefreshSession = () => {\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        sessionRefresh = _useAuth$state.sessionRefresh,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const navigate = useNavigate();\n\n  const handleRefresh = async () => {\n    dispatch(createActionLoading(true));\n    AUTHAPI.refresh(user).then(user => {\n      dispatch(createActionLoadUser(user));\n      toast.info(`${user.username} session renewed!`);\n      navigate('/');\n    }).catch(_ => {\n      toast.error(`Refresh session failed, logging out!`);\n      handleLogout();\n    }).finally(() => dispatch(createActionLoading(false)));\n  };\n\n  const handleLogout = () => {\n    if (isAuthenticated) {\n      dispatch(createActionLogout());\n      AUTHAPI.logout();\n      toast.info(`${user.username} is logged out`);\n      navigate('/');\n    }\n  };\n\n  useEffect(() => {\n    if (sessionRefresh) {\n      handleRefresh();\n    }\n  }, [sessionRefresh]);\n  return React.createElement(React.Fragment, null);\n};\n\nexport default RefreshSession;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/common/refreshSession.tsx"],"names":["React","useEffect","useAuth","createActionLoadUser","createActionLoading","createActionLogout","AUTHAPI","toast","useNavigate","RefreshSession","state","isAuthenticated","sessionRefresh","user","dispatch","navigate","handleRefresh","refresh","then","info","username","catch","_","error","handleLogout","finally","logout"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,EAAoDC,kBAApD,QAA8E,qBAA9E;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA,mBAE8CP,OAAO,EAFrD;AAAA,kCAEjBQ,KAFiB;AAAA,QAERC,eAFQ,kBAERA,eAFQ;AAAA,QAESC,cAFT,kBAESA,cAFT;AAAA,QAEyBC,IAFzB,kBAEyBA,IAFzB;AAAA,QAEiCC,QAFjC,YAEiCA,QAFjC;;AAGzB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,aAAa,GAAG,YAAY;AAC9BF,IAAAA,QAAQ,CAACV,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACAE,IAAAA,OAAO,CAACW,OAAR,CAAgBJ,IAAhB,EACCK,IADD,CACOL,IAAD,IAAU;AACZC,MAAAA,QAAQ,CAACX,oBAAoB,CAACU,IAAD,CAArB,CAAR;AACAN,MAAAA,KAAK,CAACY,IAAN,CAAY,GAAEN,IAAI,CAACO,QAAS,mBAA5B;AACAL,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACC,KALL,EAMCM,KAND,CAMOC,CAAC,IAAI;AACRf,MAAAA,KAAK,CAACgB,KAAN,CAAa,sCAAb;AACAC,MAAAA,YAAY;AACf,KATD,EAUCC,OAVD,CAUS,MAAMX,QAAQ,CAACV,mBAAmB,CAAC,KAAD,CAApB,CAVvB;AAWD,GAbH;;AAeE,QAAMoB,YAAY,GAAG,MAAM;AACzB,QAAIb,eAAJ,EAAqB;AACjBG,MAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR;AACAC,MAAAA,OAAO,CAACoB,MAAR;AACAnB,MAAAA,KAAK,CAACY,IAAN,CAAY,GAAEN,IAAI,CAAEO,QAAS,gBAA7B;AACAL,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACF,GAPD;;AASAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,cAAJ,EAAoB;AAChBI,MAAAA,aAAa;AAChB;AACJ,GAJU,EAIR,CAACJ,cAAD,CAJQ,CAAT;AAMF,SAAO,yCAAP;AACH,CApCD;;AAsCA,eAAeH,cAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useAuth from '../../contexts/auth';\r\nimport { createActionLoadUser, createActionLoading, createActionLogout } from '../../reducers/auth';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport { toast } from \"react-toastify\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst RefreshSession = () => {\r\n\r\n    const { state: { isAuthenticated, sessionRefresh, user }, dispatch } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    const handleRefresh = async () => {\r\n        dispatch(createActionLoading(true));\r\n        AUTHAPI.refresh(user!)\r\n        .then((user) => {\r\n            dispatch(createActionLoadUser(user));\r\n            toast.info(`${user.username} session renewed!`);\r\n            navigate('/');\r\n            })\r\n        .catch(_ => {\r\n            toast.error(`Refresh session failed, logging out!`);\r\n            handleLogout();\r\n        })\r\n        .finally(() => dispatch(createActionLoading(false)));\r\n      };\r\n\r\n      const handleLogout = () => {\r\n        if (isAuthenticated) {\r\n            dispatch(createActionLogout());\r\n            AUTHAPI.logout();\r\n            toast.info(`${user!.username} is logged out`);\r\n            navigate('/');\r\n        }\r\n      };\r\n\r\n      useEffect(() => {\r\n        if (sessionRefresh) {\r\n            handleRefresh();        \r\n        }\r\n    }, [sessionRefresh]);\r\n\r\n    return <></>\r\n}\r\n\r\nexport default RefreshSession;"]},"metadata":{},"sourceType":"module"}