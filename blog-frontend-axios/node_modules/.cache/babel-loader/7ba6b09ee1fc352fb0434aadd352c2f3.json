{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\sessionHandler.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport useAuth from '../../contexts/auth';\nimport { useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport { createActionLogout, createActionLoadUser, createActionLoading } from '../../reducers/auth';\nimport ConfirmRefresh from '../common/confirmRefresh';\nimport { toast } from \"react-toastify\";\n\nconst SessionHandler = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        askRefresh = _useState2[0],\n        setAskRefresh = _useState2[1];\n\n  const _useAuth = useAuth(),\n        state = _useAuth.state,\n        dispatch = _useAuth.dispatch;\n\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    setAskRefresh(false);\n\n    if (state.isAuthenticated) {\n      dispatch(createActionLogout());\n      AUTHAPI.logout();\n      toast.info(`${state.user.username} is logged out`);\n      navigate('/');\n    }\n  };\n\n  const handleRefresh = async () => {\n    setAskRefresh(false);\n    dispatch(createActionLoading(true));\n    AUTHAPI.refresh().then(user => {\n      dispatch(createActionLoadUser(user));\n      toast.info(`${user.username} session renewed!`);\n    }).catch(_ => {\n      toast.error(`Refresh session failed, logging out!`);\n      handleLogout();\n    }).finally(() => dispatch(createActionLoading(false)));\n  };\n\n  const handleConfirmExit = () => {\n    setAskRefresh(false);\n  };\n\n  useEffect(() => {\n    if (state.isLoggingOut) {\n      handleLogout();\n    } else if (state.isAuthenticated && state.isSessionExpired) {\n      setAskRefresh(true);\n    } // eslint-disable-next-line\n\n  }, [state]);\n  return React.createElement(ConfirmRefresh, {\n    show: askRefresh,\n    logout: handleLogout,\n    refresh: handleRefresh,\n    onExit: handleConfirmExit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n};\n\nexport default SessionHandler;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/sessionHandler.tsx"],"names":["React","useEffect","useState","useAuth","useNavigate","AUTHAPI","createActionLogout","createActionLoadUser","createActionLoading","ConfirmRefresh","toast","SessionHandler","askRefresh","setAskRefresh","state","dispatch","navigate","handleLogout","isAuthenticated","logout","info","user","username","handleRefresh","refresh","then","catch","_","error","finally","handleConfirmExit","isLoggingOut","isSessionExpired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,mBAAnD,QAA8E,qBAA9E;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA,oBAEWT,QAAQ,CAAC,KAAD,CAFnB;AAAA;AAAA,QAElBU,UAFkB;AAAA,QAENC,aAFM;;AAAA,mBAGGV,OAAO,EAHV;AAAA,QAGjBW,KAHiB,YAGjBA,KAHiB;AAAA,QAGVC,QAHU,YAGVA,QAHU;;AAIzB,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACvBJ,IAAAA,aAAa,CAAC,KAAD,CAAb;;AACA,QAAIC,KAAK,CAACI,eAAV,EAA2B;AACvBH,MAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR;AACAD,MAAAA,OAAO,CAACc,MAAR;AACAT,MAAAA,KAAK,CAACU,IAAN,CAAY,GAAEN,KAAK,CAACO,IAAN,CAAYC,QAAS,gBAAnC;AACAN,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACF,GARH;;AAUE,QAAMO,aAAa,GAAG,YAAY;AAChCV,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,QAAQ,CAACP,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACAH,IAAAA,OAAO,CAACmB,OAAR,GACCC,IADD,CACOJ,IAAD,IAAU;AACZN,MAAAA,QAAQ,CAACR,oBAAoB,CAACc,IAAD,CAArB,CAAR;AACAX,MAAAA,KAAK,CAACU,IAAN,CAAY,GAAEC,IAAI,CAACC,QAAS,mBAA5B;AACC,KAJL,EAKCI,KALD,CAKOC,CAAC,IAAI;AACRjB,MAAAA,KAAK,CAACkB,KAAN,CAAa,sCAAb;AACAX,MAAAA,YAAY;AACf,KARD,EASCY,OATD,CASS,MAAMd,QAAQ,CAACP,mBAAmB,CAAC,KAAD,CAApB,CATvB;AAUD,GAbD;;AAeA,QAAMsB,iBAAiB,GAAG,MAAM;AAC9BjB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAFD;;AAIFZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAK,CAACiB,YAAV,EAAwB;AACtBd,MAAAA,YAAY;AACb,KAFD,MAEO,IAAIH,KAAK,CAACI,eAAN,IAAyBJ,KAAK,CAACkB,gBAAnC,EAAqD;AACxDnB,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KALa,CAMhB;;AACC,GAPQ,EAON,CAACC,KAAD,CAPM,CAAT;AASA,SAAO,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAEF,UAAtB;AAAkC,IAAA,MAAM,EAAEK,YAA1C;AAAwD,IAAA,OAAO,EAAEM,aAAjE;AACiB,IAAA,MAAM,EAAEO,iBADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEH,CA9CD;;AAgDA,eAAenB,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport useAuth from '../../contexts/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport { createActionLogout, createActionLoadUser, createActionLoading } from '../../reducers/auth';\r\nimport ConfirmRefresh from '../common/confirmRefresh';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SessionHandler = () => {\r\n\r\n    const [askRefresh, setAskRefresh] = useState(false);\r\n    const { state, dispatch } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogout = () => {\r\n        setAskRefresh(false);\r\n        if (state.isAuthenticated) {\r\n            dispatch(createActionLogout());\r\n            AUTHAPI.logout();\r\n            toast.info(`${state.user!.username} is logged out`);\r\n            navigate('/');\r\n        }\r\n      };\r\n\r\n      const handleRefresh = async () => {\r\n        setAskRefresh(false);\r\n        dispatch(createActionLoading(true));\r\n        AUTHAPI.refresh()\r\n        .then((user) => {\r\n            dispatch(createActionLoadUser(user));\r\n            toast.info(`${user.username} session renewed!`);\r\n            })\r\n        .catch(_ => {\r\n            toast.error(`Refresh session failed, logging out!`);\r\n            handleLogout();\r\n        })\r\n        .finally(() => dispatch(createActionLoading(false)));\r\n      };\r\n\r\n      const handleConfirmExit = () => {\r\n        setAskRefresh(false);\r\n      }\r\n\r\n    useEffect(() => {\r\n      if (state.isLoggingOut) {\r\n        handleLogout();\r\n      } else if (state.isAuthenticated && state.isSessionExpired) {\r\n          setAskRefresh(true);\r\n      }\r\n    // eslint-disable-next-line\r\n    }, [state]);\r\n\r\n    return <ConfirmRefresh show={askRefresh} logout={handleLogout} refresh={handleRefresh}\r\n                            onExit={handleConfirmExit}></ConfirmRefresh>;\r\n}\r\n\r\nexport default SessionHandler;"]},"metadata":{},"sourceType":"module"}