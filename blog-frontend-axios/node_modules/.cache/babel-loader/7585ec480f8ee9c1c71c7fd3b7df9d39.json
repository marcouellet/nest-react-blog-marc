{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\category\\\\CreateCategory.tsx\";\nimport React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { minimumCategoryTitleLength, minimumCategoryDescriptionLength } from '../../types';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\n\nconst CreateCategory = () => {\n  var _errors$title, _errors$description;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Category title is required').min(minimumCategoryTitleLength, `Category title must be at least ${minimumCategoryTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumCategoryDescriptionLength, `Description must be at least ${minimumCategoryDescriptionLength} characters long`)\n  });\n  const defaultValues = {\n    title: '',\n    description: ''\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty,\n        reset = _useForm.reset;\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    await CategoryApiService.createCategory(data).then(() => {\n      handleSubmitFormSucess();\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  const handleSubmitFormSucess = () => {\n    toast.success(`Category created successfully...`);\n    navigate('/category');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`Category creation failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Category already exist or access denied`);\n    } else {\n      toast.error(`Category creation failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelCreateCategoryMessage = () => `Category creation and loose changes`;\n\n  const handleClearCreateCategory = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelCreateCategory = () => {\n    navigate('/category');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \" Create Category \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-category-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group row-md-5 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelCreateCategoryMessage(),\n    onClick: () => handleCancelCreateCategory(),\n    className: \"btn ml-2 btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleClearCreateCategory(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Clear\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Create\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })))))));\n};\n\nexport default CreateCategory;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/category/CreateCategory.tsx"],"names":["React","useForm","useNavigate","toast","Yup","CancelButton","yupResolver","CategoryApiService","createActionLoading","useAuth","ListErrors","minimumCategoryTitleLength","minimumCategoryDescriptionLength","checkUnauthorized","checkForbidden","createActionSessionExpired","CreateCategory","navigate","isLoading","state","dispatch","useState","errorList","setErrorList","validationSchema","object","shape","title","string","required","min","description","defaultValues","resolver","register","handleSubmit","formState","errors","isDirty","reset","onSubmit","data","createCategory","then","handleSubmitFormSucess","catch","apiErrors","handleSubmitFormError","success","error","cancelCreateCategoryMessage","handleClearCreateCategory","keepDirty","handleCancelCreateCategory","message"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, minimumCategoryTitleLength, minimumCategoryDescriptionLength } from '../../types';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\n\r\nconst CreateCategory = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Category title is required')\r\n      .min(minimumCategoryTitleLength, `Category title must be at least ${minimumCategoryTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumCategoryDescriptionLength, `Description must be at least ${minimumCategoryDescriptionLength} characters long`),\r\n  });\r\n\r\n  type CreateSubmitForm = {\r\n    title: string;\r\n    description: string;\r\n  };\r\n\r\n  const defaultValues = {title: '', description: ''};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n  } = useForm<CreateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  const onSubmit = async (data: CreateSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    await CategoryApiService.createCategory(data)\r\n    .then(() => { handleSubmitFormSucess(); })\r\n    .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n    dispatch(createActionLoading(false));\r\n  } \r\n\r\n  const handleSubmitFormSucess = () => {\r\n    toast.success(`Category created successfully...`);\r\n    navigate('/category');\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`Category creation failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Category already exist or access denied`);\r\n    } else {\r\n      toast.error(`Category creation failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const cancelCreateCategoryMessage = () => `Category creation and loose changes`;\r\n\r\n  const handleClearCreateCategory = () => {\r\n    reset(defaultValues, { keepDirty: false});\r\n  }\r\n\r\n  const handleCancelCreateCategory = () => {\r\n    navigate('/category');   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <div className={\"col-md-12 form-wrapper\"}>\r\n      <h2> Create Category </h2>\r\n      {errorList && <ListErrors errors={errorList} />}\r\n      <form id={\"create-category-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n        <div className=\"form-group col-md-12\">\r\n          <label htmlFor=\"title\"> Title </label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder=\"Enter title\"\r\n            {...register('title')}\r\n            className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-12\">\r\n          <label htmlFor=\"description\"> Description </label>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter description\"\r\n            {...register('description')}\r\n            className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-10 col-md-12\">\r\n            <div className=\"form-group row-md-5 pull-right\">\r\n              <CancelButton prompt={isDirty} message={cancelCreateCategoryMessage()} onClick={() => handleCancelCreateCategory()} className=\"btn ml-2 btn-danger\">Cancel</CancelButton>\r\n              <button className=\"btn ml-2 btn-secondary\" disabled={!isDirty} onClick={() => handleClearCreateCategory()} >\r\n                Clear\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n              <button className=\"btn ml-2 btn-success\"  disabled={!isDirty} type=\"submit\">\r\n                Create\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  );\r\n\r\n}\r\nexport default CreateCategory\r\n"]},"metadata":{},"sourceType":"module"}