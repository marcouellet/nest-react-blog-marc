{"ast":null,"code":"export function resizeImage(imageData, maxWidth, maxHeight) {\n  return new Promise((resolve, reject) => {\n    const base64 = Buffer.from(imageData.data.valueOf()).toString('base64');\n    const imageContentType = imageData.contentType.trim();\n    const imageSrc = 'data:' + imageContentType + ';base64,' + base64;\n    let image = new Image();\n    image.src = imageSrc;\n\n    image.onload = () => {\n      let width = image.width;\n      let height = image.height;\n\n      if (width <= maxWidth && height <= maxHeight) {\n        resolve(imageData);\n      }\n\n      let newWidth;\n      let newHeight;\n\n      if (width > height) {\n        newHeight = height * (maxWidth / width);\n        newWidth = maxWidth;\n      } else {\n        newWidth = width * (maxHeight / height);\n        newHeight = maxHeight;\n      }\n\n      let canvas = document.createElement('canvas');\n      canvas.width = newWidth;\n      canvas.height = newHeight;\n      let context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, newWidth, newHeight);\n      canvas.toBlob(blob => {\n        blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n          const buffer = Buffer.from(array);\n          const newImageData = {\n            data: buffer,\n            contentType: imageContentType\n          };\n          resolve(newImageData);\n        });\n      });\n    };\n\n    image.onerror = reject;\n  });\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/image.utils.ts"],"names":["resizeImage","imageData","maxWidth","maxHeight","Promise","resolve","reject","base64","Buffer","from","data","valueOf","toString","imageContentType","contentType","trim","imageSrc","image","Image","src","onload","width","height","newWidth","newHeight","canvas","document","createElement","context","getContext","drawImage","toBlob","blob","arrayBuffer","then","array","buffer","newImageData","onerror"],"mappings":"AAEA,OAAO,SAASA,WAAT,CAAqBC,SAArB,EAA0CC,QAA1C,EAA2DC,SAA3D,EAAiG;AAEpG,SAAO,IAAIC,OAAJ,CAAuB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C,UAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYR,SAAS,CAACS,IAAV,CAAeC,OAAf,EAAZ,EAAsCC,QAAtC,CAA+C,QAA/C,CAAf;AACA,UAAMC,gBAAgB,GAAGZ,SAAS,CAACa,WAAV,CAAsBC,IAAtB,EAAzB;AACA,UAAMC,QAAQ,GAAI,UAAUH,gBAAV,GAA6B,UAA7B,GAA0CN,MAA5D;AACA,QAAIU,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,KAAK,CAACE,GAAN,GAAYH,QAAZ;;AACAC,IAAAA,KAAK,CAACG,MAAN,GAAe,MAAM;AACjB,UAAIC,KAAK,GAAGJ,KAAK,CAACI,KAAlB;AACA,UAAIC,MAAM,GAAGL,KAAK,CAACK,MAAnB;;AAEA,UAAID,KAAK,IAAInB,QAAT,IAAqBoB,MAAM,IAAInB,SAAnC,EAA8C;AAC1CE,QAAAA,OAAO,CAACJ,SAAD,CAAP;AACH;;AAED,UAAIsB,QAAJ;AACA,UAAIC,SAAJ;;AAEA,UAAIH,KAAK,GAAGC,MAAZ,EAAoB;AAChBE,QAAAA,SAAS,GAAGF,MAAM,IAAIpB,QAAQ,GAAGmB,KAAf,CAAlB;AACAE,QAAAA,QAAQ,GAAGrB,QAAX;AACH,OAHD,MAGO;AACHqB,QAAAA,QAAQ,GAAGF,KAAK,IAAIlB,SAAS,GAAGmB,MAAhB,CAAhB;AACAE,QAAAA,SAAS,GAAGrB,SAAZ;AACH;;AAED,UAAIsB,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,MAAAA,MAAM,CAACJ,KAAP,GAAeE,QAAf;AACAE,MAAAA,MAAM,CAACH,MAAP,GAAgBE,SAAhB;AAEA,UAAII,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;AAEAD,MAAAA,OAAO,CAAEE,SAAT,CAAmBb,KAAnB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgCM,QAAhC,EAA0CC,SAA1C;AAEAC,MAAAA,MAAM,CAACM,MAAP,CAAcC,IAAI,IAAI;AAClBA,QAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,WAAN,GACKC,IADL,CACWC,KAAD,IAAW;AACb,gBAAMC,MAAM,GAAG5B,MAAM,CAACC,IAAP,CAAY0B,KAAZ,CAAf;AACA,gBAAME,YAAwB,GAAG;AAAC3B,YAAAA,IAAI,EAAE0B,MAAP;AAAetB,YAAAA,WAAW,EAAED;AAA5B,WAAjC;AACAR,UAAAA,OAAO,CAACgC,YAAD,CAAP;AACH,SALL;AAMH,OAPD;AAQH,KAnCD;;AAoCApB,IAAAA,KAAK,CAACqB,OAAN,GAAgBhC,MAAhB;AACH,GA3CM,CAAP;AA4CH","sourcesContent":["import { ImageData } from '../types';\r\n\r\nexport function resizeImage(imageData:ImageData, maxWidth:number, maxHeight:number): Promise<ImageData> {\r\n\r\n    return new Promise<ImageData>((resolve, reject) => {\r\n        const base64 = Buffer.from(imageData.data.valueOf()).toString('base64');\r\n        const imageContentType = imageData.contentType.trim();\r\n        const imageSrc =  'data:' + imageContentType + ';base64,' + base64\r\n        let image = new Image();\r\n        image.src = imageSrc;\r\n        image.onload = () => {\r\n            let width = image.width;\r\n            let height = image.height;\r\n            \r\n            if (width <= maxWidth && height <= maxHeight) {\r\n                resolve(imageData);\r\n            }\r\n\r\n            let newWidth;\r\n            let newHeight;\r\n\r\n            if (width > height) {\r\n                newHeight = height * (maxWidth / width);\r\n                newWidth = maxWidth;\r\n            } else {\r\n                newWidth = width * (maxHeight / height);\r\n                newHeight = maxHeight;\r\n            }\r\n\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = newWidth;\r\n            canvas.height = newHeight;\r\n\r\n            let context = canvas.getContext('2d');\r\n\r\n            context!.drawImage(image, 0, 0, newWidth, newHeight);\r\n\r\n            canvas.toBlob(blob => {\r\n                blob?.arrayBuffer()\r\n                    .then((array) => {\r\n                        const buffer = Buffer.from(array);\r\n                        const newImageData : ImageData = {data: buffer, contentType: imageContentType };\r\n                        resolve(newImageData);\r\n                    });\r\n            });\r\n        };\r\n        image.onerror = reject;\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}