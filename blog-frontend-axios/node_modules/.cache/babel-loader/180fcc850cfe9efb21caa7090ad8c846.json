{"ast":null,"code":"var _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\common\\\\ImageUpload.tsx\";\nimport React from 'react';\nimport { resizeImage } from '../../utils/image.utils';\n\nconst ImageUpload = props => {\n  const getArrayBuffer = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  const onImageChange = async event => {\n    if (event.target.files && event.target.files[0]) {\n      let img = event.target.files[0];\n      getArrayBuffer(img).then(data => {\n        let imageData = {\n          base64: Buffer.from(data).toString('base64'),\n          contentType: img.type\n        };\n\n        if (props.resize) {\n          resizeImage(imageData, props.resize.maxWidth, props.resize.maxHeight).then(imageData => {\n            props.onImageUpload(imageData);\n          });\n        } else {\n          props.onImageUpload(imageData);\n        }\n      });\n    }\n  };\n\n  return React.createElement(\"input\", {\n    className: \"col-md-3\",\n    type: \"file\",\n    id: \"imageFile\",\n    name: \"imageFile\",\n    accept: \".jpeg, .png, .jpg\",\n    onChange: onImageChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default ImageUpload;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/common/ImageUpload.tsx"],"names":["React","resizeImage","ImageUpload","props","getArrayBuffer","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsArrayBuffer","onImageChange","event","target","files","img","then","data","imageData","base64","Buffer","from","toString","contentType","type","resize","maxWidth","maxHeight","onImageUpload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,yBAA5B;;AAMA,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAE7C,QAAMC,cAAc,GAAIC,IAAD,IAAgB;AACnC,WAAO,IAAIC,OAAJ,CAAyB,CAACC,OAAD,EAASC,MAAT,KAAoB;AACjD,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAMJ,OAAO,CAACE,MAAM,CAACG,MAAR,CAA7B;;AACAH,MAAAA,MAAM,CAACI,OAAP,GAAiBC,KAAK,IAAIN,MAAM,CAACM,KAAD,CAAhC;;AACAL,MAAAA,MAAM,CAACM,iBAAP,CAAyBV,IAAzB;AACF,KALM,CAAP;AAMH,GAPD;;AASA,QAAMW,aAAa,GAAG,MAAOC,KAAP,IAAsD;AACxE,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,IAAsBF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAA1B,EAAiD;AAC7C,UAAIC,GAAG,GAAGH,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAV;AAEAf,MAAAA,cAAc,CAACgB,GAAD,CAAd,CAAoBC,IAApB,CAAyBC,IAAI,IAAI;AAC7B,YAAIC,SAAoB,GAAG;AAAEC,UAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,QAAlB,CAA2B,QAA3B,CAAV;AAAgDC,UAAAA,WAAW,EAAER,GAAG,CAACS;AAAjE,SAA3B;;AACA,YAAI1B,KAAK,CAAC2B,MAAV,EAAkB;AACd7B,UAAAA,WAAW,CAACsB,SAAD,EAAYpB,KAAK,CAAC2B,MAAN,CAAaC,QAAzB,EAAmC5B,KAAK,CAAC2B,MAAN,CAAaE,SAAhD,CAAX,CACKX,IADL,CACUE,SAAS,IAAI;AACfpB,YAAAA,KAAK,CAAC8B,aAAN,CAAoBV,SAApB;AACH,WAHL;AAIH,SALD,MAKO;AACHpB,UAAAA,KAAK,CAAC8B,aAAN,CAAoBV,SAApB;AACH;AACJ,OAVD;AAWH;AACJ,GAhBD;;AAkBA,SACQ;AACI,IAAA,SAAS,EAAC,UADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,EAAE,EAAC,WAHP;AAII,IAAA,IAAI,EAAC,WAJT;AAKI,IAAA,MAAM,EAAC,mBALX;AAMI,IAAA,QAAQ,EAAEP,aANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR;AAWH,CAxCD;;AA0CA,eAAed,WAAf","sourcesContent":["import React from 'react';\r\nimport { ImageData, ImageSizeProps } from '../../types';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nexport interface ImageUploadProps {\r\n    resize: ImageSizeProps,\r\n    onImageUpload: (imageData: ImageData) => void;\r\n}\r\n\r\nconst ImageUpload = (props: ImageUploadProps) => {\r\n\r\n    const getArrayBuffer = (file: File) => {\r\n        return new Promise<ArrayBuffer>((resolve,reject) => {\r\n           const reader = new FileReader();\r\n           reader.onload = () => resolve(reader.result as ArrayBuffer);\r\n           reader.onerror = error => reject(error);\r\n           reader.readAsArrayBuffer(file);\r\n        });\r\n    }\r\n\r\n    const onImageChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let img = event.target.files[0];\r\n\r\n            getArrayBuffer(img).then(data => {\r\n                let imageData: ImageData = { base64: Buffer.from(data).toString('base64'), contentType: img.type };\r\n                if (props.resize) {\r\n                    resizeImage(imageData, props.resize.maxWidth, props.resize.maxHeight) \r\n                        .then(imageData => {\r\n                            props.onImageUpload(imageData);\r\n                        }); \r\n                } else {\r\n                    props.onImageUpload(imageData);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n            <input \r\n                className=\"col-md-3\" \r\n                type=\"file\" \r\n                id=\"imageFile\" \r\n                name='imageFile' \r\n                accept=\".jpeg, .png, .jpg\"  \r\n                onChange={onImageChange}\r\n            />\r\n    )\r\n\r\n}\r\n\r\nexport default ImageUpload;\r\n"]},"metadata":{},"sourceType":"module"}