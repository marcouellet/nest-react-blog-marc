{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport API, { setToken } from './APIUtils';\nimport { setLocalStorage, removeLocalStorage, getLocalStorageValue } from './TokenService';\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction handleUserAuth(user) {\n  setLocalStorage(USER_KEY, user);\n\n  if (user.token) {\n    setLocalStorage(TOKEN_KEY, user.token);\n    setToken(JSON.stringify(user.token));\n  }\n}\n\nfunction getCurrentUser() {\n  return getLocalStorageValue(USER_KEY);\n}\n\n;\n\nasync function login(email, password) {\n  return new Promise((resolve, reject) => {\n    API.post('/auth/login', {\n      email,\n      password\n    }).then(response => {\n      handleUserAuth(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nasync function register(username, email, password) {\n  return new Promise((resolve, reject) => {\n    API.post('/auth/register', {\n      username,\n      email,\n      password\n    }).then(response => {\n      handleUserAuth(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nfunction logout() {\n  removeLocalStorage(USER_KEY);\n  removeLocalStorage(TOKEN_KEY);\n  setToken(null);\n}\n\nconst AUTHAPI = {\n  getCurrentUser,\n  login,\n  register,\n  logout\n};\nexport default AUTHAPI;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/AuthAPI.ts"],"names":["jwtDecode","API","setToken","setLocalStorage","removeLocalStorage","getLocalStorageValue","isTokenValid","token","decoded_jwt","current_time","Date","now","valueOf","exp","error","handleUserAuth","user","USER_KEY","TOKEN_KEY","JSON","stringify","getCurrentUser","login","email","password","Promise","resolve","reject","post","then","response","data","catch","register","username","logout","AUTHAPI"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,IAAcC,QAAd,QAA8B,YAA9B;AAEA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,oBAA9C,QAA0E,gBAA1E;AASA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMC,WAAuB,GAAGR,SAAS,CAACO,KAAD,CAAzC;AACA,UAAME,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF;;AAED,SAASC,cAAT,CAAwBC,IAAxB,EAAoC;AAClCb,EAAAA,eAAe,CAACc,QAAD,EAAWD,IAAX,CAAf;;AACA,MAAIA,IAAI,CAACT,KAAT,EAAgB;AACdJ,IAAAA,eAAe,CAACe,SAAD,EAAYF,IAAI,CAACT,KAAjB,CAAf;AACAL,IAAAA,QAAQ,CAACiB,IAAI,CAACC,SAAL,CAAeJ,IAAI,CAACT,KAApB,CAAD,CAAR;AACD;AACF;;AAED,SAASc,cAAT,GAA0B;AACxB,SAAOhB,oBAAoB,CAACY,QAAD,CAA3B;AACD;;AAAA;;AAED,eAAeK,KAAf,CAAqBC,KAArB,EAAoCC,QAApC,EAAqE;AACnE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC1B,IAAAA,GAAG,CAAC2B,IAAJ,CAAe,aAAf,EAA8B;AAAEL,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA9B,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBf,MAAAA,cAAc,CAACe,QAAQ,CAACC,IAAV,CAAd;AACAL,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSlB,KAAK,IAAI;AACda,MAAAA,MAAM,CAACb,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,eAAemB,QAAf,CAAwBC,QAAxB,EAA0CX,KAA1C,EAAyDC,QAAzD,EAA2F;AACzF,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC1B,IAAAA,GAAG,CAAC2B,IAAJ,CAAe,gBAAf,EAAiC;AAAEM,MAAAA,QAAF;AAAYX,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAjC,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBf,MAAAA,cAAc,CAACe,QAAQ,CAACC,IAAV,CAAd;AACAL,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSlB,KAAK,IAAI;AACda,MAAAA,MAAM,CAACb,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,SAASqB,MAAT,GAAkB;AAChB/B,EAAAA,kBAAkB,CAACa,QAAD,CAAlB;AACAb,EAAAA,kBAAkB,CAACc,SAAD,CAAlB;AACAhB,EAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AAED,MAAMkC,OAAO,GAAG;AAACf,EAAAA,cAAD;AAAiBC,EAAAA,KAAjB;AAAwBW,EAAAA,QAAxB;AAAkCE,EAAAA;AAAlC,CAAhB;AAEA,eAAeC,OAAf","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport API, { setToken } from './APIUtils';\r\nimport { User } from '../../types';\r\nimport { setLocalStorage, removeLocalStorage, getLocalStorageValue } from './TokenService';\r\n\r\n\r\ntype JWTPayload = {\r\n  id: string;\r\n  username: string;\r\n  exp: number;\r\n};\r\n\r\nexport function isTokenValid(token: string) {\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode(token);\r\n    const current_time = Date.now().valueOf() / 1000;\r\n    return decoded_jwt.exp > current_time;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction handleUserAuth(user: User) {\r\n  setLocalStorage(USER_KEY, user);\r\n  if (user.token) {\r\n    setLocalStorage(TOKEN_KEY, user.token);\r\n    setToken(JSON.stringify(user.token));  \r\n  }\r\n}\r\n\r\nfunction getCurrentUser() {\r\n  return getLocalStorageValue(USER_KEY);\r\n};\r\n\r\nasync function login(email: string, password: string): Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.post<User>('/auth/login', { email, password })\r\n      .then(response => {\r\n        handleUserAuth(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nasync function register(username: string, email: string, password: string) : Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.post<User>('/auth/register', { username, email, password })\r\n      .then(response => {\r\n        handleUserAuth(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nfunction logout() {\r\n  removeLocalStorage(USER_KEY);\r\n  removeLocalStorage(TOKEN_KEY);\r\n  setToken(null);\r\n}\r\n\r\nconst AUTHAPI = {getCurrentUser, login, register, logout}\r\n\r\nexport default AUTHAPI\r\n"]},"metadata":{},"sourceType":"module"}