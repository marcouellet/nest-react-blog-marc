{"ast":null,"code":"import API from './APIUtils';\nexport let EnumContentType;\n\n(function (EnumContentType) {\n  EnumContentType[\"JSON\"] = \"application/json\";\n  EnumContentType[\"XML\"] = \"application/xml\";\n  EnumContentType[\"FORM\"] = \"application/x-www-form-urlencoded\";\n})(EnumContentType || (EnumContentType = {}));\n\nclass HttpApiService {\n  getAll(endpoint, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.get(`${endpoint}`, conf).then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  get(endpoint, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.get(`${endpoint}`, conf).then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  create(endpoint, data, conf = {}) {\n    return this.post(endpoint, data, conf);\n  }\n\n  post(endpoint, data, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.post(`${endpoint}`, data, conf).then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  update(endpoint, data, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.put(`${endpoint}`, data, conf).then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  delete(endpoint, id, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.delete(`${endpoint}/${id}`, conf).then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n}\n\nexport default HttpApiService;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/HttpApiService.ts"],"names":["API","EnumContentType","HttpApiService","getAll","endpoint","conf","Promise","resolve","reject","get","then","response","catch","error","create","data","post","update","put","delete","id"],"mappings":"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","sourcesContent":["import { AxiosPromise } from 'axios';\nimport API from './APIUtils';\n\nexport enum EnumContentType {\n  JSON = \"application/json\",\n  XML = \"application/xml\",\n  FORM = \"application/x-www-form-urlencoded\",\n}\nclass HttpApiService<T> {\n\n  protected getAll(endpoint: string, conf = {}): AxiosPromise<T[]> {\n    return new Promise((resolve, reject) => {\n      API.get<T[]>(`${endpoint}`, conf)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  protected get(endpoint: string, conf = {}): AxiosPromise<T> {\n    return new Promise((resolve, reject) => {\n      API.get<T>(`${endpoint}`, conf)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  protected create(endpoint: string, data: {}, conf = {}): AxiosPromise<T> {\n    return this.post(endpoint, data, conf)\n  }\n\n  protected post(endpoint: string, data: {}, conf = {}): AxiosPromise<T> {\n    return new Promise((resolve, reject) => {\n      API.post<T>(`${endpoint}`, data, conf)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  protected update(endpoint: string, data: T, conf = {}): AxiosPromise<T> {\n    return new Promise((resolve, reject) => {\n      API.put<T>(`${endpoint}`, data, conf)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  protected delete(endpoint: string, id: any, conf = {}): AxiosPromise<T> {\n    return new Promise((resolve, reject) => {\n      API.delete<T>(`${endpoint}/${id}`, conf)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport default HttpApiService;"]},"metadata":{},"sourceType":"module"}