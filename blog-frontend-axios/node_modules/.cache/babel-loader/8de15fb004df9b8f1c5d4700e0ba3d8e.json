{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\contexts\\\\auth.tsx\";\nimport React from 'react';\nimport { authReducer, initialState, createActionSessionExpired, createActionLoggingOut, createActionLoadUser, createActionLoading } from '../reducers/auth';\nimport TokenService from '../services/api/TokenService';\nimport { isTokenValid } from '../utils/session.util';\nimport { isAutomaticSessionRenewalRequired, getSessionDuration } from '../utils/session.util';\nimport AuthApiService from '../services/api/AuthApiService';\nimport { toast } from \"react-toastify\";\nconst AuthContext = React.createContext({\n  state: initialState,\n  dispatch: () => initialState\n});\nexport function AuthProvider(props) {\n  const _React$useReducer = React.useReducer(authReducer, initialState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  React.useEffect(() => {\n    const user = TokenService.getUser();\n    if (!user) return;\n    dispatch(createActionLoadUser(user));\n\n    if (user.authtoken) {\n      const token = user.authtoken.accessToken;\n\n      if (isTokenValid(token)) {\n        if (isAutomaticSessionRenewalRequired(token)) {\n          const sessionDuration = getSessionDuration(token);\n          AuthApiService.extendUserSession(sessionDuration).then(user => {\n            dispatch(createActionLoadUser(user)); // toast.info(`${user.username} session renewed!`);\n          }).catch(_ => {\n            toast.error(`Refresh session failed, logging out!`);\n            dispatch(createActionLoggingOut());\n          }).finally(() => dispatch(createActionLoading(false)));\n        }\n      } else {\n        dispatch(createActionSessionExpired());\n      }\n    }\n  }, []);\n  return React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      state,\n      dispatch\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n}\nexport default function useAuth() {\n  return React.useContext(AuthContext);\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/contexts/auth.tsx"],"names":["React","authReducer","initialState","createActionSessionExpired","createActionLoggingOut","createActionLoadUser","createActionLoading","TokenService","isTokenValid","isAutomaticSessionRenewalRequired","getSessionDuration","AuthApiService","toast","AuthContext","createContext","state","dispatch","AuthProvider","props","useReducer","useEffect","user","getUser","authtoken","token","accessToken","sessionDuration","extendUserSession","then","catch","_","error","finally","useAuth","useContext"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,YAFF,EAKEC,0BALF,EAMEC,sBANF,EAOEC,oBAPF,EAQEC,mBARF,QASO,kBATP;AAUA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,iCAAT,EAA4CC,kBAA5C,QAAsE,uBAAtE;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAOA,MAAMC,WAAW,GAAGb,KAAK,CAACc,aAAN,CAAsC;AACxDC,EAAAA,KAAK,EAAEb,YADiD;AAExDc,EAAAA,QAAQ,EAAE,MAAMd;AAFwC,CAAtC,CAApB;AAKA,OAAO,SAASe,YAAT,CAAsBC,KAAtB,EAA0D;AAAA,4BACpClB,KAAK,CAACmB,UAAN,CAAiBlB,WAAjB,EAA8BC,YAA9B,CADoC;AAAA;AAAA,QACxDa,KADwD;AAAA,QAChDC,QADgD;;AAG/DhB,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,UAAMC,IAAI,GAAGd,YAAY,CAACe,OAAb,EAAb;AAEA,QAAI,CAACD,IAAL,EAAW;AAEXL,IAAAA,QAAQ,CAACX,oBAAoB,CAACgB,IAAD,CAArB,CAAR;;AAEA,QAAIA,IAAI,CAACE,SAAT,EAAoB;AAClB,YAAMC,KAAK,GAAGH,IAAI,CAACE,SAAL,CAAgBE,WAA9B;;AAEA,UAAIjB,YAAY,CAACgB,KAAD,CAAhB,EAAyB;AACvB,YAAIf,iCAAiC,CAACe,KAAD,CAArC,EAA8C;AAC5C,gBAAME,eAAe,GAAGhB,kBAAkB,CAACc,KAAD,CAA1C;AACAb,UAAAA,cAAc,CAACgB,iBAAf,CAAiCD,eAAjC,EACCE,IADD,CACOP,IAAD,IAAU;AACdL,YAAAA,QAAQ,CAACX,oBAAoB,CAACgB,IAAD,CAArB,CAAR,CADc,CAEd;AACC,WAJH,EAKCQ,KALD,CAKOC,CAAC,IAAI;AACVlB,YAAAA,KAAK,CAACmB,KAAN,CAAa,sCAAb;AACAf,YAAAA,QAAQ,CAACZ,sBAAsB,EAAvB,CAAR;AACD,WARD,EASC4B,OATD,CASS,MAAMhB,QAAQ,CAACV,mBAAmB,CAAC,KAAD,CAApB,CATvB;AAUD;AACF,OAdD,MAcO;AACLU,QAAAA,QAAQ,CAACb,0BAA0B,EAA3B,CAAR;AACD;AACF;AACF,GA5BD,EA4BG,EA5BH;AA8BA,SAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAA7B,KAAsDE,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,eAAe,SAASe,OAAT,GAAmB;AAChC,SAAOjC,KAAK,CAACkC,UAAN,CAAiBrB,WAAjB,CAAP;AACD","sourcesContent":["import React from 'react';\r\nimport {\r\n  authReducer,\r\n  initialState,\r\n  AuthAction,\r\n  AuthState,\r\n  createActionSessionExpired,\r\n  createActionLoggingOut,\r\n  createActionLoadUser,\r\n  createActionLoading\r\n} from '../reducers/auth';\r\nimport TokenService from '../services/api/TokenService';\r\nimport { isTokenValid } from '../utils/session.util';\r\nimport { isAutomaticSessionRenewalRequired, getSessionDuration } from '../utils/session.util';\r\nimport AuthApiService from '../services/api/AuthApiService';\r\nimport { toast } from \"react-toastify\";\r\n\r\ntype AuthContextProps = {\r\n  state: AuthState;\r\n  dispatch: React.Dispatch<AuthAction>;\r\n};\r\n\r\nconst AuthContext = React.createContext<AuthContextProps>({\r\n  state: initialState,\r\n  dispatch: () => initialState,\r\n});\r\n\r\nexport function AuthProvider(props: React.PropsWithChildren<{}>) {\r\n  const [state , dispatch] = React.useReducer(authReducer, initialState);\r\n  \r\n  React.useEffect(() => {\r\n    const user = TokenService.getUser();\r\n\r\n    if (!user) return;\r\n\r\n    dispatch(createActionLoadUser(user));\r\n\r\n    if (user.authtoken) {\r\n      const token = user.authtoken!.accessToken;\r\n\r\n      if (isTokenValid(token)) {\r\n        if (isAutomaticSessionRenewalRequired(token)) {\r\n          const sessionDuration = getSessionDuration(token);\r\n          AuthApiService.extendUserSession(sessionDuration)\r\n          .then((user) => {\r\n            dispatch(createActionLoadUser(user));\r\n            // toast.info(`${user.username} session renewed!`);\r\n            })\r\n          .catch(_ => {\r\n            toast.error(`Refresh session failed, logging out!`);\r\n            dispatch(createActionLoggingOut());\r\n          })\r\n          .finally(() => dispatch(createActionLoading(false)));\r\n        }\r\n      } else {\r\n        dispatch(createActionSessionExpired());\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return <AuthContext.Provider value={{ state, dispatch }} {...props} />;\r\n}\r\n\r\nexport default function useAuth() {\r\n  return React.useContext(AuthContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}