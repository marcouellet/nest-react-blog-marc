{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nexport const TOKEN_KEY = 'token';\naxios.defaults.baseURL = API_BASE_URL;\nexport function setToken(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\nexport function handleError(error) {\n  let errorAttributes = {};\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n    errorAttributes = {\n      status: error.response.status,\n      message: error.message\n    };\n  } else if (error.request) {\n    // The client never received a response, and the request was never left\n    console.log(error.request);\n    errorAttributes = {\n      status: error.request.status,\n      message: error.request.statusText\n    };\n  } else {\n    // Anything else\n    console.log('Error', error.message);\n    errorAttributes = {\n      message: error.request.statusText\n    };\n  }\n\n  return Promise.reject(errorAttributes);\n} // Add a request interceptor\n\naxios.interceptors.request.use(config => config, error => {\n  return Promise.reject(handleError(error));\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(handleError(error));\n});\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIUtils.ts"],"names":["axios","jwtDecode","API_BASE_URL","TOKEN_KEY","defaults","baseURL","setToken","token","headers","common","isTokenValid","decoded_jwt","current_time","Date","now","valueOf","exp","error","handleError","errorAttributes","response","console","log","data","status","message","request","statusText","Promise","reject","interceptors","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAGA,OAAO,MAAMC,SAAS,GAAG,OAAlB;AAEPH,KAAK,CAACI,QAAN,CAAeC,OAAf,GAAyBH,YAAzB;AAEA,OAAO,SAASI,QAAT,CAAkBC,KAAlB,EAAwC;AAC7C,MAAIA,KAAJ,EAAW;AACTP,IAAAA,KAAK,CAACI,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,SAAQF,KAAM,EAAhE;AACD,GAFD,MAEO;AACL,WAAOP,KAAK,CAACI,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF;AAQD,OAAO,SAASC,YAAT,CAAsBH,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMI,WAAuB,GAAGV,SAAS,CAACM,KAAD,CAAzC;AACA,UAAMK,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF;AAED,OAAO,SAASC,WAAT,CAAqBD,KAArB,EAAqD;AAC1D,MAAIE,eAAyB,GAAG,EAAhC;;AAEA,MAAIF,KAAK,CAACG,QAAV,EAAoB;AAClB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACG,QAAN,CAAeG,IAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACG,QAAN,CAAeI,MAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACG,QAAN,CAAeZ,OAA3B;AACAW,IAAAA,eAAe,GAAG;AAChBK,MAAAA,MAAM,EAAEP,KAAK,CAACG,QAAN,CAAeI,MADP;AAEhBC,MAAAA,OAAO,EAAER,KAAK,CAACQ;AAFC,KAAlB;AAID,GATD,MASO,IAAIR,KAAK,CAACS,OAAV,EAAmB;AACtB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACS,OAAlB;AACAP,IAAAA,eAAe,GAAG;AAChBK,MAAAA,MAAM,EAAEP,KAAK,CAACS,OAAN,CAAcF,MADN;AAEhBC,MAAAA,OAAO,EAAER,KAAK,CAACS,OAAN,CAAcC;AAFP,KAAlB;AAIH,GAPM,MAOA;AACH;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAAK,CAACQ,OAA3B;AACAN,IAAAA,eAAe,GAAG;AAChBM,MAAAA,OAAO,EAAER,KAAK,CAACS,OAAN,CAAcC;AADP,KAAlB;AAIH;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeV,eAAf,CAAP;AACD,C,CAED;;AACAnB,KAAK,CAAC8B,YAAN,CAAmBJ,OAAnB,CAA2BK,GAA3B,CACEC,MAAM,IAAIA,MADZ,EAEEf,KAAK,IAAI;AACP,SAAOW,OAAO,CAACC,MAAR,CAAeX,WAAW,CAACD,KAAD,CAA1B,CAAP;AACD,CAJH;AAOAjB,KAAK,CAAC8B,YAAN,CAAmBV,QAAnB,CAA4BW,GAA5B,CACGX,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIGH,KAAD,IAAW;AACT,SAAOW,OAAO,CAACC,MAAR,CAAeX,WAAW,CAACD,KAAD,CAA1B,CAAP;AACD,CANH;AASA,eAAejB,KAAf","sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nimport { IErrors } from '../../types';\n\nexport const TOKEN_KEY = 'token';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nexport function setToken(token: string | null) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\ntype JWTPayload = {\n  id: string;\n  username: string;\n  exp: number;\n};\n\nexport function isTokenValid(token: string) {\n  try {\n    const decoded_jwt: JWTPayload = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function handleError(error : any) : Promise<IErrors> {\n  let errorAttributes : IErrors = {};\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n    errorAttributes = {\n      status: error.response.status,\n      message: error.message\n    };\n  } else if (error.request) {\n      // The client never received a response, and the request was never left\n      console.log(error.request);\n      errorAttributes = {\n        status: error.request.status,\n        message: error.request.statusText\n      };  \n  } else {\n      // Anything else\n      console.log('Error', error.message);\n      errorAttributes = {\n        message: error.request.statusText\n      };  \n\n  }\n  return Promise.reject(errorAttributes);\n}\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  config => config,\n  error => {\n    return Promise.reject(handleError(error));\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    return Promise.reject(handleError(error));\n  },\n);\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}