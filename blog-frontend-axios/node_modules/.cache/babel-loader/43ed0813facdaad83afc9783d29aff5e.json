{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\user\\\\UserProfile.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from \"react-toastify\";\nimport { UserApiService } from \"../../services/api/UserApiService\";\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport CancelButton from '../common/cancelConfirmation';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionLoading, createActionUpdateUser, createActionSessionExpired } from '../../reducers/auth';\nimport Image from '../common/Image';\nimport ImageUpload from '../common/ImageUpload';\nimport { createUserForUpdate, minimumPasswordLength, minimumEmailLength, minimumUserNameLength } from \"../../types\";\n\nconst UserProfile = () => {\n  var _errors$username, _errors$email, _errors$currentPasswo, _errors$newPassword;\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        userEdited = _useState2[0],\n        setUserEdited = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userImage = _useState4[0],\n        setUserImage = _useState4[1];\n\n  const navigate = useNavigate();\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    currentPassword: Yup.lazy(value => {\n      if (value && Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))) {\n        // Return our normal validation\n        return Yup.string().required().min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\n      } // Otherwise, return a simple validation\n\n\n      return Yup.mixed().notRequired();\n    }),\n    newPassword: Yup.lazy(value => {\n      if (value && Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))) {\n        // Return our normal validation\n        return Yup.string().required().min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\n      } // Otherwise, return a simple validation\n\n\n      return Yup.mixed().notRequired();\n    }),\n    imageChanged: Yup.bool()\n  });\n  const defaultValues = {\n    username: userEdited === null || userEdited === void 0 ? void 0 : userEdited.username,\n    email: userEdited === null || userEdited === void 0 ? void 0 : userEdited.email,\n    currentPassword: undefined,\n    newPassword: undefined,\n    imageChanged: false\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    if (user) {\n      if (!userEdited) {\n        const fetchData = async () => {\n          dispatch(createActionLoading(true));\n          await UserApiService.getUserById(user.id).then(userRead => {\n            setUserEdited(userRead);\n            reset(userRead);\n            setUserImage(userRead === null || userRead === void 0 ? void 0 : userRead.image);\n          }).catch(apiErrors => handleFetchUserError(apiErrors));\n          dispatch(createActionLoading(false));\n        };\n\n        fetchData();\n      }\n    } else {\n      navigate('/');\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const handleFetchUserError = apiErrors => {\n    toast.error(`User reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const onSubmit = async data => {\n    if (userEdited && isDirty) {\n      dispatch(createActionLoading(true));\n      const image = userImage;\n      const userData = createUserForUpdate(_objectSpread({}, userEdited, {}, data, {\n        image\n      }));\n      await UserApiService.updateUser(userEdited.id, userData).then(userUpdated => {\n        setUserEdited(userUpdated);\n        handleSubmitFormSuccess(userUpdated);\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleSubmitFormSuccess = userUpdated => {\n    if ((user === null || user === void 0 ? void 0 : user.email) === (userUpdated === null || userUpdated === void 0 ? void 0 : userUpdated.email)) {\n      // Update state user to refresh user info in NavBar\n      dispatch(createActionUpdateUser(userUpdated));\n    }\n\n    toast.success(`User updated successfully...`);\n    navigate('/');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`User update failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`User update failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelEditUserMessage = () => `user edition and loose changes`;\n\n  const handleResetEditUser = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelEditUser = () => {\n    navigate('/');\n  };\n\n  const handleImageUpload = image => {\n    setImageData(image);\n  };\n\n  const handleDeleteImage = () => {\n    setImageData(undefined);\n  };\n\n  const setImageData = image => {\n    var _user$image;\n\n    const isImageDefined = image !== undefined;\n    const isInitialImageDefined = (userEdited === null || userEdited === void 0 ? void 0 : userEdited.image) !== undefined;\n    const imageChanged = isImageDefined !== isInitialImageDefined || isImageDefined && (image === null || image === void 0 ? void 0 : image.base64) !== (user === null || user === void 0 ? void 0 : (_user$image = user.image) === null || _user$image === void 0 ? void 0 : _user$image.base64);\n    setValue('imageChanged', imageChanged, {\n      shouldDirty: true\n    });\n    setUserImage(image);\n  };\n\n  const imageMaxSize = {\n    maxWidth: 600,\n    maxHeight: 400\n  };\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, userEdited && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \" Edit User Profile \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-user-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \" Image: \"), userImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, userImage && React.createElement(React.Fragment, null, React.createElement(Image, {\n    imageData: userImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter user name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \" Email \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \" Enter Current Password \"), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Enter a value to change current password\"\n  }, register('currentPassword'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, (_errors$currentPasswo = errors.currentPassword) === null || _errors$currentPasswo === void 0 ? void 0 : _errors$currentPasswo.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \" Enter New Password \"), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Enter a value to change current password\"\n  }, register('newPassword'), {\n    className: `form-control ${errors.newPassword ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, (_errors$newPassword = errors.newPassword) === null || _errors$newPassword === void 0 ? void 0 : _errors$newPassword.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"Update\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditUser(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, \"Reset\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditUserMessage(),\n    onClick: () => handleCancelEditUser(),\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default UserProfile;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/user/UserProfile.tsx"],"names":["React","useState","useEffect","useForm","useNavigate","Yup","yupResolver","toast","UserApiService","useAuth","ListErrors","CancelButton","checkUnauthorized","checkForbidden","createActionLoading","createActionUpdateUser","createActionSessionExpired","Image","ImageUpload","createUserForUpdate","minimumPasswordLength","minimumEmailLength","minimumUserNameLength","UserProfile","state","isLoading","isAuthenticated","user","dispatch","errorList","setErrorList","userEdited","setUserEdited","userImage","setUserImage","navigate","validationSchema","object","shape","username","string","required","min","email","currentPassword","lazy","value","Object","values","some","v","undefined","mixed","notRequired","newPassword","imageChanged","bool","defaultValues","resolver","register","handleSubmit","reset","setValue","formState","errors","isDirty","fetchData","getUserById","id","then","userRead","image","catch","apiErrors","handleFetchUserError","error","onSubmit","data","userData","updateUser","userUpdated","handleSubmitFormSuccess","handleSubmitFormError","success","cancelEditUserMessage","handleResetEditUser","keepDirty","handleCancelEditUser","handleImageUpload","setImageData","handleDeleteImage","isImageDefined","isInitialImageDefined","base64","shouldDirty","imageMaxSize","maxWidth","maxHeight","message","password"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { toast } from \"react-toastify\";\r\nimport { UserApiService } from \"../../services/api/UserApiService\";\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport CancelButton from '../common/cancelConfirmation';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionLoading, createActionUpdateUser, createActionSessionExpired } from '../../reducers/auth';\r\nimport Image from '../common/Image';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport { IErrors, User, IUpdateUser, createUserForUpdate, minimumPasswordLength, minimumEmailLength, \r\n    minimumUserNameLength, ImageData, ImageSizeProps } from \"../../types\";\r\n\r\nconst UserProfile = () => {\r\n\r\n    const { state: { isLoading, isAuthenticated, user }, dispatch } = useAuth();\r\n    const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n    const [userEdited, setUserEdited] = useState<User>();\r\n    const [userImage, setUserImage] = useState<ImageData>();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        username: Yup.string().required('User name is required')\r\n        .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n        email: Yup.string().required('Email is required')\r\n        .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n        currentPassword: Yup.lazy(value => {\r\n            if (\r\n            value &&\r\n            Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))\r\n            ) {\r\n            // Return our normal validation\r\n            return Yup.string().required()\r\n                .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\r\n            }\r\n            // Otherwise, return a simple validation\r\n            return Yup.mixed().notRequired();\r\n        }),\r\n        newPassword: Yup.lazy(value => {\r\n        if (\r\n            value &&\r\n            Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))\r\n        ) {\r\n            // Return our normal validation\r\n            return Yup.string().required()\r\n            .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\r\n            }\r\n        // Otherwise, return a simple validation\r\n        return Yup.mixed().notRequired();\r\n        }),\r\n        imageChanged: Yup.bool(),\r\n    });\r\n\r\n    type UpdateSubmitForm = {\r\n        username: string;\r\n        email: string;\r\n        password?: string;\r\n        imageChanged: boolean;\r\n        currentPassword?: string;\r\n        newPassword?: string;\r\n    };\r\n\r\n    const defaultValues = {username: userEdited?.username, email: userEdited?.email, currentPassword: undefined, \r\n                            newPassword: undefined, imageChanged: false};\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        setValue,\r\n        formState: { errors, isDirty }\r\n      } = useForm<UpdateSubmitForm>({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues: defaultValues\r\n      });\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            if (!userEdited) {\r\n                const fetchData = async (): Promise<void> => {\r\n                dispatch(createActionLoading(true));\r\n                await UserApiService.getUserById(user!.id!)\r\n                .then((userRead) => { setUserEdited(userRead); reset(userRead); setUserImage(userRead?.image);})\r\n                .catch((apiErrors: IErrors) => handleFetchUserError(apiErrors));\r\n                dispatch(createActionLoading(false));\r\n                }\r\n                fetchData();      \r\n            }\r\n        } else {\r\n            navigate('/');\r\n        }\r\n    // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const handleFetchUserError = (apiErrors: IErrors) => {\r\n        toast.error(`User reading failed, see error list`);\r\n        setErrorList(apiErrors);\r\n    }\r\n\r\n    const onSubmit = async (data: UpdateSubmitForm) => {\r\n        if (userEdited && isDirty) {\r\n        dispatch(createActionLoading(true));\r\n        const image: ImageData | undefined = userImage;\r\n        const userData: IUpdateUser = createUserForUpdate({...userEdited, ...data, image});\r\n        await UserApiService.updateUser(userEdited.id!, userData)\r\n        .then((userUpdated) => { setUserEdited(userUpdated);  handleSubmitFormSuccess(userUpdated); })\r\n        .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n        dispatch(createActionLoading(false));\r\n        }\r\n    } \r\n\r\n    const handleSubmitFormSuccess = (userUpdated: User) => {\r\n        if (user?.email === userUpdated?.email) {\r\n        // Update state user to refresh user info in NavBar\r\n            dispatch(createActionUpdateUser(userUpdated!));\r\n        }\r\n        toast.success(`User updated successfully...`);\r\n        navigate('/'); \r\n    }\r\n\r\n    const handleSubmitFormError = (apiErrors: IErrors) => {\r\n        if (checkForbidden(apiErrors)) {\r\n        toast.error(`User update failed, session expired`);\r\n        dispatch(createActionSessionExpired());\r\n        navigate('/'); \r\n        } else if (checkUnauthorized(apiErrors)) {\r\n        toast.error(`Access denied`);\r\n        } else {\r\n        toast.error(`User update failed, see error list`);\r\n        setErrorList(apiErrors);      \r\n        }\r\n    }\r\n\r\n    const cancelEditUserMessage = () => `user edition and loose changes`;\r\n\r\n    const handleResetEditUser = () => {\r\n        reset(defaultValues, { keepDirty: false});\r\n    }\r\n\r\n    const handleCancelEditUser = () => {\r\n        navigate('/');   \r\n    };\r\n\r\n    const handleImageUpload = (image: ImageData) => {\r\n        setImageData(image);\r\n    }\r\n\r\n    const handleDeleteImage = () => {\r\n        setImageData(undefined);\r\n    }\r\n\r\n    const setImageData = (image: ImageData | undefined) => {\r\n        const isImageDefined = image !== undefined;\r\n        const isInitialImageDefined = userEdited?.image !== undefined;\r\n        const imageChanged = (isImageDefined !== isInitialImageDefined) ||\r\n                              (isImageDefined && image?.base64 !== user?.image?.base64);\r\n        setValue('imageChanged', imageChanged, {shouldDirty: true});\r\n        setUserImage(image);\r\n    }\r\n\r\n    const imageMaxSize: ImageSizeProps = {maxWidth:600, maxHeight:400}\r\n\r\n    return (\r\n        \r\n        <div className={'page-wrapper'}>\r\n        {userEdited &&\r\n          (\r\n            <div className={\"col-md-12 form-wrapper\"}>\r\n              <h2> Edit User Profile </h2>\r\n              {errorList && <ListErrors errors={errorList} />}\r\n              <form id={\"create-user-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n                <div className=\"form-group col-md-4\">\r\n                    <div className=\"row\">\r\n                      <label className=\"col-md-2\"> Image: </label>\r\n                      { userImage && (\r\n                            <button className=\"btn btn-secondary col-md-3\"  onClick={() => handleDeleteImage()} >\r\n                                Delete Image\r\n                            </button>  \r\n                        )\r\n                      }   \r\n                      <ImageUpload onImageUpload={handleImageUpload} resize={imageMaxSize}/>                     \r\n                    </div>\r\n                  </div>\r\n    \r\n                  <div className=\"form-group col-md-12\">\r\n                    { userImage && (\r\n                      <>\r\n                        <Image imageData={userImage}/> \r\n                        <br/>\r\n                      </>\r\n                    )\r\n                    }    \r\n                </div>\r\n    \r\n                <div className=\"form-group col-md-12\">\r\n                  <label htmlFor=\"username\"> Title </label>\r\n                  <input \r\n                    type=\"text\"\r\n                    placeholder=\"Enter user name\"\r\n                    {...register('username')}\r\n                    className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n                  />\r\n                  <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n               </div>\r\n    \r\n                <div className=\"form-group col-md-12\">\r\n                  <label htmlFor=\"email\"> Email </label>\r\n                  <input \r\n                    type=\"text\" \r\n                    placeholder=\"Enter email\"\r\n                    {...register('email')}\r\n                    className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n                  />\r\n                  <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n                </div>\r\n    \r\n                <div className=\"form-group col-md-12\">\r\n                  <label htmlFor=\"password\"> Enter Current Password </label>\r\n                  <input \r\n                    type=\"password\" \r\n                    placeholder=\"Enter a value to change current password\" \r\n                    {...register('currentPassword')}\r\n                    className={`form-control ${errors.password ? 'is-invalid' : ''}`}           \r\n                  />\r\n                  <div className=\"invalid-feedback\">{errors.currentPassword?.message}</div>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-12\">\r\n                  <label htmlFor=\"password\"> Enter New Password </label>\r\n                  <input \r\n                    type=\"password\" \r\n                    placeholder=\"Enter a value to change current password\" \r\n                    {...register('newPassword')}\r\n                    className={`form-control ${errors.newPassword ? 'is-invalid' : ''}`}           \r\n                  />\r\n                  <div className=\"invalid-feedback\">{errors.newPassword?.message}</div>\r\n                </div>\r\n\r\n        \r\n                <div className=\"form-group col-md-4 pull-right\">\r\n                  <button className=\"btn btn-success\"  disabled={!isDirty} type=\"submit\">\r\n                    Update\r\n                  </button>\r\n                  {isLoading &&\r\n                    <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                  }\r\n                </div>\r\n    \r\n                <div className=\"form-group col-md-1 pull-right\">\r\n                  <button className=\"btn btn-secondary\" disabled={!isDirty} onClick={() => handleResetEditUser()} >\r\n                    Reset\r\n                  </button>\r\n                  {isLoading &&\r\n                    <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                  }\r\n                </div>\r\n              </form>\r\n    \r\n              <div className=\"form-group col-md-1 pull-right\">\r\n                  {\r\n                  <CancelButton prompt={isDirty} message={cancelEditUserMessage()} onClick={() => handleCancelEditUser()} className=\"btn btn-danger\">Cancel</CancelButton>\r\n                  }\r\n               </div>\r\n    \r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n      )\r\n}\r\n\r\nexport default UserProfile;"]},"metadata":{},"sourceType":"module"}