{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\user\\\\UserProfile.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from \"react-toastify\";\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport CancelButton from '../common/cancelConfirmation';\nimport { checkUnauthorized, checkSessionExpired, checkTimeout, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionLoading, createActionUpdateUser, createActionSessionExpired } from '../../reducers/auth';\nimport Image from '../common/Image';\nimport ImageUpload from '../common/ImageUpload';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\nimport { createUserForUpdate, minimumPasswordLength, minimumEmailLength, minimumUserNameLength } from \"../../types\";\n\nconst UserProfile = () => {\n  var _errors$username, _errors$email, _errors$password, _errors$confirmPasswo;\n\n  const _useAuth = useAuth(),\n        user = _useAuth.state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        userEdited = _useState2[0],\n        setUserEdited = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userImage = _useState4[0],\n        setUserImage = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userDefaultImage = _useState6[0],\n        setuserDefaultImage = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        submitForm = _useState8[0],\n        setSubmitForm = _useState8[1];\n\n  const navigate = useNavigate();\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    password: Yup.lazy(value => {\n      if (value && Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))) {\n        // Return our normal validation\n        return Yup.string().required().min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\n      } // Otherwise, return a simple validation\n\n\n      return Yup.mixed().notRequired();\n    }),\n    confirmPassword: Yup.lazy(value => {\n      if (value && Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))) {\n        // Return our normal validation\n        return Yup.string().required().min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`).when('password', {\n          is: password => password,\n          then: schema => schema.required()\n        }).oneOf([Yup.ref('password'), null], \"Passwords don't match!\");\n      } // Otherwise, return a simple validation\n\n\n      return Yup.string().when('password', {\n        is: password => {\n          return password && password.length > 0;\n        },\n        then: schema => schema.required()\n      });\n    }),\n    imageChanged: Yup.bool()\n  });\n  const defaultValues = {\n    username: userEdited === null || userEdited === void 0 ? void 0 : userEdited.username,\n    email: userEdited === null || userEdited === void 0 ? void 0 : userEdited.email,\n    password: undefined,\n    confirmPassword: undefined,\n    imageChanged: false\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    if (user) {\n      if (!userEdited) {\n        const fetchData = async () => {\n          dispatch(createActionLoading(true));\n          await getDefaultUserImage().then(imageData => {\n            setuserDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          }).finally(() => dispatch(createActionLoading(false)));\n          await AUTHAPI.getUserProfile().then(userRead => {\n            setUserEdited(userRead);\n            reset(userRead);\n            setUserImage(userRead === null || userRead === void 0 ? void 0 : userRead.image);\n          }).catch(apiErrors => handleApiErrors(apiErrors, 'User reading')).finally(() => dispatch(createActionLoading(false)));\n        };\n\n        fetchData();\n      }\n    } else {\n      navigate('/');\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const handleApiErrors = (apiErrors, process) => {\n    if (checkForbidden(apiErrors)) {\n      const message = apiErrors['message'];\n      toast.error(`Profile update failed: ${message}`);\n    } else if (checkSessionExpired(apiErrors)) {\n      // toast.error(`${process} failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else if (checkTimeout(apiErrors)) {\n      toast.error(`Request timeout`);\n    } else {\n      toast.error(`${process} failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const imageMaxSize = {\n    maxWidth: 400,\n    maxHeight: 400\n  };\n\n  const UserImage = () => {\n    if (userImage) {\n      return React.createElement(ImageResize, {\n        imageData: userImage,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      });\n    } else {\n      return userDefaultImage && React.createElement(Image, {\n        imageData: userDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n    }\n  };\n\n  const getDefaultUserImage = () => {\n    return resizeImage('/default-profil-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const onSubmit = async data => {\n    if (userEdited && isDirty && submitForm) {\n      dispatch(createActionLoading(true));\n      const image = userImage;\n      const userData = createUserForUpdate(_objectSpread({}, userEdited, {}, data, {\n        image\n      }));\n      await AUTHAPI.updateUserProfile(userData).then(userUpdated => {\n        setUserEdited(userUpdated);\n        handleSubmitFormSuccess(userUpdated);\n      }).catch(apiErrors => {\n        setSubmitForm(false);\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleSubmitForm = () => {\n    setSubmitForm(true);\n  };\n\n  const handleSubmitFormSuccess = userUpdated => {\n    setSubmitForm(false);\n\n    if ((user === null || user === void 0 ? void 0 : user.email) === (userUpdated === null || userUpdated === void 0 ? void 0 : userUpdated.email)) {\n      // Update state user to refresh user info in NavBar\n      dispatch(createActionUpdateUser(userUpdated));\n    }\n\n    toast.success(`User updated successfully...`);\n    navigate('/');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    setSubmitForm(false);\n    handleApiErrors(apiErrors, 'User update');\n  };\n\n  const cancelEditUserMessage = () => `user edition and loose changes`;\n\n  const handleResetEditUser = () => {\n    setImageData(userEdited === null || userEdited === void 0 ? void 0 : userEdited.image);\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelEditUser = () => {\n    navigate('/');\n  };\n\n  const handleImageUpload = image => {\n    setImageData(image);\n  };\n\n  const handleImageUploadError = error => {\n    toast.error(`User image upload failed`);\n  };\n\n  const handleDeleteImage = () => {\n    setImageData(undefined);\n  };\n\n  const setImageData = image => {\n    var _user$image;\n\n    const isImageDefined = image !== undefined;\n    const isInitialImageDefined = (userEdited === null || userEdited === void 0 ? void 0 : userEdited.image) !== undefined;\n    const imageChanged = isImageDefined !== isInitialImageDefined || isImageDefined && (image === null || image === void 0 ? void 0 : image.base64) !== (user === null || user === void 0 ? void 0 : (_user$image = user.image) === null || _user$image === void 0 ? void 0 : _user$image.base64);\n    setValue('imageChanged', imageChanged, {\n      shouldDirty: true\n    });\n    setUserImage(image);\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, userEdited && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \" Edit User Profile \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"user-profile-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \" Image: \"), userImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    onImageUploadError: handleImageUploadError,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, UserImage()), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter user name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, \" Email \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \" Enter Password \"), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Enter a value to change current password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \" Confirm Password\"), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Enter a value to change current password\"\n  }, register('confirmPassword'), {\n    className: `form-control ${errors.confirmPassword ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, (_errors$confirmPasswo = errors.confirmPassword) === null || _errors$confirmPasswo === void 0 ? void 0 : _errors$confirmPasswo.message)), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group row-md-5 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditUserMessage(),\n    onClick: () => handleCancelEditUser(),\n    className: \"btn ml-2 btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditUser(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-success\",\n    disabled: !isDirty,\n    onClick: () => handleSubmitForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, \"Update\")))))));\n};\n\nexport default UserProfile;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/user/UserProfile.tsx"],"names":["React","useState","useEffect","useForm","useNavigate","Yup","yupResolver","toast","AUTHAPI","useAuth","ListErrors","CancelButton","checkUnauthorized","checkSessionExpired","checkTimeout","checkForbidden","createActionLoading","createActionUpdateUser","createActionSessionExpired","Image","ImageUpload","ImageResize","resizeImage","createUserForUpdate","minimumPasswordLength","minimumEmailLength","minimumUserNameLength","UserProfile","user","state","dispatch","errorList","setErrorList","userEdited","setUserEdited","userImage","setUserImage","userDefaultImage","setuserDefaultImage","submitForm","setSubmitForm","navigate","validationSchema","object","shape","username","string","required","min","email","password","lazy","value","Object","values","some","v","undefined","mixed","notRequired","confirmPassword","when","is","then","schema","oneOf","ref","length","imageChanged","bool","defaultValues","resolver","register","handleSubmit","reset","setValue","formState","errors","isDirty","fetchData","getDefaultUserImage","imageData","catch","error","Error","finally","getUserProfile","userRead","image","apiErrors","handleApiErrors","process","message","imageMaxSize","maxWidth","maxHeight","UserImage","onSubmit","data","userData","updateUserProfile","userUpdated","handleSubmitFormSuccess","handleSubmitFormError","handleSubmitForm","success","cancelEditUserMessage","handleResetEditUser","setImageData","keepDirty","handleCancelEditUser","handleImageUpload","handleImageUploadError","handleDeleteImage","isImageDefined","isInitialImageDefined","base64","shouldDirty"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { toast } from \"react-toastify\";\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport CancelButton from '../common/cancelConfirmation';\r\nimport { checkUnauthorized, checkSessionExpired, checkTimeout, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionLoading, createActionUpdateUser, createActionSessionExpired } from '../../reducers/auth';\r\nimport Image from '../common/Image';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nimport { IErrors, User, IUpdateUser, createUserForUpdate, minimumPasswordLength, minimumEmailLength, \r\n          minimumUserNameLength, ImageData, ImageSizeProps } from \"../../types\";\r\n\r\nconst UserProfile = () => {\r\n\r\n  const { state: { user }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const [userEdited, setUserEdited] = useState<User>();\r\n  const [userImage, setUserImage] = useState<ImageData>();\r\n  const [userDefaultImage, setuserDefaultImage] = useState<ImageData>();\r\n  const [submitForm, setSubmitForm] = useState<boolean>(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n      username: Yup.string().required('User name is required')\r\n      .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n      email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n      password: Yup.lazy(value => {\r\n          if (\r\n          value &&\r\n          Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))\r\n          ) {\r\n          // Return our normal validation\r\n          return Yup.string().required()\r\n              .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\r\n          }\r\n          // Otherwise, return a simple validation\r\n          return Yup.mixed().notRequired();\r\n      }),\r\n      confirmPassword: Yup.lazy(value => {\r\n      if (\r\n          value &&\r\n          Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))\r\n      ) {\r\n          // Return our normal validation\r\n          return Yup.string().required()\r\n          .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`)\r\n          .when('password', {is: (password: string) => password, then: (schema) => schema.required()})\r\n          .oneOf([Yup.ref('password'), null], \"Passwords don't match!\");\r\n          }\r\n      // Otherwise, return a simple validation\r\n      return Yup.string().when('password', {\r\n        is: (password: string) => {\r\n          return password && password.length > 0\r\n        },\r\n        then: (schema) => schema.required()\r\n      });\r\n      }),\r\n      imageChanged: Yup.bool(),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n      username: string;\r\n      email: string;\r\n      password?: string;\r\n      confirmPassword?: string;\r\n      imageChanged: boolean;\r\n  };\r\n\r\n  const defaultValues = {username: userEdited?.username, email: userEdited?.email, password: undefined, \r\n                          confirmPassword: undefined, imageChanged: false};\r\n\r\n  const {\r\n      register,\r\n      handleSubmit,\r\n      reset,\r\n      setValue,\r\n      formState: { errors, isDirty }\r\n    } = useForm<UpdateSubmitForm>({\r\n      resolver: yupResolver(validationSchema),\r\n      defaultValues: defaultValues\r\n    });\r\n\r\n  useEffect(() => {\r\n      if (user) {\r\n          if (!userEdited) {\r\n              const fetchData = async (): Promise<void> => {\r\n              dispatch(createActionLoading(true));\r\n              await getDefaultUserImage()\r\n              .then(imageData => { \r\n                setuserDefaultImage(imageData);\r\n              }) \r\n              .catch(error => {\r\n                throw new Error(error);\r\n              })\r\n              .finally(() => dispatch(createActionLoading(false)));\r\n              await AUTHAPI.getUserProfile()\r\n              .then((userRead) => { setUserEdited(userRead); reset(userRead); setUserImage(userRead?.image);})\r\n              .catch((apiErrors: IErrors) => handleApiErrors(apiErrors,'User reading'))\r\n              .finally(() => dispatch(createActionLoading(false)));\r\n              }\r\n              fetchData();      \r\n          }\r\n      } else {\r\n          navigate('/');\r\n      }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleApiErrors = (apiErrors: IErrors, process: string) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      const message = apiErrors['message'];\r\n      toast.error(`Profile update failed: ${message}`);\r\n    } else if (checkSessionExpired(apiErrors)) {\r\n      // toast.error(`${process} failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else if (checkTimeout(apiErrors)) {\r\n      toast.error(`Request timeout`);\r\n    } else {\r\n      toast.error(`${process} failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:400, maxHeight:400}\r\n\r\n  const UserImage = () => {\r\n    if(userImage) {\r\n      return <ImageResize imageData={userImage} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  userDefaultImage && <Image imageData={userDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const getDefaultUserImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-profil-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n      if (userEdited && isDirty && submitForm) {\r\n      dispatch(createActionLoading(true));\r\n      const image: ImageData | undefined = userImage;\r\n      const userData: IUpdateUser = createUserForUpdate({...userEdited, ...data, image});\r\n      await AUTHAPI.updateUserProfile( userData)\r\n        .then((userUpdated) => { setUserEdited(userUpdated);  handleSubmitFormSuccess(userUpdated); })\r\n        .catch((apiErrors: IErrors) =>  {  setSubmitForm(false); handleSubmitFormError(apiErrors); });\r\n      dispatch(createActionLoading(false));\r\n      }\r\n  } \r\n\r\n  const handleSubmitForm = () => {\r\n    setSubmitForm(true);\r\n  }\r\n\r\n  const handleSubmitFormSuccess = (userUpdated: User) => {\r\n    setSubmitForm(false);\r\n      if (user?.email === userUpdated?.email) {\r\n      // Update state user to refresh user info in NavBar\r\n          dispatch(createActionUpdateUser(userUpdated!));\r\n      }\r\n      toast.success(`User updated successfully...`);\r\n      navigate('/'); \r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    setSubmitForm(false);\r\n    handleApiErrors(apiErrors,'User update');\r\n  }\r\n\r\n  const cancelEditUserMessage = () => `user edition and loose changes`;\r\n\r\n  const handleResetEditUser = () => {\r\n    setImageData(userEdited?.image);\r\n    reset(defaultValues, { keepDirty: false});\r\n  }\r\n\r\n  const handleCancelEditUser = () => {\r\n      navigate('/');   \r\n  };\r\n\r\n  const handleImageUpload = (image: ImageData) => {\r\n      setImageData(image);\r\n  }\r\n\r\n  const handleImageUploadError = (error: any) => {\r\n    toast.error(`User image upload failed`);\r\n  }\r\n\r\n  const handleDeleteImage = () => {\r\n      setImageData(undefined);\r\n  }\r\n\r\n  const setImageData = (image: ImageData | undefined) => {\r\n      const isImageDefined = image !== undefined;\r\n      const isInitialImageDefined = userEdited?.image !== undefined;\r\n      const imageChanged = (isImageDefined !== isInitialImageDefined) ||\r\n                            (isImageDefined && image?.base64 !== user?.image?.base64);\r\n      setValue('imageChanged', imageChanged, {shouldDirty: true});\r\n      setUserImage(image);\r\n  }\r\n\r\n  return (\r\n      \r\n    <div className={'page-wrapper'}>\r\n    {userEdited &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit User Profile </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"user-profile-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n            <div className=\"form-group col-md-4\">\r\n              <div className=\"row\">\r\n                <label className=\"col-md-2\"> Image: </label>\r\n                { userImage && (\r\n                      <button className=\"btn btn-secondary col-md-3\"  onClick={() => handleDeleteImage()} >\r\n                          Delete Image\r\n                      </button>  \r\n                  )\r\n                }   \r\n                <ImageUpload onImageUpload={handleImageUpload} onImageUploadError={handleImageUploadError} resize={imageMaxSize}/>                     \r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              {UserImage()}\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"username\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter user name\"\r\n                {...register('username')}\r\n                className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"email\"> Email </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter email\"\r\n                {...register('email')}\r\n                className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"password\"> Enter Password </label>\r\n              <input \r\n                type=\"password\" \r\n                placeholder=\"Enter a value to change current password\" \r\n                {...register('password')}\r\n                className={`form-control ${errors.password ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"password\"> Confirm Password</label>\r\n              <input \r\n                type=\"password\" \r\n                placeholder=\"Enter a value to change current password\" \r\n                {...register('confirmPassword')}\r\n                className={`form-control ${errors.confirmPassword ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.confirmPassword?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-10 col-md-12\">\r\n                <div className=\"form-group row-md-5 pull-right\">\r\n                    <CancelButton prompt={isDirty} message={cancelEditUserMessage()} onClick={() => handleCancelEditUser()} className=\"btn ml-2 btn-danger\">Cancel</CancelButton>\r\n                    <button className=\"btn ml-2 btn-secondary\" disabled={!isDirty} onClick={ () => handleResetEditUser() } >\r\n                      Reset\r\n                    </button>\r\n                    <button className=\"btn ml-2 btn-success\" disabled={!isDirty} onClick={ () => handleSubmitForm()}>\r\n                      Update\r\n                    </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default UserProfile;"]},"metadata":{},"sourceType":"module"}