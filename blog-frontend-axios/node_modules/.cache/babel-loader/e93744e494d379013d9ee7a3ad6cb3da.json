{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\sessionHandler.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport useAuth from '../../contexts/auth';\nimport { useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport { createActionLoggingOut, createActionLogout, createActionLoadUser, createActionLoading, createActionSessionExpired } from '../../reducers/auth';\nimport ConfirmRefresh from '../common/confirmRefresh';\nimport { isTokenValid, isAutomaticSessionRenewalRequired, getSessionDuration } from '../../utils/session.util';\nimport AuthApiService from '../../services/api/AuthApiService';\nimport TokenService from '../../services/api/TokenService';\nimport { toast } from \"react-toastify\";\n\nconst SessionHandler = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        askRefresh = _useState2[0],\n        setAskRefresh = _useState2[1];\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        user = _useAuth$state.user,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        isLoggingOut = _useAuth$state.isLoggingOut,\n        isSessionExpired = _useAuth$state.isSessionExpired,\n        lastActivityTimeStamp = _useAuth$state.lastActivityTimeStamp,\n        dispatch = _useAuth.dispatch;\n\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    setAskRefresh(false);\n\n    if (isAuthenticated) {\n      dispatch(createActionLogout());\n      AUTHAPI.logout();\n      toast.info(`${user.username} is logged out`);\n      navigate('/');\n    }\n  };\n\n  const handleRefresh = async () => {\n    setAskRefresh(false);\n    dispatch(createActionLoading(true));\n    AUTHAPI.refresh().then(user => {\n      dispatch(createActionLoadUser(user));\n      toast.info(`${user.username} session renewed!`);\n    }).catch(_ => {\n      toast.error(`Refresh session failed, logging out!`);\n      handleLogout();\n    }).finally(() => dispatch(createActionLoading(false)));\n  };\n\n  const handleConfirmExit = () => {\n    setAskRefresh(false);\n  };\n\n  useEffect(() => {\n    // The following 3 lines are a fix to reverse the fact that state is reinitialized while navigating \n    const user = TokenService.getUser();\n    if (!user) return;\n    dispatch(createActionLoadUser(user));\n\n    if (isAuthenticated) {\n      if (isLoggingOut) {\n        handleLogout();\n      } else if (isSessionExpired) {\n        setAskRefresh(true);\n      } else if (user && user.authtoken) {\n        const token = user.authtoken.accessToken;\n\n        if (isTokenValid(token)) {\n          if (isAutomaticSessionRenewalRequired(token)) {\n            const sessionDuration = getSessionDuration(token);\n            AuthApiService.extendUserSession(sessionDuration).then(user => {\n              dispatch(createActionLoadUser(user)); // toast.info(`${user.username} session renewed!`);\n            }).catch(_ => {\n              toast.error(`Refresh session failed, logging out!`);\n              dispatch(createActionLoggingOut());\n            }).finally(() => dispatch(createActionLoading(false)));\n          }\n        } else {\n          dispatch(createActionSessionExpired());\n        }\n      }\n    } // eslint-disable-next-line\n\n  }, [isAuthenticated, isLoggingOut, isSessionExpired, lastActivityTimeStamp]);\n  return React.createElement(ConfirmRefresh, {\n    show: askRefresh,\n    logout: handleLogout,\n    refresh: handleRefresh,\n    onExit: handleConfirmExit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n};\n\nexport default SessionHandler;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/sessionHandler.tsx"],"names":["React","useEffect","useState","useAuth","useNavigate","AUTHAPI","createActionLoggingOut","createActionLogout","createActionLoadUser","createActionLoading","createActionSessionExpired","ConfirmRefresh","isTokenValid","isAutomaticSessionRenewalRequired","getSessionDuration","AuthApiService","TokenService","toast","SessionHandler","askRefresh","setAskRefresh","state","user","isAuthenticated","isLoggingOut","isSessionExpired","lastActivityTimeStamp","dispatch","navigate","handleLogout","logout","info","username","handleRefresh","refresh","then","catch","_","error","finally","handleConfirmExit","getUser","authtoken","token","accessToken","sessionDuration","extendUserSession"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport useAuth from '../../contexts/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport { createActionLoggingOut, createActionLogout, createActionLoadUser, createActionLoading,\r\n        createActionSessionExpired } from '../../reducers/auth';\r\nimport ConfirmRefresh from '../common/confirmRefresh';\r\nimport { isTokenValid, isAutomaticSessionRenewalRequired, getSessionDuration } from '../../utils/session.util';\r\nimport AuthApiService from '../../services/api/AuthApiService';\r\nimport TokenService from '../../services/api/TokenService';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SessionHandler = () => {\r\n\r\n  const [askRefresh, setAskRefresh] = useState(false);\r\n  const { state: { user, isAuthenticated, isLoggingOut, isSessionExpired, lastActivityTimeStamp }, dispatch } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n      setAskRefresh(false);\r\n      if (isAuthenticated) {\r\n          dispatch(createActionLogout());\r\n          AUTHAPI.logout();\r\n          toast.info(`${user!.username} is logged out`);\r\n          navigate('/');\r\n      }\r\n    };\r\n\r\n  const handleRefresh = async () => {\r\n    setAskRefresh(false);\r\n    dispatch(createActionLoading(true));\r\n    AUTHAPI.refresh()\r\n    .then((user) => {\r\n        dispatch(createActionLoadUser(user));\r\n        toast.info(`${user.username} session renewed!`);\r\n        })\r\n    .catch(_ => {\r\n        toast.error(`Refresh session failed, logging out!`);\r\n        handleLogout();\r\n    })\r\n    .finally(() => dispatch(createActionLoading(false)));\r\n  };\r\n\r\n  const handleConfirmExit = () => {\r\n    setAskRefresh(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    // The following 3 lines are a fix to reverse the fact that state is reinitialized while navigating \r\n    const user = TokenService.getUser();\r\n    if (!user) return;\r\n    dispatch(createActionLoadUser(user));\r\n\r\n    if (isAuthenticated) {\r\n      if (isLoggingOut) {\r\n        handleLogout();\r\n      } else if (isSessionExpired) {\r\n        setAskRefresh(true);\r\n      } else if (user && user.authtoken) {\r\n        const token = user.authtoken!.accessToken;\r\n        if (isTokenValid(token)) {\r\n          if (isAutomaticSessionRenewalRequired(token)) {\r\n            const sessionDuration = getSessionDuration(token);\r\n            AuthApiService.extendUserSession(sessionDuration)\r\n            .then((user) => {\r\n              dispatch(createActionLoadUser(user));\r\n              // toast.info(`${user.username} session renewed!`);\r\n              })\r\n            .catch(_ => {\r\n              toast.error(`Refresh session failed, logging out!`);\r\n              dispatch(createActionLoggingOut());\r\n            })\r\n            .finally(() => dispatch(createActionLoading(false)));\r\n          }\r\n        } else {\r\n          dispatch(createActionSessionExpired());\r\n        }\r\n  \r\n      }\r\n    }\r\n  // eslint-disable-next-line\r\n  }, [isAuthenticated, isLoggingOut, isSessionExpired, lastActivityTimeStamp]);\r\n\r\n  return (\r\n    <ConfirmRefresh \r\n      show={askRefresh} \r\n      logout={handleLogout} \r\n      refresh={handleRefresh}\r\n      onExit={handleConfirmExit}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SessionHandler;"]},"metadata":{},"sourceType":"module"}