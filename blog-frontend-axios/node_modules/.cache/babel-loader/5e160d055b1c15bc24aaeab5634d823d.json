{"ast":null,"code":"var _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\sessionTimeoutHandler.tsx\";\nimport React, { useEffect } from 'react';\nimport useAuth from '../../contexts/auth';\nimport AUTHAPI from '../../services/api/AuthAPI';\nimport { createActionLogout } from '../../reducers/auth';\nimport { useConfirmationModalContext } from \"../../contexts/modalConfirmationContext\";\n\nconst SessionTimeoutHandler = () => {\n  const modalContext = useConfirmationModalContext();\n\n  const _useAuth = useAuth(),\n        state = _useAuth.state,\n        dispatch = _useAuth.dispatch;\n\n  const showSessionTimeoutModel = async () => {\n    return modalContext.showConfirmation('Session expired', React.createElement(\"div\", {\n      style: {\n        border: \"2px solid blue\",\n        padding: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Do you want to stay logged in?\")));\n  };\n\n  const handleLogout = () => {\n    dispatch(createActionLogout());\n    AUTHAPI.logout();\n    toast.success(`${state.user.username} is logged out`);\n    navigate('/');\n  };\n\n  useEffect(() => {\n    if (state.isAuthenticated && state.isSessionExpired) {\n      showSessionTimeoutModel().then(result => {\n        if (result) {// Session must be renewed\n        } else {\n          handleLogout();\n          ;\n        }\n      });\n    }\n  }, [state]);\n  return React.createElement(React.Fragment, null);\n};\n\nexport default SessionTimeoutHandler;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/sessionTimeoutHandler.tsx"],"names":["React","useEffect","useAuth","AUTHAPI","createActionLogout","useConfirmationModalContext","SessionTimeoutHandler","modalContext","state","dispatch","showSessionTimeoutModel","showConfirmation","border","padding","handleLogout","logout","toast","success","user","username","navigate","isAuthenticated","isSessionExpired","then","result"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAAQC,2BAAR,QAA0C,yCAA1C;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAChC,QAAMC,YAAY,GAAGF,2BAA2B,EAAhD;;AADgC,mBAEJH,OAAO,EAFH;AAAA,QAExBM,KAFwB,YAExBA,KAFwB;AAAA,QAEjBC,QAFiB,YAEjBA,QAFiB;;AAIhC,QAAMC,uBAAuB,GAAG,YAA8B;AAC1D,WAAOH,YAAY,CAACI,gBAAb,CACH,iBADG,EAEH;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,gBAAT;AAA2BC,QAAAA,OAAO,EAAE;AAApC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADJ,CAFG,CAAP;AAQH,GATD;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACvBL,IAAAA,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;AACAD,IAAAA,OAAO,CAACY,MAAR;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAe,GAAET,KAAK,CAACU,IAAN,CAAYC,QAAS,gBAAtC;AACAC,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACD,GALH;;AAQAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,KAAK,CAACa,eAAN,IAAyBb,KAAK,CAACc,gBAAnC,EAAqD;AACjDZ,MAAAA,uBAAuB,GAAGa,IAA1B,CAAgCC,MAAD,IAAY;AACvC,YAAIA,MAAJ,EAAY,CACR;AACH,SAFD,MAEO;AACHV,UAAAA,YAAY;AAAG;AAClB;AACJ,OAND;AAQH;AACJ,GAXQ,EAWN,CAACN,KAAD,CAXM,CAAT;AAaA,SAAO,yCAAP;AACH,CArCD;;AAuCA,eAAeF,qBAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport useAuth from '../../contexts/auth';\r\nimport AUTHAPI from '../../services/api/AuthAPI';\r\nimport { createActionLogout } from '../../reducers/auth';\r\nimport {useConfirmationModalContext} from \"../../contexts/modalConfirmationContext\";\r\n\r\nconst SessionTimeoutHandler = () => {\r\n    const modalContext = useConfirmationModalContext();\r\n    const { state, dispatch } = useAuth();\r\n\r\n    const showSessionTimeoutModel = async (): Promise<boolean> => {\r\n        return modalContext.showConfirmation(\r\n            'Session expired',\r\n            <div style={{border: \"2px solid blue\", padding: \"10px\"}}>\r\n                <p>\r\n                    Do you want to stay logged in?\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        dispatch(createActionLogout());\r\n        AUTHAPI.logout();\r\n        toast.success(`${state.user!.username} is logged out`);\r\n        navigate('/');\r\n      };\r\n\r\n\r\n    useEffect(() => {\r\n        if (state.isAuthenticated && state.isSessionExpired) {\r\n            showSessionTimeoutModel().then((result) => {\r\n                if (result) {\r\n                    // Session must be renewed\r\n                } else {\r\n                    handleLogout();;\r\n                }\r\n            });\r\n    \r\n        }\r\n    }, [state]);\r\n\r\n    return <></>;\r\n}\r\n\r\nexport default SessionTimeoutHandler;"]},"metadata":{},"sourceType":"module"}