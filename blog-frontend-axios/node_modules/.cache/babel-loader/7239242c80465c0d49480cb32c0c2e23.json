{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\EditPost.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate, useLocation, Link } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { createPostForUpdate, minimumPostTitleLength, minimumPostDescriptionLength } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport { checkUnauthorized, checkSessionExpired, checkTimeout, getTokenFromErrors, checkSessionExtendable, extendSession } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\nimport Image from '../common/Image';\nimport ImageUpload from '../common/ImageUpload';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\nimport EditPostContent from './EditPostContent';\n\nconst EditPost = () => {\n  var _errors$categoryTitle, _errors$title, _errors$description, _errors$body;\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const _useAuth = useAuth(),\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        postImage = _useState8[0],\n        setPostImage = _useState8[1];\n\n  const _useState9 = useState(),\n        _useState10 = _slicedToArray(_useState9, 2),\n        postDefaultImage = _useState10[0],\n        setpostDefaultImage = _useState10[1];\n\n  const _useState11 = useState(),\n        _useState12 = _slicedToArray(_useState11, 2),\n        editingContent = _useState12[0],\n        setEditingContent = _useState12[1];\n\n  const _useState13 = useState(),\n        _useState14 = _slicedToArray(_useState13, 2),\n        content = _useState14[0],\n        setContent = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        submitForm = _useState16[0],\n        setSubmitForm = _useState16[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required').min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\n    body: Yup.string().required('Content is required'),\n    categoryTitle: Yup.string(),\n    imageChanged: Yup.bool()\n  });\n  const defaultValues = {\n    categoryTitle: '',\n    title: post === null || post === void 0 ? void 0 : post.title,\n    description: post === null || post === void 0 ? void 0 : post.description,\n    body: post === null || post === void 0 ? void 0 : post.body,\n    imageChanged: false\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue,\n        getValues = _useForm.getValues,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    (async () => {\n      let allCategories;\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          await CategoryApiService.getAllCategories().then(categories => {\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            allCategories = [noCategory].concat(categories);\n            setCategories(allCategories);\n            selectCategory(allCategories, 'no_category', false);\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors)).finally(() => dispatch(createActionLoading(false)));\n        };\n\n        fetchCategories();\n      }\n\n      if (!post) {\n        const fetchPost = async () => {\n          await getDefaultPostImage().then(imageData => {\n            setpostDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          }).finally(() => dispatch(createActionLoading(false)));\n          await PostApiService.getPostById(postId).then(post => {\n            setContent(post.body);\n            setPost(post);\n            reset(post);\n\n            if (post.category) {\n              selectCategory(allCategories, post.category.id, false);\n            }\n          }).catch(apiErrors => handleFetchPostError(apiErrors)).finally(() => dispatch(createActionLoading(false)));\n        };\n\n        await fetchPost();\n      }\n\n      if (location.state) {\n        restorePostEditingState(location.state);\n      }\n\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    setImageData(post === null || post === void 0 ? void 0 : post.image); // eslint-disable-next-line\n  }, [post]);\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const PostImage = post => {\n    if (postImage) {\n      return React.createElement(ImageResize, {\n        imageData: postImage,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    } else {\n      return postDefaultImage && React.createElement(Image, {\n        imageData: postDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    }\n  };\n\n  const imageMaxSize = {\n    maxWidth: 200,\n    maxHeight: 200\n  };\n\n  const onSubmit = async data => {\n    if (post && isDirty && submitForm) {\n      dispatch(createActionLoading(true));\n      const image = postImage;\n      const postData = createPostForUpdate(_objectSpread({}, post, {}, data, {\n        image,\n        category\n      }));\n      await PostApiService.updatePost(post.id, postData).then(() => {\n        handleSubmitFormSuccess();\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      }).finally(() => dispatch(createActionLoading(false)));\n    }\n  };\n\n  const handleSessionExpired = apiErrors => {\n    const token = getTokenFromErrors(apiErrors);\n\n    if (checkSessionExtendable(token)) {\n      toast.error(`${process} failed, session renewed, please try again`);\n      extendSession(token);\n    } else {\n      toast.error(`${process} failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n    }\n  };\n\n  const handleApiErrors = (apiErrors, process) => {\n    if (checkSessionExpired(apiErrors)) {\n      handleSessionExpired(apiErrors);\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else if (checkTimeout(apiErrors)) {\n      toast.error(`Request timeout`);\n    } else {\n      toast.error(`${process} failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const handleFetchCategoriesError = apiErrors => {\n    handleApiErrors(apiErrors, 'Categories reading');\n  };\n\n  const handleFetchPostError = apiErrors => {\n    handleApiErrors(apiErrors, 'Post reading');\n  };\n\n  const handleSubmitFormSuccess = () => {\n    toast.success(`Post updated successfully...`);\n    navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    handleApiErrors(apiErrors, 'Post update');\n  };\n\n  const cancelEditPostMessage = () => `post edition and loose changes`;\n\n  const handleResetEditPost = () => {\n    setPostContent(post.body, false);\n\n    if (post === null || post === void 0 ? void 0 : post.category) {\n      selectCategory(categories, post.category.id, false);\n    } else {\n      selectCategory(categories, 'no_category', false);\n    }\n\n    setImageData(post === null || post === void 0 ? void 0 : post.image);\n    reset(post);\n  };\n\n  const handleEditContent = () => {\n    setEditingContent(true);\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const setPostContent = (value, shouldDirty = true) => {\n    setValue('body', value, {\n      shouldDirty: shouldDirty,\n      shouldValidate: false\n    });\n    setContent(value);\n    setEditingContent(false);\n  };\n\n  const onCancelContentEditing = () => {\n    setEditingContent(false);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories.find(category => category.id === categoryId);\n    setCategory((category === null || category === void 0 ? void 0 : category.id) === 'no_category' ? undefined : category);\n    setValue('categoryTitle', category.title, {\n      shouldDirty: setDirty\n    });\n  };\n\n  const handleCancelEditPost = () => {\n    navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n  };\n\n  const handleImageUpload = image => {\n    setImageData(image);\n  };\n\n  const handleImageUploadError = error => {\n    toast.error(`User image upload failed`);\n  };\n\n  const handleDeleteImage = () => {\n    setImageData(undefined);\n  };\n\n  const handleSubmitForm = () => {\n    setSubmitForm(true);\n  };\n\n  const setImageData = image => {\n    var _post$image;\n\n    const isImageDefined = image !== undefined;\n    const isInitialImageDefined = (post === null || post === void 0 ? void 0 : post.image) !== undefined;\n    const imageChanged = isImageDefined !== isInitialImageDefined || isImageDefined && (image === null || image === void 0 ? void 0 : image.base64) !== (post === null || post === void 0 ? void 0 : (_post$image = post.image) === null || _post$image === void 0 ? void 0 : _post$image.base64);\n    setValue('imageChanged', imageChanged, {\n      shouldDirty: true\n    });\n    setPostImage(image);\n  };\n\n  const getPostEditingState = () => {\n    return {\n      content: content,\n      formState: getValues(),\n      category: category,\n      postImage: postImage,\n      postUrl: location.pathname,\n      isDirty: isDirty\n    };\n  };\n\n  const setFormValues = (formState, isDirty) => {\n    setValue('title', formState.title, {\n      shouldDirty: isDirty\n    });\n    setValue('description', formState.description, {\n      shouldDirty: isDirty\n    });\n    setValue('body', formState.body, {\n      shouldDirty: isDirty\n    });\n    setValue('categoryTitle', formState.categoryTitle, {\n      shouldDirty: isDirty\n    });\n    setValue('imageChanged', formState.imageChanged, {\n      shouldDirty: isDirty\n    });\n  };\n\n  const restorePostEditingState = postEditingState => {\n    if (postEditingState) {\n      setContent(postEditingState.content);\n      setCategory(postEditingState.category);\n      setPostImage(postEditingState.postImage);\n      setFormValues(postEditingState.formState, postEditingState.isDirty);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, \" Edit Post  \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"edit-post-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, category.title))), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\"\n  }, register('categoryTitle'), {\n    className: `col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, (_errors$categoryTitle = errors.categoryTitle) === null || _errors$categoryTitle === void 0 ? void 0 : _errors$categoryTitle.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }, \" Image: \"), postImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    onImageUploadError: handleImageUploadError,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, PostImage(post)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), !editingContent && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, \" Content \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(\"textarea\", Object.assign({\n    readOnly: true,\n    placeholder: \"Content must not be empty, user Edit button to edit the content\"\n  }, register('body'), {\n    className: `form-control ${errors.body ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, (_errors$body = errors.body) === null || _errors$body === void 0 ? void 0 : _errors$body.message))), React.createElement(\"div\", {\n    className: \"form-group col-md-7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    onClick: () => handleEditContent(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, \"Edit Content\"), content && React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/post/content\",\n    state: getPostEditingState(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary col-md-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, \"View Content\")))))), editingContent && React.createElement(EditPostContent, {\n    content: getValues('body'),\n    onSaveContent: setPostContent,\n    onCancelEditing: onCancelContentEditing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group row-md-5 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditPostMessage(),\n    onClick: () => handleCancelEditPost(),\n    className: \"btn ml-2 btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditPost(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-success\",\n    disabled: !isDirty,\n    onClick: () => handleSubmitForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  }, \"Update\")))))));\n};\n\nexport default EditPost;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/EditPost.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","useLocation","Link","toast","Yup","yupResolver","CancelButton","createPostForUpdate","minimumPostTitleLength","minimumPostDescriptionLength","PostApiService","CategoryApiService","createActionLoading","useAuth","ListErrors","DropdownButton","Dropdown","checkUnauthorized","checkSessionExpired","checkTimeout","getTokenFromErrors","checkSessionExtendable","extendSession","createActionSessionExpired","Image","ImageUpload","ImageResize","resizeImage","EditPostContent","EditPost","navigate","location","dispatch","errorList","setErrorList","postId","post","setPost","categories","setCategories","category","setCategory","postImage","setPostImage","postDefaultImage","setpostDefaultImage","editingContent","setEditingContent","content","setContent","submitForm","setSubmitForm","validationSchema","object","shape","title","string","required","min","description","body","categoryTitle","imageChanged","bool","defaultValues","resolver","register","handleSubmit","reset","setValue","getValues","formState","errors","isDirty","allCategories","fetchCategories","getAllCategories","then","noCategory","id","concat","selectCategory","catch","apiErrors","handleFetchCategoriesError","finally","fetchPost","getDefaultPostImage","imageData","error","Error","getPostById","handleFetchPostError","state","restorePostEditingState","setImageData","image","imageMaxSize","maxWidth","maxHeight","PostImage","onSubmit","data","postData","updatePost","handleSubmitFormSuccess","handleSubmitFormError","handleSessionExpired","token","process","handleApiErrors","success","cancelEditPostMessage","handleResetEditPost","setPostContent","handleEditContent","handleCategorySelect","e","value","shouldDirty","shouldValidate","onCancelContentEditing","categoryId","setDirty","find","undefined","handleCancelEditPost","handleImageUpload","handleImageUploadError","handleDeleteImage","handleSubmitForm","isImageDefined","isInitialImageDefined","base64","getPostEditingState","postUrl","pathname","setFormValues","postEditingState","map","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { IPost, IUpdatePost, ICategory, createPostForUpdate, minimumPostTitleLength, minimumPostDescriptionLength,\r\n          ImageSizeProps } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { IErrors, ImageData, PostEditingFormState, IPostEditingState } from '../../types';\r\nimport { checkUnauthorized, checkSessionExpired, checkTimeout, getTokenFromErrors, checkSessionExtendable,\r\n  extendSession } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\nimport Image from '../common/Image';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nimport EditPostContent from './EditPostContent';\r\n\r\nconst EditPost = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const [post, setPost] = useState<IPost>();\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [postImage, setPostImage] = useState<ImageData>();\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n  const [editingContent, setEditingContent] = useState<boolean>();\r\n  const [content, setContent] = useState<string>();\r\n  const [submitForm, setSubmitForm] = useState<boolean>(false);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required')\r\n      .min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\r\n    body: Yup.string().required('Content is required'),\r\n    categoryTitle: Yup.string(),\r\n    imageChanged: Yup.bool(),\r\n  });\r\n\r\n  const defaultValues = {categoryTitle: '', title: post?.title, description: post?.description, body: post?.body,\r\n                          imageChanged: false};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    getValues,\r\n    formState: { errors, isDirty }\r\n  } = useForm<PostEditingFormState>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      let allCategories: ICategory[];\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n        await CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            allCategories = [noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            selectCategory(allCategories, 'no_category', false);\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors))\r\n          .finally(() => dispatch(createActionLoading(false)));\r\n        }\r\n        fetchCategories();\r\n      }\r\n      if (!post) {\r\n        const fetchPost = async (): Promise<void> => {\r\n          await getDefaultPostImage()\r\n          .then(imageData => { setpostDefaultImage(imageData);})\r\n          .catch(error => {\r\n            throw new Error(error);\r\n          })\r\n          .finally(() => dispatch(createActionLoading(false)));  \r\n          await PostApiService.getPostById(postId!)\r\n          .then(post => { \r\n            setContent(post.body);\r\n            setPost(post); \r\n            reset(post);\r\n            if (post.category) {\r\n              selectCategory(allCategories, post.category.id!, false);\r\n            }\r\n\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors))\r\n          .finally(() => dispatch(createActionLoading(false)));\r\n        }\r\n        await fetchPost();\r\n      }\r\n      if (location.state) {\r\n        restorePostEditingState(location.state as any);\r\n      }\r\n      dispatch(createActionLoading(false));\r\n\r\n    })();\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setImageData(post?.image);\r\n  // eslint-disable-next-line\r\n  }, [post]);\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const PostImage = (post: IPost) => {\r\n    if(postImage) {\r\n      return <ImageResize imageData={postImage} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  postDefaultImage && <Image imageData={postDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:200, maxHeight:200}\r\n\r\n  const onSubmit = async (data: PostEditingFormState) => {\r\n    if (post && isDirty && submitForm) {\r\n      dispatch(createActionLoading(true));\r\n      const image = postImage;\r\n      const postData: IUpdatePost = createPostForUpdate({...post, ...data, image, category});\r\n      await PostApiService.updatePost(post.id!, postData)\r\n      .then(() => { handleSubmitFormSuccess(); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); })\r\n      .finally(() => dispatch(createActionLoading(false)));\r\n     }\r\n  } \r\n\r\n  const handleSessionExpired = (apiErrors: IErrors) => {\r\n    const token = getTokenFromErrors(apiErrors);\r\n    if (checkSessionExtendable(token)) {\r\n      toast.error(`${process} failed, session renewed, please try again`);\r\n      extendSession(token);\r\n    }\r\n    else {\r\n      toast.error(`${process} failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate(`/post/${post?.id}`);      \r\n    }\r\n  }\r\n\r\n  const handleApiErrors = (apiErrors: IErrors, process: string) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      handleSessionExpired(apiErrors);\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else if (checkTimeout(apiErrors)) {\r\n      toast.error(`Request timeout`);\r\n    } else {\r\n      toast.error(`${process} failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Categories reading');\r\n  }\r\n  \r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Post reading');\r\n  }\r\n\r\n  const handleSubmitFormSuccess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n    navigate(`/post/${post?.id}`);\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Post update');\r\n  }\r\n\r\n  const cancelEditPostMessage = () => `post edition and loose changes`;\r\n\r\n  const handleResetEditPost = () => {\r\n    setPostContent(post!.body, false);\r\n    if (post?.category) {\r\n      selectCategory(categories!, post.category.id!, false);\r\n    } else {\r\n      selectCategory(categories!, 'no_category', false);\r\n    }\r\n    setImageData(post?.image);\r\n    reset(post);\r\n  }\r\n\r\n  const handleEditContent = () => {\r\n    setEditingContent(true);\r\n  }\r\n\r\n  const handleCategorySelect=(e: any)=>{\r\n    selectCategory(categories!, e, true);\r\n  }\r\n\r\n  const setPostContent = (value: string, shouldDirty: boolean = true) => {\r\n    setValue('body', value, { shouldDirty: shouldDirty, shouldValidate: false });\r\n    setContent(value);\r\n    setEditingContent(false);\r\n  }\r\n\r\n  const onCancelContentEditing = () => {\r\n    setEditingContent(false);\r\n  }\r\n\r\n  const selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n    const category = categories.find(category => category.id === categoryId);\r\n    setCategory(category?.id === 'no_category' ? undefined: category);\r\n    setValue('categoryTitle', category!.title, { shouldDirty: setDirty });\r\n  }\r\n\r\n  const handleCancelEditPost = () => {\r\n    navigate(`/post/${post?.id}`);   \r\n  };\r\n\r\n  const handleImageUpload = (image: ImageData) => {\r\n    setImageData(image);\r\n  }\r\n\r\n  const handleImageUploadError = (error: any) => {\r\n    toast.error(`User image upload failed`);\r\n  }\r\n\r\n  const handleDeleteImage = () => {\r\n    setImageData(undefined);\r\n  }\r\n\r\n  const handleSubmitForm = () => {\r\n    setSubmitForm(true);\r\n  }\r\n\r\n  const setImageData = (image: ImageData | undefined) => {\r\n    const isImageDefined = image !== undefined;\r\n    const isInitialImageDefined = post?.image !== undefined;\r\n    const imageChanged = (isImageDefined !== isInitialImageDefined) ||\r\n                          (isImageDefined && image?.base64 !== post?.image?.base64);\r\n    setValue('imageChanged', imageChanged, {shouldDirty: true});\r\n    setPostImage(image);\r\n  }\r\n\r\n  const getPostEditingState = () : IPostEditingState => {\r\n    return {\r\n      content: content,\r\n      formState: getValues(),\r\n      category: category,\r\n      postImage: postImage,\r\n      postUrl: location.pathname,\r\n      isDirty: isDirty\r\n    }\r\n  }\r\n\r\n  const setFormValues = (formState: PostEditingFormState, isDirty: boolean) => {\r\n    setValue('title', formState.title, {shouldDirty: isDirty});\r\n    setValue('description', formState.description, {shouldDirty: isDirty});\r\n    setValue('body', formState.body, {shouldDirty: isDirty});\r\n    setValue('categoryTitle', formState.categoryTitle, {shouldDirty: isDirty});\r\n    setValue('imageChanged', formState.imageChanged, {shouldDirty: isDirty});\r\n  }\r\n\r\n  const restorePostEditingState = (postEditingState: IPostEditingState) => {\r\n    if (postEditingState) {\r\n      setContent(postEditingState.content);\r\n      setCategory(postEditingState.category);\r\n      setPostImage(postEditingState.postImage);\r\n      setFormValues(postEditingState.formState, postEditingState.isDirty);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Post  </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"edit-post-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={false}>\r\n            <div className=\"form-group col-md-8\">\r\n              <div className=\"row\">\r\n                <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                    {categories && categories.map((category: ICategory) => \r\n                    (\r\n                      <Dropdown.Item eventKey={category.id}>{category.title}</Dropdown.Item>\r\n                    ))\r\n                  }\r\n                </DropdownButton>\r\n                <input    \r\n                  type=\"text\" disabled  placeholder=\"no category selected\" \r\n                  {...register('categoryTitle')}\r\n                  className={`col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`}           \r\n                />\r\n                </div>\r\n              <div className=\"invalid-feedback\">{errors.categoryTitle?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4\">\r\n              <div className=\"row\">\r\n                <label className=\"col-md-2\"> Image: </label>\r\n                { postImage && (\r\n                  <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleDeleteImage() } >\r\n                    Delete Image\r\n                  </button>\r\n                )  \r\n                }   \r\n                <ImageUpload onImageUpload={handleImageUpload} onImageUploadError={handleImageUploadError} resize={imageMaxSize}/>                     \r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              {PostImage(post)}\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                {...register('title')}\r\n                className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter description\"\r\n                {...register('description')}\r\n                className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n            </div>\r\n\r\n            {!editingContent && (\r\n              <div>\r\n                <div className=\"form-group col-md-12\">\r\n                  <label htmlFor=\"body\"> Content </label>\r\n                  <div>\r\n                    <textarea \r\n                      readOnly \r\n                      placeholder=\"Content must not be empty, user Edit button to edit the content\"\r\n                      {...register('body')}\r\n                      className={`form-control ${errors.body ? 'is-invalid' : ''}`} \r\n                    />\r\n                    <div className=\"invalid-feedback\">{errors.body?.message}</div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group col-md-7\">\r\n                  <div className=\"row\">\r\n                    <button className=\"btn btn-secondary\"  onClick={ () => handleEditContent() } >\r\n                        Edit Content\r\n                    </button> \r\n                    {content && (\r\n                      <div className=\"col-md-6\">\r\n                        <Link to=\"/post/content\" state={getPostEditingState()}>\r\n                          <button type=\"button\" className=\"btn btn-secondary col-md-3\">\r\n                            View Content\r\n                          </button>\r\n                        </Link>                     \r\n                      </div>  \r\n                    )}\r\n                  </div> \r\n                </div>\r\n              </div>\r\n            )         \r\n            }\r\n            {editingContent && (\r\n              <EditPostContent content={getValues('body')} onSaveContent={setPostContent} onCancelEditing={onCancelContentEditing}/>\r\n            ) \r\n            }\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-10 col-md-12\">\r\n                <div className=\"form-group row-md-5 pull-right\">\r\n                    <CancelButton prompt={isDirty} message={cancelEditPostMessage()} onClick={() => handleCancelEditPost()} className=\"btn ml-2 btn-danger\">Cancel</CancelButton>\r\n                    <button className=\"btn ml-2 btn-secondary\" disabled={!isDirty} onClick={ () => handleResetEditPost() } >\r\n                      Reset\r\n                    </button>\r\n                    <button className=\"btn ml-2 btn-success\"  disabled={!isDirty} onClick={ () => handleSubmitForm()}>\r\n                      Update\r\n                    </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default EditPost;"]},"metadata":{},"sourceType":"module"}