{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from \"../../config/api.config\";\nexport const TOKEN_KEY = 'token';\naxios.defaults.baseURL = API_BASE_URL;\nexport function setAuthToken(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\nexport function setAuthInterceptor(token) {\n  axios.interceptors.request.use(config => {\n    if (!config.headers.Authorization) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n}\nexport function handleError(error) {\n  let errorAttributes = {};\n\n  if (error.message && error.message.length > 0) {\n    console.log('Error: ', error.message);\n    errorAttributes.message = error.message;\n  }\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n\n    if (error.response.status > 0) {\n      errorAttributes.status = error.response.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  } else if (error.request) {\n    // The client never received a response, and the request was never left\n    console.log(error.request);\n\n    if (error.request.status > 0) {\n      errorAttributes.status = error.request.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  }\n\n  return Promise.reject(errorAttributes);\n} // Add a request interceptor\n\naxios.interceptors.request.use(config => config, error => {\n  return handleError(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return handleError(error);\n});\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIUtils.ts"],"names":["axios","API_BASE_URL","TOKEN_KEY","defaults","baseURL","setAuthToken","token","headers","common","setAuthInterceptor","interceptors","request","use","config","Authorization","error","Promise","reject","handleError","errorAttributes","message","length","console","log","response","data","status","statusText"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAGA,OAAO,MAAMC,SAAS,GAAG,OAAlB;AAEPF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyBH,YAAzB;AAEA,OAAO,SAASI,YAAT,CAAsBC,KAAtB,EAA4C;AACjD,MAAIA,KAAJ,EAAW;AACTN,IAAAA,KAAK,CAACG,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASF,KAAM,EAAjE;AACD,GAFD,MAEO;AACL,WAAON,KAAK,CAACG,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF;AAED,OAAO,SAASC,kBAAT,CAA4BH,KAA5B,EAAkD;AAEvDN,EAAAA,KAAK,CAACU,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAM,IAAI;AACxC,QAAI,CAACA,MAAM,CAACN,OAAP,CAAeO,aAApB,EAAmC;AACjCD,MAAAA,MAAM,CAACN,OAAP,CAAeO,aAAf,GAAgC,UAASR,KAAM,EAA/C;AACD;;AAED,WAAOO,MAAP;AACD,GAND,EAOAE,KAAK,IAAI;AACP,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GATD;AAWD;AAED,OAAO,SAASG,WAAT,CAAqBH,KAArB,EAAqD;AAC1D,MAAII,eAAyB,GAAG,EAAhC;;AAEA,MAAIJ,KAAK,CAACK,OAAN,IAAiBL,KAAK,CAACK,OAAN,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAC7CC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,KAAK,CAACK,OAA7B;AACAD,IAAAA,eAAe,CAACC,OAAhB,GAA0BL,KAAK,CAACK,OAAhC;AACD;;AAED,MAAIL,KAAK,CAACS,QAAV,EAAoB;AAClB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,QAAN,CAAeC,IAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,QAAN,CAAeE,MAA3B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,QAAN,CAAejB,OAA3B;;AACA,QAAIQ,KAAK,CAACS,QAAN,CAAeE,MAAf,GAAwB,CAA5B,EAA+B;AAC7BP,MAAAA,eAAe,CAACO,MAAhB,GAAyBX,KAAK,CAACS,QAAN,CAAeE,MAAxC;AACAP,MAAAA,eAAe,CAACQ,UAAhB,GAA6BZ,KAAK,CAACJ,OAAN,CAAcgB,UAA3C;AACD;AACF,GATD,MASO,IAAIZ,KAAK,CAACJ,OAAV,EAAmB;AACxB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACJ,OAAlB;;AACA,QAAII,KAAK,CAACJ,OAAN,CAAce,MAAd,GAAuB,CAA3B,EAA8B;AAC5BP,MAAAA,eAAe,CAACO,MAAhB,GAAyBX,KAAK,CAACJ,OAAN,CAAce,MAAvC;AACAP,MAAAA,eAAe,CAACQ,UAAhB,GAA6BZ,KAAK,CAACJ,OAAN,CAAcgB,UAA3C;AACD;AACF;;AACA,SAAOX,OAAO,CAACC,MAAR,CAAeE,eAAf,CAAP;AACF,C,CAED;;AACAnB,KAAK,CAACU,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACEC,MAAM,IAAIA,MADZ,EAEEE,KAAK,IAAI;AACP,SAAOG,WAAW,CAACH,KAAD,CAAlB;AACD,CAJH;AAOAf,KAAK,CAACU,YAAN,CAAmBc,QAAnB,CAA4BZ,GAA5B,CACGY,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIGT,KAAD,IAAW;AACT,SAAOG,WAAW,CAACH,KAAD,CAAlB;AACD,CANH;AASA,eAAef,KAAf","sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL } from \"../../config/api.config\";\r\nimport { IErrors } from '../../types';\r\n\r\nexport const TOKEN_KEY = 'token';\r\n\r\naxios.defaults.baseURL = API_BASE_URL;\r\n\r\nexport function setAuthToken(token: string | null) {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n}\r\n\r\nexport function setAuthInterceptor(token: string | null) {\r\n\r\n  axios.interceptors.request.use( config => {\r\n    if (!config.headers.Authorization) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n}\r\n\r\nexport function handleError(error : any) : Promise<IErrors> {\r\n  let errorAttributes : IErrors = {};\r\n\r\n  if (error.message && error.message.length > 0) {\r\n    console.log('Error: ', error.message);\r\n    errorAttributes.message = error.message;\r\n  }\r\n\r\n  if (error.response) {\r\n    // The client was given an error response (5xx, 4xx)\r\n    console.log(error.response.data);\r\n    console.log(error.response.status);\r\n    console.log(error.response.headers);\r\n    if (error.response.status > 0) {\r\n      errorAttributes.status = error.response.status;\r\n      errorAttributes.statusText = error.request.statusText;\r\n    }\r\n  } else if (error.request) {\r\n    // The client never received a response, and the request was never left\r\n    console.log(error.request);\r\n    if (error.request.status > 0) {\r\n      errorAttributes.status = error.request.status;\r\n      errorAttributes.statusText = error.request.statusText;\r\n    }\r\n  }\r\n   return Promise.reject(errorAttributes);\r\n}\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use(\r\n  config => config,\r\n  error => {\r\n    return handleError(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    return handleError(error);\r\n  },\r\n);\r\n\r\nexport default axios;\r\n"]},"metadata":{},"sourceType":"module"}