{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\user\\\\UserProfile.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from \"react-toastify\";\nimport { UserApiService } from \"../../services/api/UserApiService\";\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport CancelButton from '../common/cancelConfirmation';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionLoading, createActionUpdateUser, createActionSessionExpired } from '../../reducers/auth';\nimport Image from '../common/Image';\nimport ImageUpload from '../common/ImageUpload';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\nimport { createUserForUpdate, minimumPasswordLength, minimumEmailLength, minimumUserNameLength } from \"../../types\";\n\nconst UserProfile = () => {\n  var _errors$username, _errors$email, _errors$currentPasswo, _errors$newPassword;\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        userEdited = _useState2[0],\n        setUserEdited = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userImage = _useState4[0],\n        setUserImage = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userDefaultImage = _useState6[0],\n        setuserDefaultImage = _useState6[1];\n\n  const navigate = useNavigate();\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    currentPassword: Yup.lazy(value => {\n      if (value && Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))) {\n        // Return our normal validation\n        return Yup.string().required().min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\n      } // Otherwise, return a simple validation\n\n\n      return Yup.mixed().notRequired();\n    }),\n    newPassword: Yup.lazy(value => {\n      if (value && Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))) {\n        // Return our normal validation\n        return Yup.string().required().min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\n      } // Otherwise, return a simple validation\n\n\n      return Yup.mixed().notRequired();\n    }),\n    imageChanged: Yup.bool()\n  });\n  const defaultValues = {\n    username: userEdited === null || userEdited === void 0 ? void 0 : userEdited.username,\n    email: userEdited === null || userEdited === void 0 ? void 0 : userEdited.email,\n    currentPassword: undefined,\n    newPassword: undefined,\n    imageChanged: false\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    if (user) {\n      if (!userEdited) {\n        const fetchData = async () => {\n          dispatch(createActionLoading(true));\n          await getDefaultUserImage().then(imageData => {\n            setuserDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          });\n          await UserApiService.getUserById(user.id).then(userRead => {\n            setUserEdited(userRead);\n            reset(userRead);\n            setUserImage(userRead === null || userRead === void 0 ? void 0 : userRead.image);\n          }).catch(apiErrors => handleFetchUserError(apiErrors));\n          dispatch(createActionLoading(false));\n        };\n\n        fetchData();\n      }\n    } else {\n      navigate('/');\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const handleFetchUserError = apiErrors => {\n    toast.error(`User reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const imageMaxSize = {\n    maxWidth: 200,\n    maxHeight: 200\n  };\n\n  const UserImage = () => {\n    if (userImage) {\n      return React.createElement(ImageResize, {\n        imageData: userImage,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    } else {\n      return userDefaultImage && React.createElement(Image, {\n        imageData: userDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      });\n    }\n  };\n\n  const getDefaultUserImage = () => {\n    return resizeImage('/default-profil-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const onSubmit = async data => {\n    if (userEdited && isDirty) {\n      dispatch(createActionLoading(true));\n      const image = userImage;\n      const userData = createUserForUpdate(_objectSpread({}, userEdited, {}, data, {\n        image\n      }));\n      await UserApiService.updateUser(userEdited.id, userData).then(userUpdated => {\n        setUserEdited(userUpdated);\n        handleSubmitFormSuccess(userUpdated);\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleSubmitFormSuccess = userUpdated => {\n    if ((user === null || user === void 0 ? void 0 : user.email) === (userUpdated === null || userUpdated === void 0 ? void 0 : userUpdated.email)) {\n      // Update state user to refresh user info in NavBar\n      dispatch(createActionUpdateUser(userUpdated));\n    }\n\n    toast.success(`User updated successfully...`);\n    navigate('/');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`User update failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`User update failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelEditUserMessage = () => `user edition and loose changes`;\n\n  const handleResetEditUser = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelEditUser = () => {\n    navigate('/');\n  };\n\n  const handleImageUpload = image => {\n    setImageData(image);\n  };\n\n  const handleImageUploadError = error => {\n    toast.error(`User image upload failed`);\n  };\n\n  const handleDeleteImage = () => {\n    setImageData(undefined);\n  };\n\n  const setImageData = image => {\n    var _user$image;\n\n    const isImageDefined = image !== undefined;\n    const isInitialImageDefined = (userEdited === null || userEdited === void 0 ? void 0 : userEdited.image) !== undefined;\n    const imageChanged = isImageDefined !== isInitialImageDefined || isImageDefined && (image === null || image === void 0 ? void 0 : image.base64) !== (user === null || user === void 0 ? void 0 : (_user$image = user.image) === null || _user$image === void 0 ? void 0 : _user$image.base64);\n    setValue('imageChanged', imageChanged, {\n      shouldDirty: true\n    });\n    setUserImage(image);\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, userEdited && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \" Edit User Profile \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-user-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \" Image: \"), userImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    onImageUploadError: handleImageUploadError,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, UserImage()), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter user name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \" Email \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \" Enter Current Password \"), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Enter a value to change current password\"\n  }, register('currentPassword'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, (_errors$currentPasswo = errors.currentPassword) === null || _errors$currentPasswo === void 0 ? void 0 : _errors$currentPasswo.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, \" Enter New Password \"), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Enter a value to change current password\"\n  }, register('newPassword'), {\n    className: `form-control ${errors.newPassword ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, (_errors$newPassword = errors.newPassword) === null || _errors$newPassword === void 0 ? void 0 : _errors$newPassword.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, \"Update\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditUser(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, \"Reset\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditUserMessage(),\n    onClick: () => handleCancelEditUser(),\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default UserProfile;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/user/UserProfile.tsx"],"names":["React","useState","useEffect","useForm","useNavigate","Yup","yupResolver","toast","UserApiService","useAuth","ListErrors","CancelButton","checkUnauthorized","checkForbidden","createActionLoading","createActionUpdateUser","createActionSessionExpired","Image","ImageUpload","ImageResize","resizeImage","createUserForUpdate","minimumPasswordLength","minimumEmailLength","minimumUserNameLength","UserProfile","state","isLoading","user","dispatch","errorList","setErrorList","userEdited","setUserEdited","userImage","setUserImage","userDefaultImage","setuserDefaultImage","navigate","validationSchema","object","shape","username","string","required","min","email","currentPassword","lazy","value","Object","values","some","v","undefined","mixed","notRequired","newPassword","imageChanged","bool","defaultValues","resolver","register","handleSubmit","reset","setValue","formState","errors","isDirty","fetchData","getDefaultUserImage","then","imageData","catch","error","Error","getUserById","id","userRead","image","apiErrors","handleFetchUserError","imageMaxSize","maxWidth","maxHeight","UserImage","onSubmit","data","userData","updateUser","userUpdated","handleSubmitFormSuccess","handleSubmitFormError","success","cancelEditUserMessage","handleResetEditUser","keepDirty","handleCancelEditUser","handleImageUpload","setImageData","handleImageUploadError","handleDeleteImage","isImageDefined","isInitialImageDefined","base64","shouldDirty","message","password"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { toast } from \"react-toastify\";\r\nimport { UserApiService } from \"../../services/api/UserApiService\";\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport CancelButton from '../common/cancelConfirmation';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionLoading, createActionUpdateUser, createActionSessionExpired } from '../../reducers/auth';\r\nimport Image from '../common/Image';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nimport { IErrors, User, IUpdateUser, createUserForUpdate, minimumPasswordLength, minimumEmailLength, \r\n          minimumUserNameLength, ImageData, ImageSizeProps } from \"../../types\";\r\n\r\nconst UserProfile = () => {\r\n\r\n  const { state: { isLoading, user }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const [userEdited, setUserEdited] = useState<User>();\r\n  const [userImage, setUserImage] = useState<ImageData>();\r\n  const [userDefaultImage, setuserDefaultImage] = useState<ImageData>();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n      username: Yup.string().required('User name is required')\r\n      .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n      email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n      currentPassword: Yup.lazy(value => {\r\n          if (\r\n          value &&\r\n          Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))\r\n          ) {\r\n          // Return our normal validation\r\n          return Yup.string().required()\r\n              .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\r\n          }\r\n          // Otherwise, return a simple validation\r\n          return Yup.mixed().notRequired();\r\n      }),\r\n      newPassword: Yup.lazy(value => {\r\n      if (\r\n          value &&\r\n          Object.values(value).some(v => !(v === null || v === undefined || v === \"\"))\r\n      ) {\r\n          // Return our normal validation\r\n          return Yup.string().required()\r\n          .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`);\r\n          }\r\n      // Otherwise, return a simple validation\r\n      return Yup.mixed().notRequired();\r\n      }),\r\n      imageChanged: Yup.bool(),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n      username: string;\r\n      email: string;\r\n      password?: string;\r\n      imageChanged: boolean;\r\n      currentPassword?: string;\r\n      newPassword?: string;\r\n  };\r\n\r\n  const defaultValues = {username: userEdited?.username, email: userEdited?.email, currentPassword: undefined, \r\n                          newPassword: undefined, imageChanged: false};\r\n\r\n  const {\r\n      register,\r\n      handleSubmit,\r\n      reset,\r\n      setValue,\r\n      formState: { errors, isDirty }\r\n    } = useForm<UpdateSubmitForm>({\r\n      resolver: yupResolver(validationSchema),\r\n      defaultValues: defaultValues\r\n    });\r\n\r\n  useEffect(() => {\r\n      if (user) {\r\n          if (!userEdited) {\r\n              const fetchData = async (): Promise<void> => {\r\n              dispatch(createActionLoading(true));\r\n              await getDefaultUserImage()\r\n              .then(imageData => { \r\n                setuserDefaultImage(imageData);\r\n              }) \r\n              .catch(error => {\r\n                throw new Error(error);\r\n              });\r\n              await UserApiService.getUserById(user!.id!)\r\n              .then((userRead) => { setUserEdited(userRead); reset(userRead); setUserImage(userRead?.image);})\r\n              .catch((apiErrors: IErrors) => handleFetchUserError(apiErrors));\r\n              dispatch(createActionLoading(false));\r\n              }\r\n              fetchData();      \r\n          }\r\n      } else {\r\n          navigate('/');\r\n      }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleFetchUserError = (apiErrors: IErrors) => {\r\n    toast.error(`User reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:200, maxHeight:200}\r\n\r\n  const UserImage = () => {\r\n    if(userImage) {\r\n      return <ImageResize imageData={userImage} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  userDefaultImage && <Image imageData={userDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const getDefaultUserImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-profil-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n      if (userEdited && isDirty) {\r\n      dispatch(createActionLoading(true));\r\n      const image: ImageData | undefined = userImage;\r\n      const userData: IUpdateUser = createUserForUpdate({...userEdited, ...data, image});\r\n      await UserApiService.updateUser(userEdited.id!, userData)\r\n      .then((userUpdated) => { setUserEdited(userUpdated);  handleSubmitFormSuccess(userUpdated); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n      dispatch(createActionLoading(false));\r\n      }\r\n  } \r\n\r\n  const handleSubmitFormSuccess = (userUpdated: User) => {\r\n      if (user?.email === userUpdated?.email) {\r\n      // Update state user to refresh user info in NavBar\r\n          dispatch(createActionUpdateUser(userUpdated!));\r\n      }\r\n      toast.success(`User updated successfully...`);\r\n      navigate('/'); \r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n      if (checkForbidden(apiErrors)) {\r\n      toast.error(`User update failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate('/'); \r\n      } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n      } else {\r\n      toast.error(`User update failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n      }\r\n  }\r\n\r\n  const cancelEditUserMessage = () => `user edition and loose changes`;\r\n\r\n  const handleResetEditUser = () => {\r\n      reset(defaultValues, { keepDirty: false});\r\n  }\r\n\r\n  const handleCancelEditUser = () => {\r\n      navigate('/');   \r\n  };\r\n\r\n  const handleImageUpload = (image: ImageData) => {\r\n      setImageData(image);\r\n  }\r\n\r\n  const handleImageUploadError = (error: any) => {\r\n    toast.error(`User image upload failed`);\r\n  }\r\n\r\n  const handleDeleteImage = () => {\r\n      setImageData(undefined);\r\n  }\r\n\r\n  const setImageData = (image: ImageData | undefined) => {\r\n      const isImageDefined = image !== undefined;\r\n      const isInitialImageDefined = userEdited?.image !== undefined;\r\n      const imageChanged = (isImageDefined !== isInitialImageDefined) ||\r\n                            (isImageDefined && image?.base64 !== user?.image?.base64);\r\n      setValue('imageChanged', imageChanged, {shouldDirty: true});\r\n      setUserImage(image);\r\n  }\r\n\r\n  return (\r\n      \r\n    <div className={'page-wrapper'}>\r\n    {userEdited &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit User Profile </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"create-user-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n            <div className=\"form-group col-md-4\">\r\n              <div className=\"row\">\r\n                <label className=\"col-md-2\"> Image: </label>\r\n                { userImage && (\r\n                      <button className=\"btn btn-secondary col-md-3\"  onClick={() => handleDeleteImage()} >\r\n                          Delete Image\r\n                      </button>  \r\n                  )\r\n                }   \r\n                <ImageUpload onImageUpload={handleImageUpload} onImageUploadError={handleImageUploadError} resize={imageMaxSize}/>                     \r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              {UserImage()}\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"username\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter user name\"\r\n                {...register('username')}\r\n                className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"email\"> Email </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter email\"\r\n                {...register('email')}\r\n                className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"password\"> Enter Current Password </label>\r\n              <input \r\n                type=\"password\" \r\n                placeholder=\"Enter a value to change current password\" \r\n                {...register('currentPassword')}\r\n                className={`form-control ${errors.password ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.currentPassword?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"password\"> Enter New Password </label>\r\n              <input \r\n                type=\"password\" \r\n                placeholder=\"Enter a value to change current password\" \r\n                {...register('newPassword')}\r\n                className={`form-control ${errors.newPassword ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.newPassword?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4 pull-right\">\r\n              <button className=\"btn btn-success\"  disabled={!isDirty} type=\"submit\">\r\n                Update\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-1 pull-right\">\r\n              <button className=\"btn btn-secondary\" disabled={!isDirty} onClick={() => handleResetEditUser()} >\r\n                Reset\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n          </form>\r\n\r\n          <div className=\"form-group col-md-1 pull-right\">\r\n              {\r\n              <CancelButton prompt={isDirty} message={cancelEditUserMessage()} onClick={() => handleCancelEditUser()} className=\"btn btn-danger\">Cancel</CancelButton>\r\n              }\r\n          </div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default UserProfile;"]},"metadata":{},"sourceType":"module"}