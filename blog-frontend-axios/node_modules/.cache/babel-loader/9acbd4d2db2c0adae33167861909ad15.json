{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\Edit.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { createPostForUpdate } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\n\nconst Edit = () => {\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        state = _useAuth.state,\n        dispatch = _useAuth.dispatch;\n\n  const isLoading = state.isLoading;\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        values = _useState4[0],\n        setValues = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        submitSuccess = _useState6[0],\n        setSubmitSuccess = _useState6[1];\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        const post = await PostApiService.getPostById(postId);\n        dispatch(createActionLoading(false));\n        setPost(post);\n        setValues(post);\n      };\n\n      fetchData();\n    }\n  }, [postId, dispatch]);\n\n  const handleFormSubmission = async e => {\n    e.preventDefault();\n    const formData = {\n      title: values.title,\n      description: values.description,\n      body: values.body\n    };\n    const submitSuccess = await submitForm(formData);\n    setSubmitSuccess(submitSuccess);\n    setTimeout(() => {\n      navigate('/');\n    }, 1500);\n  };\n\n  const submitForm = async formData => {\n    if (post) {\n      dispatch(createActionLoading(true));\n      const updatePost = createPostForUpdate(_objectSpread({}, post, {}, formData));\n      const isOk = await PostApiService.updatePost(post.id, updatePost).then(() => {\n        handleSubmitFormSucess();\n        return true;\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n        return false;\n      });\n      dispatch(createActionLoading(false));\n      return isOk;\n    }\n\n    return Promise.resolve(false);\n  };\n\n  const handleSubmitFormSucess = () => {\n    toast.success(`Post updated successfully...`);\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    toast.error(`Post update failed, see error list`);\n    setErrors(apiErrors);\n  };\n\n  const setFormValues = formValues => {\n    setValues(_objectSpread({}, values, {}, formValues));\n  };\n\n  const handleInputChanges = e => {\n    setFormValues({\n      [e.currentTarget.id]: e.currentTarget.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \" Edit Post  \"), submitSuccess && React.createElement(\"div\", {\n    className: \"alert alert-info\",\n    role: \"alert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"The post has been edited successfully!\"), errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-post-form\",\n    onSubmit: handleFormSubmission,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    defaultValue: post.title.toString(),\n    onChange: handleInputChanges,\n    name: \"title\",\n    className: \"form-control\",\n    placeholder: \"Enter title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"description\",\n    defaultValue: post.description.toString(),\n    onChange: handleInputChanges,\n    name: \"description\",\n    className: \"form-control\",\n    placeholder: \"Enter Description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \" Write Content \"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"body\",\n    defaultValue: post.body.toString(),\n    onChange: handleInputChanges,\n    name: \"body\",\n    className: \"form-control\",\n    placeholder: \"Enter content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Update Post\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })))));\n};\n\nexport default Edit;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/Edit.tsx"],"names":["React","useState","useEffect","useParams","useNavigate","toast","createPostForUpdate","PostApiService","createActionLoading","useAuth","ListErrors","Edit","navigate","state","dispatch","isLoading","postId","post","setPost","values","setValues","submitSuccess","setSubmitSuccess","errors","setErrors","fetchData","getPostById","handleFormSubmission","e","preventDefault","formData","title","description","body","submitForm","setTimeout","updatePost","isOk","id","then","handleSubmitFormSucess","catch","apiErrors","handleSubmitFormError","Promise","resolve","success","error","setFormValues","formValues","handleInputChanges","currentTarget","value","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport { IPost, IUpdatePost, createPostForUpdate } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors } from '../../types';\r\n\r\nconst Edit = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state, dispatch } = useAuth();\r\n\r\n  const { isLoading } = state;\r\n  const { postId } = useParams<{ postId: string }>();\r\n  interface IValues {\r\n    [key: string]: any | null;\r\n  }\r\n\r\n  const [post, setPost] = useState<IPost>();\r\n  const [values, setValues] = useState<IValues>([]);\r\n  const [submitSuccess, setSubmitSuccess] = useState<boolean>(false);\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        const post = await PostApiService.getPostById(postId!);\r\n        dispatch(createActionLoading(false));\r\n        setPost(post);\r\n        setValues(post);\r\n      }\r\n      fetchData();      \r\n    }\r\n  }, [postId, dispatch]);\r\n\r\n  const handleFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n    e.preventDefault();\r\n\r\n    const formData = {\r\n      title: values.title,\r\n      description: values.description,\r\n      body: values.body,\r\n    }\r\n\r\n    const submitSuccess: boolean = await submitForm(formData);\r\n    setSubmitSuccess(submitSuccess);\r\n    setTimeout(() => {\r\n      navigate('/');\r\n    }, 1500);\r\n  }\r\n\r\n  const submitForm = async (formData: {}) : Promise<boolean>  =>  {\r\n    if (post) {\r\n      dispatch(createActionLoading(true));\r\n      const updatePost: IUpdatePost = createPostForUpdate({...post, ...formData});\r\n      const isOk = await PostApiService.updatePost(post.id!, updatePost)\r\n        .then(() => { handleSubmitFormSucess();  return true;})\r\n        .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); return false;});\r\n      dispatch(createActionLoading(false));\r\n      return isOk;\r\n    }\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  const handleSubmitFormSucess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    toast.error(`Post update failed, see error list`);\r\n    setErrors(apiErrors);\r\n}\r\n\r\n  const setFormValues = (formValues: IValues) => {\r\n    setValues({...values, ...formValues})\r\n  }\r\n\r\n  const handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setFormValues({ [e.currentTarget.id]: e.currentTarget.value })\r\n  }\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      <div className={\"col-md-12 form-wrapper\"}>\r\n        <h2> Edit Post  </h2>\r\n\r\n        {submitSuccess && (\r\n          <div className=\"alert alert-info\" role=\"alert\">\r\n            The post has been edited successfully!\r\n                        </div>\r\n        )}\r\n        {errors && <ListErrors errors={errors} />}\r\n        <form id={\"create-post-form\"} onSubmit={handleFormSubmission} noValidate={true}>\r\n          <div className=\"form-group col-md-12\">\r\n            <label htmlFor=\"title\"> Title </label>\r\n            <input type=\"text\" id=\"title\" defaultValue={post.title.toString()} onChange={handleInputChanges} name=\"title\" className=\"form-control\" placeholder=\"Enter title\" />\r\n          </div>\r\n\r\n          <div className=\"form-group col-md-12\">\r\n            <label htmlFor=\"description\"> Description </label>\r\n            <input type=\"text\" id=\"description\" defaultValue={post.description.toString()} onChange={handleInputChanges} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\r\n          </div>\r\n\r\n          <div className=\"form-group col-md-12\">\r\n            <label htmlFor=\"body\"> Write Content </label>\r\n            <input type=\"text\" id=\"body\" defaultValue={post.body.toString()} onChange={handleInputChanges} name=\"body\" className=\"form-control\" placeholder=\"Enter content\" />\r\n          </div>\r\n\r\n          <div className=\"form-group col-md-4 pull-right\">\r\n            <button className=\"btn btn-success\" type=\"submit\">\r\n              Update Post\r\n            </button>\r\n            {isLoading &&\r\n              <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n            }\r\n          </div>\r\n        </form>\r\n      </div>\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Edit;"]},"metadata":{},"sourceType":"module"}