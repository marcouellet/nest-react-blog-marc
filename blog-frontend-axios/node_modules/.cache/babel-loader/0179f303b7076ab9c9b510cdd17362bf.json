{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport API from './APIUtils';\nimport TokenService from './TokenService';\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.expiresIn > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction getCurrentUser() {\n  return TokenService.getUser();\n}\n\n;\n\nasync function login(email, password) {\n  return new Promise((resolve, reject) => {\n    API.post('/auth/login', {\n      email,\n      password\n    }).then(response => {\n      TokenService.setUser(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nasync function register(username, email, password) {\n  return new Promise((resolve, reject) => {\n    API.post('/auth/register', {\n      username,\n      email,\n      password\n    }).then(response => {\n      TokenService.setUser(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nfunction logout() {\n  TokenService.removeUser();\n}\n\nconst AUTHAPI = {\n  getCurrentUser,\n  login,\n  register,\n  logout\n};\nexport default AUTHAPI;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/AuthAPI.ts"],"names":["jwtDecode","API","TokenService","isTokenValid","token","decoded_jwt","current_time","Date","now","valueOf","expiresIn","error","getCurrentUser","getUser","login","email","password","Promise","resolve","reject","post","then","response","setUser","data","catch","register","username","logout","removeUser","AUTHAPI"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAOA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMC,WAAuB,GAAGL,SAAS,CAACI,KAAD,CAAzC;AACA,UAAME,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,SAAZ,GAAwBJ,YAA/B;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF;;AAED,SAASC,cAAT,GAAgC;AAC9B,SAAOV,YAAY,CAACW,OAAb,EAAP;AACD;;AAAA;;AAED,eAAeC,KAAf,CAAqBC,KAArB,EAAoCC,QAApC,EAAqE;AACnE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtClB,IAAAA,GAAG,CAACmB,IAAJ,CAAe,aAAf,EAA8B;AAAEL,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA9B,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBpB,MAAAA,YAAY,CAACqB,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACAN,MAAAA,OAAO,CAACI,QAAQ,CAACE,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSd,KAAK,IAAI;AACdQ,MAAAA,MAAM,CAACR,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,eAAee,QAAf,CAAwBC,QAAxB,EAA0CZ,KAA1C,EAAyDC,QAAzD,EAA2F;AACzF,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtClB,IAAAA,GAAG,CAACmB,IAAJ,CAAe,gBAAf,EAAiC;AAAEO,MAAAA,QAAF;AAAYZ,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAjC,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBpB,MAAAA,YAAY,CAACqB,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACAN,MAAAA,OAAO,CAACI,QAAQ,CAACE,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSd,KAAK,IAAI;AACdQ,MAAAA,MAAM,CAACR,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,SAASiB,MAAT,GAAkB;AAChB1B,EAAAA,YAAY,CAAC2B,UAAb;AACD;;AAED,MAAMC,OAAO,GAAG;AAAClB,EAAAA,cAAD;AAAiBE,EAAAA,KAAjB;AAAwBY,EAAAA,QAAxB;AAAkCE,EAAAA;AAAlC,CAAhB;AAEA,eAAeE,OAAf","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport API from './APIUtils';\r\nimport { User } from '../../types';\r\nimport TokenService from './TokenService';\r\n\r\ntype JWTPayload = {\r\n  email: string;\r\n  expiresIn: number;\r\n};\r\n\r\nexport function isTokenValid(token: string) {\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode(token);\r\n    const current_time = Date.now().valueOf() / 1000;\r\n    return decoded_jwt.expiresIn > current_time;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getCurrentUser(): User {\r\n  return TokenService.getUser();\r\n};\r\n\r\nasync function login(email: string, password: string): Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.post<User>('/auth/login', { email, password })\r\n      .then(response => {\r\n        TokenService.setUser(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nasync function register(username: string, email: string, password: string) : Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.post<User>('/auth/register', { username, email, password })\r\n      .then(response => {\r\n        TokenService.setUser(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nfunction logout() {\r\n  TokenService.removeUser();\r\n}\r\n\r\nconst AUTHAPI = {getCurrentUser, login, register, logout}\r\n\r\nexport default AUTHAPI\r\n"]},"metadata":{},"sourceType":"module"}