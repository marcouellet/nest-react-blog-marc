{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\Home.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { toast } from \"react-toastify\";\nimport { PostApiService } from \"../services/api/PostApiService\";\nimport { CategoryApiService } from \"../services/api/CategoryApiService\";\nimport useAuth from '../contexts/auth';\nimport { createActionLoading } from '../reducers/auth';\nimport ListErrors from './common/ListErrors';\nimport ViewPostCards from './post/ViewPostCards';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../reducers/auth';\n\nconst Home = () => {\n  const _useAuth = useAuth(),\n        state = _useAuth.state,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        posts = _useState2[0],\n        setPosts = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState('All'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        categoryTitle = _useState8[0],\n        setCategoryTitle = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        postTitleFilter = _useState10[0],\n        setPostTitleFilter = _useState10[1];\n\n  useEffect(() => {\n    (async () => {\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          CategoryApiService.getAllCategories().then(categories => {\n            const all = {\n              id: 'all',\n              title: 'All',\n              description: ''\n            };\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            const allCategories = [all, noCategory].concat(categories);\n            setCategories(allCategories);\n\n            if (state.categoryFilter) {\n              selectCategory(allCategories, state.categoryFilter.id, false);\n            } else {\n              selectCategory(allCategories, 'all', false);\n            }\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n        };\n\n        await fetchCategories();\n      }\n\n      setPostTitleFilter(state.postTitleFilter);\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      if (category) {\n        if (category.id === 'all') {\n          PostApiService.findManyPosts(postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        } else if (category.id === 'no_category') {\n          PostApiService.findManyPostsWithoutCategory(postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        } else {\n          PostApiService.findManyPostsForCategory(category.id, postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        }\n      }\n    };\n\n    fetchPosts();\n  }, [category, postTitleFilter, state.user]);\n\n  const handleFetchCategoriesError = apiErrors => {\n    setErrors(apiErrors);\n    toast.error(`Categories reading failed, see error list`);\n  };\n\n  const handleFetchPostError = apiErrors => {\n    setErrors(apiErrors);\n    toast.error(`Post reading failed, see error list`);\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories === null || categories === void 0 ? void 0 : categories.find(category => category.id === categoryId);\n    setCategoryTitle(category.title);\n    setCategory(category);\n    dispatch(createActionSetCategoryFilter(category));\n  };\n\n  const handlePostTitleFilterChange = filter => {\n    setPostTitleFilter(filter);\n    dispatch(createActionSetPostTitleFilter(filter));\n  };\n\n  return React.createElement(\"section\", {\n    className: \"blog-area section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-group \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(\"div\", {\n    key: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, category.title)))), React.createElement(\"input\", {\n    style: {\n      float: 'right'\n    },\n    className: \"col-md-2\",\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\",\n    value: categoryTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"col-md-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Filter:\")), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"postTitleFilter\",\n    value: postTitleFilter,\n    placeholder: \"enter some part of post title text\",\n    className: \"col-md-2\",\n    onChange: e => handlePostTitleFilterChange(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(ViewPostCards, {\n    className: \"col-lg-4 col-md-6\",\n    posts: posts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }))));\n};\n\nexport default Home;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/Home.tsx"],"names":["React","useState","useEffect","toast","PostApiService","CategoryApiService","useAuth","createActionLoading","ListErrors","ViewPostCards","DropdownButton","Dropdown","createActionSetCategoryFilter","createActionSetPostTitleFilter","Home","state","dispatch","errors","setErrors","posts","setPosts","categories","setCategories","category","setCategory","categoryTitle","setCategoryTitle","postTitleFilter","setPostTitleFilter","fetchCategories","getAllCategories","then","all","id","title","description","noCategory","allCategories","concat","categoryFilter","selectCategory","catch","apiErrors","handleFetchCategoriesError","fetchPosts","findManyPosts","handleFetchPostError","findManyPostsWithoutCategory","findManyPostsForCategory","user","error","handleCategorySelect","e","categoryId","setDirty","find","handlePostTitleFilterChange","filter","map","float","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport { PostApiService } from \"../services/api/PostApiService\";\r\nimport { CategoryApiService } from \"../services/api/CategoryApiService\";\r\nimport { IPost } from \"../types\";\r\nimport useAuth from '../contexts/auth';\r\nimport { createActionLoading } from '../reducers/auth';\r\nimport ListErrors from './common/ListErrors';\r\nimport { ICategory, IErrors } from '../types';\r\nimport ViewPostCards from './post/ViewPostCards';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../reducers/auth';\r\n\r\nconst Home = () => {\r\n  \r\n  const { state, dispatch } = useAuth();\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n  const [posts, setPosts] = useState<IPost[]>([]);\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [categoryTitle, setCategoryTitle] = useState<string>('All');\r\n  const [postTitleFilter, setPostTitleFilter] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n          CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const all: ICategory = {id:'all', title: 'All', description: ''};\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            const allCategories = [all, noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            if (state.categoryFilter) {\r\n              selectCategory(allCategories, state.categoryFilter.id!, false);\r\n            } else {\r\n              selectCategory(allCategories, 'all', false);\r\n            }            \r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        }\r\n        await fetchCategories();\r\n      }\r\n      setPostTitleFilter(state.postTitleFilter);\r\n      dispatch(createActionLoading(false));\r\n    })();\r\n // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async (): Promise<void> => {\r\n      if (category) {\r\n        if ( category.id === 'all') {\r\n          PostApiService.findManyPosts(postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        } \r\n        else if (category.id === 'no_category') {\r\n          PostApiService.findManyPostsWithoutCategory(postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        } \r\n        else {\r\n          PostApiService.findManyPostsForCategory(category.id!, postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        }\r\n      }\r\n    }\r\n    fetchPosts();\r\n  }, [category, postTitleFilter, state.user])\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    setErrors(apiErrors);\r\n    toast.error(`Categories reading failed, see error list`);\r\n  }\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    setErrors(apiErrors);\r\n    toast.error(`Post reading failed, see error list`);\r\n  }\r\n\r\n  const handleCategorySelect=(e: any)=>{\r\n    selectCategory(categories!, e, true);\r\n  }\r\n\r\n  const selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n    const category = categories?.find(category => category.id === categoryId);\r\n    setCategoryTitle(category!.title!);\r\n    setCategory(category);\r\n    dispatch(createActionSetCategoryFilter(category!));\r\n  }\r\n\r\n  const handlePostTitleFilterChange = (filter: string)=>{\r\n    setPostTitleFilter(filter);\r\n    dispatch(createActionSetPostTitleFilter(filter));\r\n  }\r\n\r\n    return (\r\n        <section className=\"blog-area section\">\r\n        {errors && <ListErrors errors={errors} />}\r\n        <div className=\"form-group \">\r\n          <div className=\"row\">\r\n            <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                {categories && categories.map((category: ICategory) => \r\n                (\r\n                  <div key={category.id}>\r\n                    <Dropdown.Item eventKey={category.id}>\r\n                      {category.title}\r\n                    </Dropdown.Item>\r\n                  </div>\r\n                ))\r\n              }\r\n            </DropdownButton>\r\n            <input \r\n              style={{float: 'right'}} \r\n              className=\"col-md-2\"   \r\n              type=\"text\" \r\n              disabled  \r\n              placeholder=\"no category selected\" \r\n              value={categoryTitle}        \r\n            />\r\n            <h4 className=\"col-md-1\">\r\n              <span>\r\n                Filter:\r\n              </span>\r\n            </h4>\r\n            <input  \r\n              type=\"text\" \r\n              name=\"postTitleFilter\" \r\n              value={postTitleFilter} \r\n              placeholder=\"enter some part of post title text\" \r\n              className=\"col-md-2\" \r\n              onChange={e => handlePostTitleFilterChange(e.target.value)}      \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <ViewPostCards className=\"col-lg-4 col-md-6\" posts={posts}/> \r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}