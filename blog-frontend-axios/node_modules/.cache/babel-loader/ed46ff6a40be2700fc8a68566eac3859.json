{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport TokenService from '../services/api/TokenService';\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000; // in secs\n\n    return decoded_jwt.exp > current_time;\n  } catch (_) {\n    return false;\n  }\n}\nexport function getSessionDuration(token) {\n  const decoded_jwt = jwtDecode(token);\n  return decoded_jwt.expiresIn;\n}\nexport function wasUserActiveDuringCurrentSession(token) {\n  try {\n    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\n    const lastAccessDelay = Date.now() - lastResponseTimeStamp;\n    return lastAccessDelay < getSessionDuration(token);\n  } catch (_) {\n    return false;\n  }\n}\nexport function getSessionRemainingTimeBeforeExpiration(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    return Math.min(0, decoded_jwt.exp - Date.now());\n  } catch (_) {\n    return 0;\n  }\n}\nexport function isAutomaticSessionRenewalRequired(token) {\n  const sessionDuration = getSessionDuration(token);\n  const remainingTime = getSessionRemainingTimeBeforeExpiration(token);\n  return remainingTime < sessionDuration * 0.10 && wasUserActiveDuringCurrentSession(token);\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/session.util.ts"],"names":["jwtDecode","TokenService","isTokenValid","token","decoded_jwt","current_time","Date","now","valueOf","exp","_","getSessionDuration","expiresIn","wasUserActiveDuringCurrentSession","lastResponseTimeStamp","getHttpResponseTimeStamp","lastAccessDelay","getSessionRemainingTimeBeforeExpiration","Math","min","isAutomaticSessionRenewalRequired","sessionDuration","remainingTime"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMC,WAAuB,GAAGJ,SAAS,CAAaG,KAAb,CAAzC;AACA,UAAME,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C,CAFE,CAEgD;;AAClD,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;AAED,OAAO,SAASC,kBAAT,CAA4BR,KAA5B,EAAgD;AACnD,QAAMC,WAAuB,GAAGJ,SAAS,CAAaG,KAAb,CAAzC;AACA,SAAOC,WAAW,CAACQ,SAAnB;AACH;AAED,OAAO,SAASC,iCAAT,CAA2CV,KAA3C,EAAmE;AACtE,MAAI;AACA,UAAMW,qBAAqB,GAAGb,YAAY,CAACc,wBAAb,EAA9B;AACA,UAAMC,eAAe,GAAGV,IAAI,CAACC,GAAL,KAAaO,qBAArC;AACA,WAAOE,eAAe,GAAIL,kBAAkB,CAACR,KAAD,CAA5C;AACH,GAJD,CAIE,OAAOO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACJ;AAED,OAAO,SAASO,uCAAT,CAAiDd,KAAjD,EAAgE;AACnE,MAAI;AACF,UAAMC,WAAuB,GAAGJ,SAAS,CAAaG,KAAb,CAAzC;AACA,WAAOe,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYf,WAAW,CAACK,GAAZ,GAAkBH,IAAI,CAACC,GAAL,EAA9B,CAAP;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU;AACV,WAAO,CAAP;AACD;AACJ;AAED,OAAO,SAASU,iCAAT,CAA2CjB,KAA3C,EAA0D;AAC7D,QAAMkB,eAAe,GAAGV,kBAAkB,CAACR,KAAD,CAA1C;AACA,QAAMmB,aAAa,GAAGL,uCAAuC,CAACd,KAAD,CAA7D;AACA,SAAOmB,aAAa,GAAGD,eAAe,GAAG,IAAlC,IAA0CR,iCAAiC,CAACV,KAAD,CAAlF;AACH","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { JWTPayload } from '../types';\r\nimport TokenService from '../services/api/TokenService';\r\n\r\nexport function isTokenValid(token: string) {\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n    const current_time = Date.now().valueOf() / 1000; // in secs\r\n    return decoded_jwt.exp > current_time;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function getSessionDuration(token: any): number {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token); \r\n    return decoded_jwt.expiresIn;\r\n}\r\n\r\nexport function wasUserActiveDuringCurrentSession(token: string): boolean {\r\n    try {\r\n        const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\r\n        const lastAccessDelay = Date.now() - lastResponseTimeStamp;\r\n        return lastAccessDelay <  getSessionDuration(token);\r\n    } catch (_) {\r\n      return false;\r\n    }\r\n}\r\n\r\nexport function getSessionRemainingTimeBeforeExpiration(token: string) {\r\n    try {\r\n      const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n      return Math.min(0, decoded_jwt.exp - Date.now());\r\n    } catch (_) {\r\n      return 0;\r\n    }\r\n}\r\n\r\nexport function isAutomaticSessionRenewalRequired(token: string) {\r\n    const sessionDuration = getSessionDuration(token);\r\n    const remainingTime = getSessionRemainingTimeBeforeExpiration(token);\r\n    return remainingTime < sessionDuration * 0.10 && wasUserActiveDuringCurrentSession(token);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}