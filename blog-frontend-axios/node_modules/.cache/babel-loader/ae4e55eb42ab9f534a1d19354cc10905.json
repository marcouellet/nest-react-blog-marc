{"ast":null,"code":"export let UserRole;\n\n(function (UserRole) {\n  UserRole[\"ADMIN\"] = \"admin\";\n  UserRole[\"USER\"] = \"user\";\n})(UserRole || (UserRole = {}));\n\nexport class IAuthToken {\n  constructor() {\n    this.accessToken = void 0;\n  }\n\n}\nexport function createUserForUpdate(user) {\n  const updateUser = {\n    username: user.username,\n    email: user.email,\n    password: user.password,\n    role: user.role\n  };\n\n  if (!updateUser.password) {\n    delete updateUser.password;\n  }\n\n  return updateUser;\n}\nexport function createPostForUpdate(post) {\n  const updatePost = {\n    title: post.title,\n    description: post.description,\n    body: post.body\n  };\n  return updatePost;\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/types/index.ts"],"names":["UserRole","IAuthToken","accessToken","createUserForUpdate","user","updateUser","username","email","password","role","createPostForUpdate","post","updatePost","title","description","body"],"mappings":"AAAA,WAAYA,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAaZ,OAAO,MAAMC,UAAN,CAAiB;AAAA;AAAA,SACtBC,WADsB;AAAA;;AAAA;AA8CxB,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAuD;AAC5D,QAAMC,UAAuB,GAAG;AAACC,IAAAA,QAAQ,EAACF,IAAI,CAACE,QAAf;AAAyBC,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAArC;AAA4CC,IAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAA3D;AAAqEC,IAAAA,IAAI,EAAEL,IAAI,CAACK;AAAhF,GAAhC;;AACA,MAAI,CAACJ,UAAU,CAACG,QAAhB,EAA0B;AACxB,WAAOH,UAAU,CAACG,QAAlB;AACD;;AACD,SAAOH,UAAP;AACD;AAOD,OAAO,SAASK,mBAAT,CAA6BC,IAA7B,EAAuD;AAC5D,QAAMC,UAAuB,GAAG;AAACC,IAAAA,KAAK,EAACF,IAAI,CAACE,KAAZ;AAAmBC,IAAAA,WAAW,EAAEH,IAAI,CAACG,WAArC;AAAkDC,IAAAA,IAAI,EAAEJ,IAAI,CAACI;AAA7D,GAAhC;AACA,SAAOH,UAAP;AACD","sourcesContent":["export enum UserRole {\r\n  ADMIN = 'admin',\r\n  USER = 'user'\r\n}\r\n\r\nexport interface IUser {\r\n  id?: string; // Identifier uniq\r\n  username: string;\r\n  password?: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nexport class IAuthToken {\r\n  accessToken: any;\r\n}\r\n\r\nexport type JWTPayload = {\r\n  sub: string;\r\n  exp: number;\r\n};\r\n\r\nexport type User = IUser & { authtoken?: IAuthToken, authrefreshtoken?: IAuthToken };\r\n\r\nexport interface IPost {\r\n  id?: string; // Identifier uniq\r\n  title: string;\r\n  description: string;\r\n  body: string;\r\n  user?: IUser;\r\n  publishDate?: Date;\r\n}\r\nexport interface ILogin {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegister {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRefresh {\r\n  authtoken?: IAuthToken;\r\n  authrefreshtoken?: IAuthToken;\r\n}\r\n\r\nexport interface IErrors {\r\n  [key: string]: string[];\r\n}\r\n\r\nexport interface IUpdateUser {\r\n  username: string;\r\n  email: string;\r\n  password?: string;\r\n  role: string;\r\n}\r\n\r\nexport function createUserForUpdate(user: IUser): IUpdateUser {\r\n  const updateUser: IUpdateUser = {username:user.username, email: user.email, password: user.password, role: user.role};\r\n  if (!updateUser.password) {\r\n    delete updateUser.password;\r\n  }\r\n  return updateUser;\r\n}\r\nexport interface IUpdatePost {\r\n  title: string;\r\n  description: string;\r\n  body: string;\r\n}\r\n\r\nexport function createPostForUpdate(post: IPost): IUpdatePost {\r\n  const updatePost: IUpdatePost = {title:post.title, description: post.description, body: post.body};\r\n  return updatePost;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}