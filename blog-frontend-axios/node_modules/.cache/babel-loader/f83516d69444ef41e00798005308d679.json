{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\category\\\\EditCategory.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { createCategoryForUpdate, minimumCategoryTitleLength, minimumCategoryDescriptionLength } from \"../../types\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { checkUnauthorized, checkSessionExpired, checkTimeout, getTokenFromErrors, checkSessionExtendable, extendSession } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\n\nconst EditCategory = () => {\n  var _errors$title, _errors$description;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        userId = _useParams.userId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        category = _useState2[0],\n        setCategory = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        submitForm = _useState4[0],\n        setSubmitForm = _useState4[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Category title is required').min(minimumCategoryTitleLength, `Category title must be at least ${minimumCategoryTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumCategoryDescriptionLength, `Description must be at least ${minimumCategoryDescriptionLength} characters long`)\n  });\n  const defaultValues = {\n    title: category === null || category === void 0 ? void 0 : category.title,\n    description: category === null || category === void 0 ? void 0 : category.description\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    if (!category) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await CategoryApiService.getCategoryById(userId).then(category => {\n          setCategory(category);\n          reset(category);\n        }).catch(apiErrors => handleFetchCategoryError(apiErrors)).finally(() => dispatch(createActionLoading(false)));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const onSubmit = async data => {\n    if (category && isDirty && submitForm) {\n      dispatch(createActionLoading(true));\n      const userData = createCategoryForUpdate(_objectSpread({}, category, {}, data));\n      await CategoryApiService.updateCategory(category.id, userData).then(() => {\n        handleSubmitFormSuccess();\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      }).finally(() => dispatch(createActionLoading(false)));\n    }\n  };\n\n  const handleSessionExpired = apiErrors => {\n    const token = getTokenFromErrors(apiErrors);\n\n    if (checkSessionExtendable(token)) {\n      toast.error(`${process} failed, session renewed, please try again`);\n      extendSession(token);\n    } else {\n      toast.error(`${process} failed, session expired`);\n      dispatch(createActionSessionExpired());\n    }\n  };\n\n  const handleApiErrors = (apiErrors, process) => {\n    if (checkSessionExpired(apiErrors)) {\n      handleSessionExpired(apiErrors);\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else if (checkTimeout(apiErrors)) {\n      toast.error(`Request timeout`);\n    } else {\n      toast.error(`${process} failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const handleFetchCategoryError = apiErrors => {\n    handleApiErrors(apiErrors, 'Category reading');\n  };\n\n  const handleSubmitForm = () => {\n    setSubmitForm(true);\n  };\n\n  const handleSubmitFormSuccess = () => {\n    toast.success(`Category updated successfully...`);\n    navigate(`/category/${category === null || category === void 0 ? void 0 : category.id}`);\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    handleApiErrors(apiErrors, 'Category update');\n  };\n\n  const cancelEditCategoryMessage = () => `category edition and loose changes`;\n\n  const handleResetEditCategory = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelEditCategory = () => {\n    navigate(`/category/${category === null || category === void 0 ? void 0 : category.id}`);\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, category && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \" Edit Category \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"edit-category-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group row-md-5 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditCategoryMessage(),\n    onClick: () => handleCancelEditCategory(),\n    className: \"btn ml-2 btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditCategory(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-success\",\n    disabled: !isDirty,\n    onClick: () => handleSubmitForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Update\")))))));\n};\n\nexport default EditCategory;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/category/EditCategory.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","toast","Yup","yupResolver","CancelButton","createCategoryForUpdate","minimumCategoryTitleLength","minimumCategoryDescriptionLength","CategoryApiService","createActionLoading","useAuth","ListErrors","checkUnauthorized","checkSessionExpired","checkTimeout","getTokenFromErrors","checkSessionExtendable","extendSession","createActionSessionExpired","EditCategory","navigate","dispatch","errorList","setErrorList","userId","category","setCategory","submitForm","setSubmitForm","validationSchema","object","shape","title","string","required","min","description","defaultValues","resolver","register","handleSubmit","reset","formState","errors","isDirty","fetchData","getCategoryById","then","catch","apiErrors","handleFetchCategoryError","finally","onSubmit","data","userData","updateCategory","id","handleSubmitFormSuccess","handleSubmitFormError","handleSessionExpired","token","error","process","handleApiErrors","handleSubmitForm","success","cancelEditCategoryMessage","handleResetEditCategory","keepDirty","handleCancelEditCategory","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { ICategory, IUpdateCategory, createCategoryForUpdate, minimumCategoryTitleLength, \r\n          minimumCategoryDescriptionLength } from \"../../types\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors } from '../../types';\r\nimport { checkUnauthorized, checkSessionExpired, checkTimeout, getTokenFromErrors, checkSessionExtendable,\r\n  extendSession } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\n\r\nconst EditCategory = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { userId } = useParams<{ userId: string }>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [submitForm, setSubmitForm] = useState<boolean>(false);\r\n \r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Category title is required')\r\n      .min(minimumCategoryTitleLength, `Category title must be at least ${minimumCategoryTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumCategoryDescriptionLength, `Description must be at least ${minimumCategoryDescriptionLength} characters long`),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n    title: string;\r\n    description: string;\r\n  };\r\n\r\n  const defaultValues = {title: category?.title, description: category?.description };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isDirty }\r\n  } = useForm<UpdateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!category) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await CategoryApiService.getCategoryById(userId!)\r\n        .then((category) => { setCategory(category); reset(category);})\r\n        .catch((apiErrors: IErrors) => handleFetchCategoryError(apiErrors))\r\n        .finally(() => dispatch(createActionLoading(false)));\r\n       }\r\n      fetchData();      \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n    if (category && isDirty && submitForm) {\r\n      dispatch(createActionLoading(true));\r\n      const userData: IUpdateCategory = createCategoryForUpdate({...category, ...data});\r\n      await CategoryApiService.updateCategory(category.id!, userData)\r\n      .then(() => { handleSubmitFormSuccess(); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); })\r\n      .finally(() => dispatch(createActionLoading(false)));\r\n     }\r\n  } \r\n\r\n  const handleSessionExpired = (apiErrors: IErrors) => {\r\n    const token = getTokenFromErrors(apiErrors);\r\n    if (checkSessionExtendable(token)) {\r\n      toast.error(`${process} failed, session renewed, please try again`);\r\n      extendSession(token);\r\n    }\r\n    else {\r\n      toast.error(`${process} failed, session expired`);\r\n      dispatch(createActionSessionExpired());      \r\n    }\r\n  }\r\n\r\n  const handleApiErrors = (apiErrors: IErrors, process: string) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      handleSessionExpired(apiErrors);\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else if (checkTimeout(apiErrors)) {\r\n      toast.error(`Request timeout`);\r\n    } else {\r\n      toast.error(`${process} failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const handleFetchCategoryError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Category reading');\r\n  }\r\n\r\n  const handleSubmitForm = () => {\r\n    setSubmitForm(true);\r\n  }\r\n\r\n  const handleSubmitFormSuccess = () => {\r\n    toast.success(`Category updated successfully...`);\r\n    navigate(`/category/${category?.id}`)\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Category update');\r\n}\r\n\r\nconst cancelEditCategoryMessage = () => `category edition and loose changes`;\r\n\r\nconst handleResetEditCategory = () => {\r\n  reset(defaultValues, { keepDirty: false});\r\n}\r\n\r\nconst handleCancelEditCategory = () => {\r\n  navigate(`/category/${category?.id}`)\r\n};\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {category &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Category </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"edit-category-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                {...register('title')}\r\n                className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n            </div>\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter description\"\r\n                {...register('description')}\r\n                className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-10 col-md-12\">\r\n                <div className=\"form-group row-md-5 pull-right\">\r\n                  <CancelButton prompt={isDirty} message={cancelEditCategoryMessage()} onClick={() => handleCancelEditCategory()} className=\"btn ml-2 btn-danger\">Cancel</CancelButton>\r\n                  <button className=\"btn ml-2 btn-secondary\" disabled={!isDirty} onClick={() => handleResetEditCategory()} >\r\n                    Reset\r\n                  </button>\r\n                  <button className=\"btn ml-2 btn-success\"  disabled={!isDirty} onClick={ () => handleSubmitForm()}>\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form> \r\n        </div>\r\n      )\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditCategory;"]},"metadata":{},"sourceType":"module"}