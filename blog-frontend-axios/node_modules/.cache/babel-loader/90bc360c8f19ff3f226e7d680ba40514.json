{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\ListPosts.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport useAuth from '../../contexts/auth';\nimport { createActionLoading } from '../../reducers/auth';\nimport ListErrors from '../common/ListErrors';\nimport { PostApiService } from '../../services/api/PostApiService';\nimport { DropdownButton, Dropdown, Table } from 'react-bootstrap';\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../../reducers/auth';\nimport ImageResize from '../common/ImageResize';\n\nconst ListPosts = () => {\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        user = _useAuth$state.user,\n        isLoading = _useAuth$state.isLoading,\n        categoryFilter = _useAuth$state.categoryFilter,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        posts = _useState2[0],\n        setPosts = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState('All'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        categoryTitle = _useState8[0],\n        setCategoryTitle = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        postTitleFilter = _useState10[0],\n        setPostTitleFilter = _useState10[1];\n\n  useEffect(() => {\n    (async () => {\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          CategoryApiService.getAllCategories().then(categories => {\n            const all = {\n              id: 'all',\n              title: 'All',\n              description: ''\n            };\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            const allCategories = [all, noCategory].concat(categories);\n            setCategories(allCategories);\n\n            if (categoryFilter) {\n              selectCategory(allCategories, categoryFilter.id, false);\n            } else {\n              selectCategory(allCategories, 'all', false);\n            }\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n        };\n\n        await fetchCategories();\n      }\n\n      setPostTitleFilter(postTitleFilter);\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      if (category) {\n        if (category.id === 'all') {\n          PostApiService.findManyPosts(postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        } else if (category.id === 'no_category') {\n          PostApiService.findManyPostsWithoutCategory(postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        } else {\n          PostApiService.findManyPostsForCategory(category.id, postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        }\n      }\n    };\n\n    fetchPosts();\n  }, [category, postTitleFilter, user]);\n\n  const handleFetchCategoriesError = apiErrors => {\n    setErrors(apiErrors);\n    toast.error(`Categories reading failed, see error list`);\n  };\n\n  const handleFetchPostError = apiErrors => {\n    setErrors(apiErrors);\n    toast.error(`Post reading failed, see error list`);\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories === null || categories === void 0 ? void 0 : categories.find(category => category.id === categoryId);\n    setCategoryTitle(category.title);\n    setCategory(category);\n    dispatch(createActionSetCategoryFilter(category));\n  };\n\n  const handlePostTitleFilterChange = filter => {\n    setPostTitleFilter(filter);\n    dispatch(createActionSetPostTitleFilter(filter));\n  };\n\n  const imageMaxSize = {\n    maxWidth: 40,\n    maxHeight: 40\n  };\n  return React.createElement(\"section\", {\n    className: \"blog-area section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-group \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(\"div\", {\n    key: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, category.title)))), React.createElement(\"input\", {\n    style: {\n      float: 'right'\n    },\n    className: \"col-md-2\",\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\",\n    value: categoryTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"col-md-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Filter:\")), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"postTitleFilter\",\n    value: postTitleFilter,\n    placeholder: \"enter some part of post title text\",\n    className: \"col-md-2\",\n    onChange: e => handlePostTitleFilterChange(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))), !isLoading && posts && posts.map(post => React.createElement(\"div\", {\n    \"d-flex\": true,\n    \"justify-content-center\": true,\n    className: \"col-md-10\",\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"col-auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Owner\"), React.createElement(\"th\", {\n    className: \"col-md-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Actions\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, post.image && React.createElement(ImageResize, {\n    imageData: post.image,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, post.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, post.user.username), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, post.description), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: `/post/${post.id}`,\n    className: \"btn btn-sm btn-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"View\")))))));\n};\n\nexport default ListPosts;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/ListPosts.tsx"],"names":["React","useState","useEffect","Link","toast","CategoryApiService","useAuth","createActionLoading","ListErrors","PostApiService","DropdownButton","Dropdown","Table","createActionSetCategoryFilter","createActionSetPostTitleFilter","ImageResize","ListPosts","state","user","isLoading","categoryFilter","dispatch","errors","setErrors","posts","setPosts","categories","setCategories","category","setCategory","categoryTitle","setCategoryTitle","postTitleFilter","setPostTitleFilter","fetchCategories","getAllCategories","then","all","id","title","description","noCategory","allCategories","concat","selectCategory","catch","apiErrors","handleFetchCategoriesError","fetchPosts","findManyPosts","handleFetchPostError","findManyPostsWithoutCategory","findManyPostsForCategory","error","handleCategorySelect","e","categoryId","setDirty","find","handlePostTitleFilterChange","filter","imageMaxSize","maxWidth","maxHeight","map","float","target","value","post","image","username"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,kBAAT,QAAmC,uCAAnC;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,KAAnC,QAAgD,iBAAhD;AACA,SAASC,6BAAT,EAAwCC,8BAAxC,QAA8E,qBAA9E;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,mBAE2CV,OAAO,EAFlD;AAAA,kCAEdW,KAFc;AAAA,QAELC,IAFK,kBAELA,IAFK;AAAA,QAECC,SAFD,kBAECA,SAFD;AAAA,QAEYC,cAFZ,kBAEYA,cAFZ;AAAA,QAE8BC,QAF9B,YAE8BA,QAF9B;;AAAA,0BAGMrB,KAAK,CAACC,QAAN,EAHN;AAAA;AAAA,QAGfqB,MAHe;AAAA,QAGPC,SAHO;;AAAA,oBAIItB,QAAQ,CAAU,EAAV,CAJZ;AAAA;AAAA,QAIfuB,KAJe;AAAA,QAIRC,QAJQ;;AAAA,qBAKcxB,QAAQ,EALtB;AAAA;AAAA,QAKfyB,UALe;AAAA,QAKHC,aALG;;AAAA,qBAMU1B,QAAQ,EANlB;AAAA;AAAA,QAMf2B,QANe;AAAA,QAMLC,WANK;;AAAA,qBAOoB5B,QAAQ,CAAS,KAAT,CAP5B;AAAA;AAAA,QAOf6B,aAPe;AAAA,QAOAC,gBAPA;;AAAA,qBAQwB9B,QAAQ,CAAS,EAAT,CARhC;AAAA;AAAA,QAQf+B,eARe;AAAA,QAQEC,kBARF;;AAUtB/B,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACXmB,MAAAA,QAAQ,CAACd,mBAAmB,CAAC,IAAD,CAApB,CAAR;;AACA,UAAI,CAACmB,UAAL,EAAiB;AACf,cAAMQ,eAAe,GAAG,YAA2B;AACjD7B,UAAAA,kBAAkB,CAAC8B,gBAAnB,GACCC,IADD,CACMV,UAAU,IAAI;AAClB,kBAAMW,GAAc,GAAG;AAACC,cAAAA,EAAE,EAAC,KAAJ;AAAWC,cAAAA,KAAK,EAAE,KAAlB;AAAyBC,cAAAA,WAAW,EAAE;AAAtC,aAAvB;AACA,kBAAMC,UAAqB,GAAG;AAACH,cAAAA,EAAE,EAAC,aAAJ;AAAmBC,cAAAA,KAAK,EAAE,aAA1B;AAAyCC,cAAAA,WAAW,EAAE;AAAtD,aAA9B;AACA,kBAAME,aAAa,GAAG,CAACL,GAAD,EAAMI,UAAN,EAAkBE,MAAlB,CAAyBjB,UAAzB,CAAtB;AACAC,YAAAA,aAAa,CAACe,aAAD,CAAb;;AACA,gBAAItB,cAAJ,EAAoB;AAClBwB,cAAAA,cAAc,CAACF,aAAD,EAAgBtB,cAAc,CAACkB,EAA/B,EAAoC,KAApC,CAAd;AACD,aAFD,MAEO;AACLM,cAAAA,cAAc,CAACF,aAAD,EAAgB,KAAhB,EAAuB,KAAvB,CAAd;AACD;AACF,WAXD,EAYCG,KAZD,CAYQC,SAAD,IAAwBC,0BAA0B,CAACD,SAAD,CAZzD;AAaD,SAdD;;AAeA,cAAMZ,eAAe,EAArB;AACD;;AACDD,MAAAA,kBAAkB,CAACD,eAAD,CAAlB;AACAX,MAAAA,QAAQ,CAACd,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACD,KAtBD,IADc,CAwBjB;;AACE,GAzBQ,EAyBN,EAzBM,CAAT;AA2BAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8C,UAAU,GAAG,YAA2B;AAC5C,UAAIpB,QAAJ,EAAc;AACZ,YAAKA,QAAQ,CAACU,EAAT,KAAgB,KAArB,EAA4B;AAC1B7B,UAAAA,cAAc,CAACwC,aAAf,CAA6BjB,eAA7B,EACCI,IADD,CACMZ,KAAK,IAAIC,QAAQ,CAACD,KAAD,CADvB,EAECqB,KAFD,CAEQC,SAAD,IAAwBI,oBAAoB,CAACJ,SAAD,CAFnD;AAGD,SAJD,MAKK,IAAIlB,QAAQ,CAACU,EAAT,KAAgB,aAApB,EAAmC;AACtC7B,UAAAA,cAAc,CAAC0C,4BAAf,CAA4CnB,eAA5C,EACCI,IADD,CACMZ,KAAK,IAAIC,QAAQ,CAACD,KAAD,CADvB,EAECqB,KAFD,CAEQC,SAAD,IAAwBI,oBAAoB,CAACJ,SAAD,CAFnD;AAGD,SAJI,MAKA;AACHrC,UAAAA,cAAc,CAAC2C,wBAAf,CAAwCxB,QAAQ,CAACU,EAAjD,EAAsDN,eAAtD,EACCI,IADD,CACMZ,KAAK,IAAIC,QAAQ,CAACD,KAAD,CADvB,EAECqB,KAFD,CAEQC,SAAD,IAAwBI,oBAAoB,CAACJ,SAAD,CAFnD;AAGD;AACF;AACF,KAlBD;;AAmBAE,IAAAA,UAAU;AACX,GArBQ,EAqBN,CAACpB,QAAD,EAAWI,eAAX,EAA4Bd,IAA5B,CArBM,CAAT;;AAuBA,QAAM6B,0BAA0B,GAAID,SAAD,IAAwB;AACzDvB,IAAAA,SAAS,CAACuB,SAAD,CAAT;AACA1C,IAAAA,KAAK,CAACiD,KAAN,CAAa,2CAAb;AACD,GAHD;;AAKA,QAAMH,oBAAoB,GAAIJ,SAAD,IAAwB;AACnDvB,IAAAA,SAAS,CAACuB,SAAD,CAAT;AACA1C,IAAAA,KAAK,CAACiD,KAAN,CAAa,qCAAb;AACD,GAHD;;AAKA,QAAMC,oBAAoB,GAAEC,CAAD,IAAU;AACnCX,IAAAA,cAAc,CAAClB,UAAD,EAAc6B,CAAd,EAAiB,IAAjB,CAAd;AACD,GAFD;;AAIA,QAAMX,cAAc,GAAG,CAAClB,UAAD,EAA0B8B,UAA1B,EAA8CC,QAA9C,KAAkE;AACvF,UAAM7B,QAAQ,GAAGF,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEgC,IAAZ,CAAiB9B,QAAQ,IAAIA,QAAQ,CAACU,EAAT,KAAgBkB,UAA7C,CAAjB;AACAzB,IAAAA,gBAAgB,CAACH,QAAQ,CAAEW,KAAX,CAAhB;AACAV,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAP,IAAAA,QAAQ,CAACR,6BAA6B,CAACe,QAAD,CAA9B,CAAR;AACD,GALD;;AAOA,QAAM+B,2BAA2B,GAAIC,MAAD,IAAkB;AACpD3B,IAAAA,kBAAkB,CAAC2B,MAAD,CAAlB;AACAvC,IAAAA,QAAQ,CAACP,8BAA8B,CAAC8C,MAAD,CAA/B,CAAR;AACD,GAHD;;AAKA,QAAMC,YAA4B,GAAG;AAACC,IAAAA,QAAQ,EAAC,EAAV;AAAcC,IAAAA,SAAS,EAAC;AAAxB,GAArC;AAEA,SACE;AAAS,IAAA,SAAS,EAAC,mBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzC,MAAM,IAAI,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEA,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADb,EAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAC,iBAAtB;AAAwC,IAAA,QAAQ,EAAEgC,oBAAlD;AAAwE,IAAA,SAAS,EAAC,UAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5B,UAAU,IAAIA,UAAU,CAACsC,GAAX,CAAgBpC,QAAD,IAE5B;AAAK,IAAA,GAAG,EAAEA,QAAQ,CAACU,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAEV,QAAQ,CAACU,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,QAAQ,CAACW,KADZ,CADF,CAFa,CADnB,CADF,EAYE;AACE,IAAA,KAAK,EAAE;AAAC0B,MAAAA,KAAK,EAAE;AAAR,KADT;AAEE,IAAA,SAAS,EAAC,UAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,QAAQ,MAJV;AAKE,IAAA,WAAW,EAAC,sBALd;AAME,IAAA,KAAK,EAAEnC,aANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAoBE;AAAI,IAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CApBF,EAyBE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,iBAFP;AAGE,IAAA,KAAK,EAAEE,eAHT;AAIE,IAAA,WAAW,EAAC,oCAJd;AAKE,IAAA,SAAS,EAAC,UALZ;AAME,IAAA,QAAQ,EAAEuB,CAAC,IAAII,2BAA2B,CAACJ,CAAC,CAACW,MAAF,CAASC,KAAV,CAN5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,CADF,CAFF,EAuCI,CAAChD,SAAD,IAAcK,KAAd,IAAuBA,KAAK,CAACwC,GAAN,CAAWI,IAAD,IAE/B;AAAK,kBAAL;AAAY,kCAAZ;AAAmC,IAAA,SAAS,EAAC,WAA7C;AAAyD,IAAA,GAAG,EAAEA,IAAI,CAAC9B,EAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,KAAD;AAAO,IAAA,OAAO,MAAd;AAAe,IAAA,QAAQ,MAAvB;AAAwB,IAAA,KAAK,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAI,IAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAKE;AAAI,IAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,EAQE;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARF,EAWE;AAAI,IAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXF,CADF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK8B,IAAI,CAACC,KAAL,IAAc,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAED,IAAI,CAACC,KAA7B;AAAoC,IAAA,MAAM,EAAER,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADnB,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKO,IAAI,CAAC7B,KADV,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK6B,IAAI,CAAClD,IAAL,CAAWoD,QADhB,CAPF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IAAI,CAAC5B,WADV,CAVF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG,SAAQ4B,IAAI,CAAC9B,EAAG,EAA3B;AAA8B,IAAA,SAAS,EAAC,qBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CAbF,CAhBF,CADA,CAFqB,CAvC3B,CADF;AAmFD,CA3KD;;AA6KA,eAAetB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { IPost, ICategory } from \"../../types\";\r\nimport useAuth from '../../contexts/auth';\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, ImageSizeProps } from '../../types';\r\nimport { PostApiService } from '../../services/api/PostApiService';\r\nimport { DropdownButton, Dropdown, Table } from 'react-bootstrap';\r\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../../reducers/auth';\r\nimport ImageResize from '../common/ImageResize';\r\n\r\nconst ListPosts = () => {\r\n\r\n  const { state: { user, isLoading, categoryFilter }, dispatch } = useAuth();\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n  const [posts, setPosts] = useState<IPost[]>([]);\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [categoryTitle, setCategoryTitle] = useState<string>('All');\r\n  const [postTitleFilter, setPostTitleFilter] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n          CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const all: ICategory = {id:'all', title: 'All', description: ''};\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            const allCategories = [all, noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            if (categoryFilter) {\r\n              selectCategory(allCategories, categoryFilter.id!, false);\r\n            } else {\r\n              selectCategory(allCategories, 'all', false);\r\n            }            \r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        }\r\n        await fetchCategories();\r\n      }\r\n      setPostTitleFilter(postTitleFilter);\r\n      dispatch(createActionLoading(false));\r\n    })();\r\n // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async (): Promise<void> => {\r\n      if (category) {\r\n        if ( category.id === 'all') {\r\n          PostApiService.findManyPosts(postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        } \r\n        else if (category.id === 'no_category') {\r\n          PostApiService.findManyPostsWithoutCategory(postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        } \r\n        else {\r\n          PostApiService.findManyPostsForCategory(category.id!, postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        }\r\n      }\r\n    }\r\n    fetchPosts();\r\n  }, [category, postTitleFilter, user])\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    setErrors(apiErrors);\r\n    toast.error(`Categories reading failed, see error list`);\r\n  }\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    setErrors(apiErrors);\r\n    toast.error(`Post reading failed, see error list`);\r\n  }\r\n\r\n  const handleCategorySelect=(e: any)=>{\r\n    selectCategory(categories!, e, true);\r\n  }\r\n\r\n  const selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n    const category = categories?.find(category => category.id === categoryId);\r\n    setCategoryTitle(category!.title!);\r\n    setCategory(category);\r\n    dispatch(createActionSetCategoryFilter(category!));\r\n  }\r\n\r\n  const handlePostTitleFilterChange = (filter: string)=>{\r\n    setPostTitleFilter(filter);\r\n    dispatch(createActionSetPostTitleFilter(filter));\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:40, maxHeight:40};\r\n\r\n  return (\r\n    <section className=\"blog-area section\">\r\n      {errors && <ListErrors errors={errors} />}\r\n      <div className=\"form-group \">\r\n        <div className=\"row\">\r\n          <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n              {categories && categories.map((category: ICategory) => \r\n              (\r\n                <div key={category.id}>\r\n                  <Dropdown.Item eventKey={category.id}>\r\n                    {category.title}\r\n                  </Dropdown.Item>\r\n                </div>\r\n              ))\r\n            }\r\n          </DropdownButton>\r\n          <input \r\n            style={{float: 'right'}} \r\n            className=\"col-md-2\"   \r\n            type=\"text\" \r\n            disabled  \r\n            placeholder=\"no category selected\" \r\n            value={categoryTitle}        \r\n          />\r\n          <h4 className=\"col-md-1\">\r\n            <span>\r\n              Filter:\r\n            </span>\r\n          </h4>\r\n          <input  \r\n            type=\"text\" \r\n            name=\"postTitleFilter\" \r\n            value={postTitleFilter} \r\n            placeholder=\"enter some part of post title text\" \r\n            className=\"col-md-2\" \r\n            onChange={e => handlePostTitleFilterChange(e.target.value)}      \r\n          />\r\n        </div>\r\n      </div>\r\n      {\r\n        !isLoading && posts && posts.map((post: IPost) =>    \r\n        (\r\n          <div d-flex justify-content-center className=\"col-md-10\" key={post.id}>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <th className=\"col-auto\"/>\r\n              <th className=\"col-md-2\">\r\n                  Name\r\n              </th>\r\n              <th className=\"col-md-2\">\r\n                  Owner\r\n              </th>\r\n              <th className=\"col-md-10\">\r\n                Description\r\n              </th>\r\n              <th className=\"col-md-2\">\r\n                Actions\r\n              </th>\r\n            </thead>\r\n            <tr>\r\n              <td>\r\n                  {post.image && <ImageResize imageData={post.image} resize={imageMaxSize}/>}\r\n              </td>\r\n              <td>\r\n                  {post.title}\r\n              </td>\r\n              <td>\r\n                  {post.user!.username}\r\n              </td>\r\n              <td>\r\n                  {post.description}\r\n              </td>\r\n              <td>\r\n                  <Link to={`/post/${post.id}`} className=\"btn btn-sm btn-info\">View</Link>\r\n              </td>\r\n          </tr>\r\n          </Table>\r\n        </div>\r\n\r\n        ))\r\n      }\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ListPosts;\r\n"]},"metadata":{},"sourceType":"module"}