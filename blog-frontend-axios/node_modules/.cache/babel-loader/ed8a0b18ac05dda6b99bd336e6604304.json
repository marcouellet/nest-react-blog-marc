{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport API from './APIUtils';\nimport TokenService from './TokenService';\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction getCurrentUser() {\n  return TokenService.getUser();\n}\n\n;\n\nasync function login(email, password) {\n  const loginParms = {\n    email,\n    password\n  };\n  return API.post('/auth/login', loginParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function register(username, email, password) {\n  const registerParms = {\n    username,\n    email,\n    password\n  };\n  return API.post('/auth/register', registerParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function refresh(user) {\n  const authtoken = user.authtoken,\n        authrefreshtoken = user.authrefreshtoken;\n  const refreshParms = {\n    authtoken,\n    authrefreshtoken\n  };\n  return API.post('/auth/refresh', refreshParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nfunction logout() {\n  TokenService.removeUser();\n}\n\nconst AUTHAPI = {\n  getCurrentUser,\n  login,\n  register,\n  refresh,\n  logout\n};\nexport default AUTHAPI;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/AuthAPI.ts"],"names":["jwtDecode","API","TokenService","isTokenValid","token","decoded_jwt","current_time","Date","now","valueOf","exp","_","getCurrentUser","getUser","login","email","password","loginParms","post","then","response","setUser","data","register","username","registerParms","refresh","user","authtoken","authrefreshtoken","refreshParms","logout","removeUser","AUTHAPI"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMC,WAAuB,GAAGL,SAAS,CAAaI,KAAb,CAAzC;AACA,UAAME,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,SAASC,cAAT,GAAgC;AAC9B,SAAOV,YAAY,CAACW,OAAb,EAAP;AACD;;AAAA;;AAED,eAAeC,KAAf,CAAqBC,KAArB,EAAoCC,QAApC,EAAqE;AACnE,QAAMC,UAAkB,GAAG;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA3B;AACA,SAAOf,GAAG,CAACiB,IAAJ,CAAe,aAAf,EAA8BD,UAA9B,EACJE,IADI,CACCC,QAAQ,IAAI;AAChBlB,IAAAA,YAAY,CAACmB,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACA,WAAOF,QAAQ,CAACE,IAAhB;AACD,GAJI,CAAP;AAKD;;AAED,eAAeC,QAAf,CAAwBC,QAAxB,EAA0CT,KAA1C,EAAyDC,QAAzD,EAA2F;AACzF,QAAMS,aAAwB,GAAG;AAAED,IAAAA,QAAF;AAAYT,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAjC;AACA,SAAOf,GAAG,CAACiB,IAAJ,CAAe,gBAAf,EAAiCO,aAAjC,EACJN,IADI,CACCC,QAAQ,IAAI;AAChBlB,IAAAA,YAAY,CAACmB,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACA,WAAOF,QAAQ,CAACE,IAAhB;AACD,GAJI,CAAP;AAKD;;AAED,eAAeI,OAAf,CAAuBC,IAAvB,EAAmD;AAAA,QACzCC,SADyC,GACTD,IADS,CACzCC,SADyC;AAAA,QAC9BC,gBAD8B,GACTF,IADS,CAC9BE,gBAD8B;AAEjD,QAAMC,YAAsB,GAAG;AAAEF,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA/B;AACA,SAAO5B,GAAG,CAACiB,IAAJ,CAAe,eAAf,EAAgCY,YAAhC,EACJX,IADI,CACCC,QAAQ,IAAI;AAChBlB,IAAAA,YAAY,CAACmB,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACA,WAAOF,QAAQ,CAACE,IAAhB;AACD,GAJI,CAAP;AAKD;;AAED,SAASS,MAAT,GAAkB;AAChB7B,EAAAA,YAAY,CAAC8B,UAAb;AACD;;AAED,MAAMC,OAAO,GAAG;AAACrB,EAAAA,cAAD;AAAiBE,EAAAA,KAAjB;AAAwBS,EAAAA,QAAxB;AAAkCG,EAAAA,OAAlC;AAA2CK,EAAAA;AAA3C,CAAhB;AAEA,eAAeE,OAAf","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport API from './APIUtils';\r\nimport { User, ILogin, IRegister, IRefresh, JWTPayload, IErrors } from '../../types';\r\nimport TokenService from './TokenService';\r\n\r\nexport function isTokenValid(token: string) {\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n    const current_time = Date.now().valueOf() / 1000;\r\n    return decoded_jwt.exp > current_time;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getCurrentUser(): User {\r\n  return TokenService.getUser();\r\n};\r\n\r\nasync function login(email: string, password: string): Promise<User> {\r\n  const loginParms: ILogin = { email, password }\r\n  return API.post<User>('/auth/login', loginParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function register(username: string, email: string, password: string) : Promise<User> {\r\n  const registerParms: IRegister = { username, email, password }\r\n  return API.post<User>('/auth/register', registerParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function refresh(user: User) : Promise<User> {\r\n  const { authtoken, authrefreshtoken } = user;\r\n  const refreshParms: IRefresh = { authtoken, authrefreshtoken };\r\n  return API.post<User>('/auth/refresh', refreshParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nfunction logout() {\r\n  TokenService.removeUser();\r\n}\r\n\r\nconst AUTHAPI = {getCurrentUser, login, register, refresh, logout}\r\n\r\nexport default AUTHAPI\r\n"]},"metadata":{},"sourceType":"module"}