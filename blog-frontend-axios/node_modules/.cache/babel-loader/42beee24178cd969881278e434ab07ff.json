{"ast":null,"code":"import HttpApiService from \"./HttpApiService\";\nconst POST_ENDPOINT = `/post`;\n\nclass PostApi extends HttpApiService {\n  constructor(...args) {\n    super(...args);\n\n    this.getPostById = id => {\n      return super.get(`${POST_ENDPOINT}/${id}`);\n    };\n\n    this.getNumberOfPostsForUser = userId => {\n      return super.getCount(`${POST_ENDPOINT}/count/user/${userId}`);\n    };\n\n    this.getNumberOfPostsForCategory = categoryId => {\n      return super.getCount(`${POST_ENDPOINT}/count/category/${categoryId}`);\n    };\n\n    this.findManyPosts = postTitleFilter => {\n      let filter = {};\n\n      if (postTitleFilter) {\n        filter.title = {\n          \"$regex\": postTitleFilter,\n          \"$options\": \"i\"\n        };\n      }\n\n      return super.findMany(`${POST_ENDPOINT}/findMany`, filter);\n    };\n\n    this.findManyPostsForCategory = (categoryId, postTitleFilter) => {\n      let filter = postTitleFilter ? {\n        title: postTitleFilter\n      } : {};\n      return super.findMany(`${POST_ENDPOINT}/findMany/category/${categoryId}`, filter);\n    };\n\n    this.findManyPostsWithoutCategory = postTitleFilter => {\n      let filter = postTitleFilter ? {\n        title: postTitleFilter\n      } : {};\n      return super.findMany(`${POST_ENDPOINT}/findMany/nocategory`, filter);\n    };\n\n    this.createPost = data => {\n      return super.create(`${POST_ENDPOINT}/create`, data);\n    };\n\n    this.updatePost = (id, data) => {\n      return super.update(`${POST_ENDPOINT}/update/${id}`, data);\n    };\n\n    this.deletePost = id => {\n      return super.delete(`${POST_ENDPOINT}/delete/${id}`);\n    };\n  }\n\n  buildPostTitleFilter(postTitleFilter) {\n    let filter = {};\n\n    if (postTitleFilter) {\n      filter.title = {\n        \"$regex\": postTitleFilter,\n        \"$options\": \"i\"\n      };\n    }\n\n    return filter;\n  }\n\n}\n\nexport const PostApiService = new PostApi();","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/PostApiService.ts"],"names":["HttpApiService","POST_ENDPOINT","PostApi","getPostById","id","get","getNumberOfPostsForUser","userId","getCount","getNumberOfPostsForCategory","categoryId","findManyPosts","postTitleFilter","filter","title","findMany","findManyPostsForCategory","findManyPostsWithoutCategory","createPost","data","create","updatePost","update","deletePost","delete","buildPostTitleFilter","PostApiService"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAGA,MAAMC,aAAa,GAAI,OAAvB;;AAEA,MAAMC,OAAN,SAAsBF,cAAtB,CAA4C;AAAA;AAAA;;AAAA,SAU1CG,WAV0C,GAU3BC,EAAD,IAAgB;AAC5B,aAAO,MAAMC,GAAN,CAAW,GAAEJ,aAAc,IAAGG,EAAG,EAAjC,CAAP;AACD,KAZyC;;AAAA,SAc1CE,uBAd0C,GAcfC,MAAD,IAAoB;AAC5C,aAAO,MAAMC,QAAN,CAAgB,GAAEP,aAAc,eAAcM,MAAO,EAArD,CAAP;AACD,KAhByC;;AAAA,SAkB1CE,2BAlB0C,GAkBXC,UAAD,IAAwB;AACpD,aAAO,MAAMF,QAAN,CAAgB,GAAEP,aAAc,mBAAkBS,UAAW,EAA7D,CAAP;AACD,KApByC;;AAAA,SAsB1CC,aAtB0C,GAsBzBC,eAAD,IAA6B;AAC3C,UAAIC,MAAW,GAAG,EAAlB;;AACA,UAAID,eAAJ,EAAqB;AAClBC,QAAAA,MAAM,CAACC,KAAP,GAAe;AAAE,oBAAUF,eAAZ;AAA6B,sBAAY;AAAzC,SAAf;AACF;;AACD,aAAO,MAAMG,QAAN,CAAgB,GAAEd,aAAc,WAAhC,EAA4CY,MAA5C,CAAP;AACD,KA5ByC;;AAAA,SA8B1CG,wBA9B0C,GA8Bf,CAACN,UAAD,EAAqBE,eAArB,KAAiD;AAC1E,UAAIC,MAAM,GAAGD,eAAe,GAAG;AAACE,QAAAA,KAAK,EAAEF;AAAR,OAAH,GAA8B,EAA1D;AACA,aAAO,MAAMG,QAAN,CAAgB,GAAEd,aAAc,sBAAqBS,UAAW,EAAhE,EAAmEG,MAAnE,CAAP;AACD,KAjCyC;;AAAA,SAmC1CI,4BAnC0C,GAmCVL,eAAD,IAA6B;AAC1D,UAAIC,MAAM,GAAGD,eAAe,GAAG;AAACE,QAAAA,KAAK,EAAEF;AAAR,OAAH,GAA8B,EAA1D;AACE,aAAO,MAAMG,QAAN,CAAgB,GAAEd,aAAc,sBAAhC,EAAuDY,MAAvD,CAAP;AACH,KAtCyC;;AAAA,SAwC1CK,UAxC0C,GAwC5BC,IAAD,IAAiB;AAC5B,aAAO,MAAMC,MAAN,CAAc,GAAEnB,aAAc,SAA9B,EAAwCkB,IAAxC,CAAP;AACD,KA1CyC;;AAAA,SA4C1CE,UA5C0C,GA4C7B,CAACjB,EAAD,EAAae,IAAb,KAAmC;AAC9C,aAAO,MAAMG,MAAN,CAAc,GAAErB,aAAc,WAAUG,EAAG,EAA3C,EAA8Ce,IAA9C,CAAP;AACD,KA9CyC;;AAAA,SAgD1CI,UAhD0C,GAgD5BnB,EAAD,IAAgB;AAC3B,aAAO,MAAMoB,MAAN,CAAc,GAAEvB,aAAc,WAAUG,EAAG,EAA3C,CAAP;AACD,KAlDyC;AAAA;;AAElCqB,EAAAA,oBAAR,CAA6Bb,eAA7B,EAA4D;AAC1D,QAAIC,MAAW,GAAG,EAAlB;;AACA,QAAID,eAAJ,EAAqB;AAClBC,MAAAA,MAAM,CAACC,KAAP,GAAe;AAAE,kBAAUF,eAAZ;AAA6B,oBAAY;AAAzC,OAAf;AACF;;AACD,WAAOC,MAAP;AACD;;AARyC;;AAqD5C,OAAO,MAAMa,cAAc,GAAG,IAAIxB,OAAJ,EAAvB","sourcesContent":["import HttpApiService from \"./HttpApiService\";\r\nimport { IPost, IUpdatePost } from \"../../types\";\r\n\r\nconst POST_ENDPOINT = `/post`;\r\n\r\nclass PostApi extends HttpApiService<IPost> {\r\n \r\n  private buildPostTitleFilter(postTitleFilter: string) : any {\r\n    let filter: any = {};\r\n    if (postTitleFilter) {\r\n       filter.title = { \"$regex\": postTitleFilter, \"$options\": \"i\" }\r\n    }\r\n    return filter;\r\n  }\r\n\r\n  getPostById = (id: string) => {\r\n    return super.get(`${POST_ENDPOINT}/${id}`);\r\n  };\r\n\r\n  getNumberOfPostsForUser = (userId: string) => {\r\n    return super.getCount(`${POST_ENDPOINT}/count/user/${userId}`);\r\n  };\r\n\r\n  getNumberOfPostsForCategory = (categoryId: string) => {\r\n    return super.getCount(`${POST_ENDPOINT}/count/category/${categoryId}`);\r\n  };\r\n\r\n  findManyPosts = (postTitleFilter: string) => {\r\n    let filter: any = {};\r\n    if (postTitleFilter) {\r\n       filter.title = { \"$regex\": postTitleFilter, \"$options\": \"i\" }\r\n    }\r\n    return super.findMany(`${POST_ENDPOINT}/findMany`, filter);\r\n  }\r\n\r\n  findManyPostsForCategory = (categoryId: string, postTitleFilter: string) => {\r\n    let filter = postTitleFilter ? {title: postTitleFilter} : {};\r\n    return super.findMany(`${POST_ENDPOINT}/findMany/category/${categoryId}`, filter);\r\n  };\r\n\r\n  findManyPostsWithoutCategory = (postTitleFilter: string) => {\r\n    let filter = postTitleFilter ? {title: postTitleFilter} : {};\r\n      return super.findMany(`${POST_ENDPOINT}/findMany/nocategory`, filter);  \r\n  };\r\n\r\n  createPost = (data: IPost) => {\r\n    return super.create(`${POST_ENDPOINT}/create`, data);\r\n  };\r\n\r\n  updatePost = (id: string, data: IUpdatePost) => {\r\n    return super.update(`${POST_ENDPOINT}/update/${id}`, data);\r\n  };\r\n\r\n  deletePost = (id: string) => {\r\n    return super.delete(`${POST_ENDPOINT}/delete/${id}`);\r\n  };\r\n}\r\n\r\nexport const PostApiService = new PostApi();"]},"metadata":{},"sourceType":"module"}