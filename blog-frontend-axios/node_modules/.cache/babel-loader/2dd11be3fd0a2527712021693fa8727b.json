{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\Edit.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createPostForUpdate } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { checkSessionExpired } from '../../utils/session';\nimport { createActionSessionExpired } from '../../reducers/auth';\n\nconst Edit = () => {\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        submitSuccess = _useState4[0],\n        setSubmitSuccess = _useState4[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required'),\n    description: Yup.string().required('Description is required'),\n    body: Yup.string().required('Body is required')\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await PostApiService.getPostById(postId).then(post => {\n          setPost(post);\n          setValues(post);\n        }).catch(apiErrors => handleFetchPostError(apiErrors));\n        dispatch(createActionLoading(false));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n\n    const postData = _objectSpread({}, data, {\n      user\n    });\n\n    await PostApiService.createPost(postData).then(() => {\n      handleSubmitFormSucess();\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const handleFormSubmission = async e => {\n    e.preventDefault();\n    const formData = {\n      title: values.title,\n      description: values.description,\n      body: values.body\n    };\n    const submitSuccess = await submitForm(formData);\n    setSubmitSuccess(submitSuccess);\n    setTimeout(() => {\n      navigate('/');\n    }, 1500);\n  };\n\n  const submitForm = async formData => {\n    if (post) {\n      dispatch(createActionLoading(true));\n      const updatePost = createPostForUpdate(_objectSpread({}, post, {}, formData));\n      const isOk = await PostApiService.updatePost(post.id, updatePost).then(() => {\n        handleSubmitFormSucess();\n        return true;\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n        return false;\n      });\n      dispatch(createActionLoading(false));\n      return isOk;\n    }\n\n    return Promise.resolve(false);\n  };\n\n  const handleSubmitFormSucess = () => {\n    toast.success(`Post updated successfully...`);\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkSessionExpired(apiErrors)) {\n      toast.error(`Post update failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else {\n      toast.error(`Post update failed, see error list`);\n      setErrors(apiErrors);\n    }\n  };\n\n  const setFormValues = formValues => {\n    setValues(_objectSpread({}, values, {}, formValues));\n  };\n\n  const handleInputChanges = e => {\n    setFormValues({\n      [e.currentTarget.id]: e.currentTarget.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \" Edit Post  \"), submitSuccess && React.createElement(\"div\", {\n    className: \"alert alert-info\",\n    role: \"alert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"The post has been edited successfully!\"), errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-post-form\",\n    onSubmit: handleFormSubmission,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    defaultValue: post.title.toString(),\n    onChange: handleInputChanges,\n    name: \"title\",\n    className: \"form-control\",\n    placeholder: \"Enter title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"description\",\n    defaultValue: post.description.toString(),\n    onChange: handleInputChanges,\n    name: \"description\",\n    className: \"form-control\",\n    placeholder: \"Enter Description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \" Write Content \"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"body\",\n    defaultValue: post.body.toString(),\n    onChange: handleInputChanges,\n    name: \"body\",\n    className: \"form-control\",\n    placeholder: \"Enter content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Update Post\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })))));\n};\n\nexport default Edit;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/Edit.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","toast","Yup","yupResolver","createPostForUpdate","PostApiService","createActionLoading","useAuth","ListErrors","checkSessionExpired","createActionSessionExpired","Edit","navigate","state","isLoading","user","dispatch","errorList","setErrorList","postId","post","setPost","submitSuccess","setSubmitSuccess","validationSchema","object","shape","title","string","required","description","body","resolver","register","handleSubmit","errors","formState","fetchData","getPostById","then","setValues","catch","apiErrors","handleFetchPostError","onSubmit","data","postData","createPost","handleSubmitFormSucess","handleSubmitFormError","error","handleFormSubmission","e","preventDefault","formData","values","submitForm","setTimeout","updatePost","isOk","id","Promise","resolve","success","setErrors","setFormValues","formValues","handleInputChanges","currentTarget","value","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport { IPost, IUpdatePost, createPostForUpdate } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors } from '../../types';\r\nimport { checkSessionExpired } from '../../utils/session';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\n\r\nconst Edit = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading, user }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { postId } = useParams<{ postId: string }>();\r\n  \r\n  const [post, setPost] = useState<IPost>();\r\n  const [submitSuccess, setSubmitSuccess] = useState<boolean>(false);\r\n \r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required'),\r\n    description: Yup.string().required('Description is required'),\r\n    body: Yup.string().required('Body is required'),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n    title: string;\r\n    description: string;\r\n    body: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm<UpdateSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await PostApiService.getPostById(postId!)\r\n        .then((post) => { setPost(post); setValues(post); })\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        dispatch(createActionLoading(false));\r\n       }\r\n      fetchData();      \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    const postData = {...data, user}\r\n    await PostApiService.createPost(postData)\r\n    .then(() => { handleSubmitFormSucess(); })\r\n    .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n    dispatch(createActionLoading(false));\r\n  } \r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n\r\n  const handleFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n    e.preventDefault();\r\n\r\n    const formData = {\r\n      title: values.title,\r\n      description: values.description,\r\n      body: values.body,\r\n    }\r\n\r\n    const submitSuccess: boolean = await submitForm(formData);\r\n    setSubmitSuccess(submitSuccess);\r\n    setTimeout(() => {\r\n      navigate('/');\r\n    }, 1500);\r\n  }\r\n\r\n  const submitForm = async (formData: {}) : Promise<boolean>  =>  {\r\n    if (post) {\r\n      dispatch(createActionLoading(true));\r\n      const updatePost: IUpdatePost = createPostForUpdate({...post, ...formData});\r\n      const isOk = await PostApiService.updatePost(post.id!, updatePost)\r\n        .then(() => { handleSubmitFormSucess();  return true;})\r\n        .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); return false;});\r\n      dispatch(createActionLoading(false));\r\n      return isOk;\r\n    }\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  const handleSubmitFormSucess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      toast.error(`Post update failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else {\r\n      toast.error(`Post update failed, see error list`);\r\n      setErrors(apiErrors);      \r\n    }\r\n}\r\n\r\n  const setFormValues = (formValues: IValues) => {\r\n    setValues({...values, ...formValues})\r\n  }\r\n\r\n  const handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setFormValues({ [e.currentTarget.id]: e.currentTarget.value })\r\n  }\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Post  </h2>\r\n\r\n          {submitSuccess && (\r\n            <div className=\"alert alert-info\" role=\"alert\">\r\n              The post has been edited successfully!\r\n                          </div>\r\n          )}\r\n          {errors && <ListErrors errors={errors} />}\r\n          <form id={\"create-post-form\"} onSubmit={handleFormSubmission} noValidate={true}>\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input type=\"text\" id=\"title\" defaultValue={post.title.toString()} onChange={handleInputChanges} name=\"title\" className=\"form-control\" placeholder=\"Enter title\" />\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input type=\"text\" id=\"description\" defaultValue={post.description.toString()} onChange={handleInputChanges} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"body\"> Write Content </label>\r\n              <input type=\"text\" id=\"body\" defaultValue={post.body.toString()} onChange={handleInputChanges} name=\"body\" className=\"form-control\" placeholder=\"Enter content\" />\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4 pull-right\">\r\n              <button className=\"btn btn-success\" type=\"submit\">\r\n                Update Post\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Edit;"]},"metadata":{},"sourceType":"module"}