{"ast":null,"code":"import HttpApiService from './HttpApiService';\nimport { buildPostTitleFilter } from './FilterApiService';\nconst POST_ENDPOINT = `/post`;\n\nclass PostApi extends HttpApiService {\n  constructor(...args) {\n    super(...args);\n\n    this.getPostById = id => {\n      return super.get(`${POST_ENDPOINT}/${id}`);\n    };\n\n    this.getNumberOfPostsForUser = userId => {\n      return super.getCount(`${POST_ENDPOINT}/count/user/${userId}`);\n    };\n\n    this.getNumberOfPostsForCategory = categoryId => {\n      return super.getCount(`${POST_ENDPOINT}/count/category/${categoryId}`);\n    };\n\n    this.findManyPosts = postTitleFilter => {\n      return super.findMany(`${POST_ENDPOINT}/findMany`, buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.finManyPostsForUser = (userId, postTitleFilter) => {\n      return super.findMany(`${POST_ENDPOINT}/findMany/user/${userId}`, buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.findManyPostsForCategory = (categoryId, postTitleFilter) => {\n      return super.findMany(`${POST_ENDPOINT}/findMany/category/${categoryId}`, buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.findManyPostsWithoutCategory = postTitleFilter => {\n      return super.findMany(`${POST_ENDPOINT}/findMany/nocategory`, buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.createPost = data => {\n      return super.create(`${POST_ENDPOINT}/create`, data);\n    };\n\n    this.updatePost = (id, data) => {\n      return super.update(`${POST_ENDPOINT}/update/${id}`, data);\n    };\n\n    this.deletePost = id => {\n      return super.delete(`${POST_ENDPOINT}/delete/${id}`);\n    };\n  }\n\n}\n\nexport const PostApiService = new PostApi();","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/PostApiService.ts"],"names":["HttpApiService","buildPostTitleFilter","POST_ENDPOINT","PostApi","getPostById","id","get","getNumberOfPostsForUser","userId","getCount","getNumberOfPostsForCategory","categoryId","findManyPosts","postTitleFilter","findMany","finManyPostsForUser","findManyPostsForCategory","findManyPostsWithoutCategory","createPost","data","create","updatePost","update","deletePost","delete","PostApiService"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAEA,SAASC,oBAAT,QAAqC,oBAArC;AAEA,MAAMC,aAAa,GAAI,OAAvB;;AAEA,MAAMC,OAAN,SAAsBH,cAAtB,CAA4C;AAAA;AAAA;;AAAA,SAE1CI,WAF0C,GAE3BC,EAAD,IAAgB;AAC5B,aAAO,MAAMC,GAAN,CAAW,GAAEJ,aAAc,IAAGG,EAAG,EAAjC,CAAP;AACD,KAJyC;;AAAA,SAM1CE,uBAN0C,GAMfC,MAAD,IAAoB;AAC5C,aAAO,MAAMC,QAAN,CAAgB,GAAEP,aAAc,eAAcM,MAAO,EAArD,CAAP;AACD,KARyC;;AAAA,SAU1CE,2BAV0C,GAUXC,UAAD,IAAwB;AACpD,aAAO,MAAMF,QAAN,CAAgB,GAAEP,aAAc,mBAAkBS,UAAW,EAA7D,CAAP;AACD,KAZyC;;AAAA,SAc1CC,aAd0C,GAczBC,eAAD,IAA6B;AAC3C,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,WAAhC,EAA4CD,oBAAoB,CAACY,eAAD,CAAhE,CAAP;AACD,KAhByC;;AAAA,SAkB1CE,mBAlB0C,GAkBpB,CAACP,MAAD,EAAiBK,eAAjB,KAA6C;AACjE,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,kBAAiBM,MAAO,EAAxD,EAA2DP,oBAAoB,CAACY,eAAD,CAA/E,CAAP;AACD,KApByC;;AAAA,SAsB1CG,wBAtB0C,GAsBf,CAACL,UAAD,EAAqBE,eAArB,KAAiD;AAC1E,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,sBAAqBS,UAAW,EAAhE,EAAmEV,oBAAoB,CAACY,eAAD,CAAvF,CAAP;AACD,KAxByC;;AAAA,SA0B1CI,4BA1B0C,GA0BVJ,eAAD,IAA6B;AACxD,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,sBAAhC,EAAuDD,oBAAoB,CAACY,eAAD,CAA3E,CAAP;AACH,KA5ByC;;AAAA,SA8B1CK,UA9B0C,GA8B5BC,IAAD,IAAiB;AAC5B,aAAO,MAAMC,MAAN,CAAc,GAAElB,aAAc,SAA9B,EAAwCiB,IAAxC,CAAP;AACD,KAhCyC;;AAAA,SAkC1CE,UAlC0C,GAkC7B,CAAChB,EAAD,EAAac,IAAb,KAAmC;AAC9C,aAAO,MAAMG,MAAN,CAAc,GAAEpB,aAAc,WAAUG,EAAG,EAA3C,EAA8Cc,IAA9C,CAAP;AACD,KApCyC;;AAAA,SAsC1CI,UAtC0C,GAsC5BlB,EAAD,IAAgB;AAC3B,aAAO,MAAMmB,MAAN,CAAc,GAAEtB,aAAc,WAAUG,EAAG,EAA3C,CAAP;AACD,KAxCyC;AAAA;;AAAA;;AA2C5C,OAAO,MAAMoB,cAAc,GAAG,IAAItB,OAAJ,EAAvB","sourcesContent":["import HttpApiService from './HttpApiService';\r\nimport { IPost, IUpdatePost } from '../../types';\r\nimport { buildPostTitleFilter } from './FilterApiService';\r\n\r\nconst POST_ENDPOINT = `/post`;\r\n\r\nclass PostApi extends HttpApiService<IPost> {\r\n\r\n  getPostById = (id: string) => {\r\n    return super.get(`${POST_ENDPOINT}/${id}`);\r\n  };\r\n\r\n  getNumberOfPostsForUser = (userId: string) => {\r\n    return super.getCount(`${POST_ENDPOINT}/count/user/${userId}`);\r\n  };\r\n\r\n  getNumberOfPostsForCategory = (categoryId: string) => {\r\n    return super.getCount(`${POST_ENDPOINT}/count/category/${categoryId}`);\r\n  };\r\n\r\n  findManyPosts = (postTitleFilter: string) => {\r\n    return super.findMany(`${POST_ENDPOINT}/findMany`, buildPostTitleFilter(postTitleFilter));\r\n  }\r\n\r\n  finManyPostsForUser = (userId: string, postTitleFilter: string) => {\r\n    return super.findMany(`${POST_ENDPOINT}/findMany/user/${userId}`, buildPostTitleFilter(postTitleFilter));\r\n  };\r\n\r\n  findManyPostsForCategory = (categoryId: string, postTitleFilter: string) => {\r\n    return super.findMany(`${POST_ENDPOINT}/findMany/category/${categoryId}`, buildPostTitleFilter(postTitleFilter));\r\n  };\r\n\r\n  findManyPostsWithoutCategory = (postTitleFilter: string) => {\r\n      return super.findMany(`${POST_ENDPOINT}/findMany/nocategory`, buildPostTitleFilter(postTitleFilter));  \r\n  };\r\n\r\n  createPost = (data: IPost) => {\r\n    return super.create(`${POST_ENDPOINT}/create`, data);\r\n  };\r\n\r\n  updatePost = (id: string, data: IUpdatePost) => {\r\n    return super.update(`${POST_ENDPOINT}/update/${id}`, data);\r\n  };\r\n\r\n  deletePost = (id: string) => {\r\n    return super.delete(`${POST_ENDPOINT}/delete/${id}`);\r\n  };\r\n}\r\n\r\nexport const PostApiService = new PostApi();"]},"metadata":{},"sourceType":"module"}