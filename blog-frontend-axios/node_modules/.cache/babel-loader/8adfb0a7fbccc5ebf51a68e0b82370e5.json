{"ast":null,"code":"import API from './APIService';\nexport let EnumContentType;\n\n(function (EnumContentType) {\n  EnumContentType[\"JSON\"] = \"application/json\";\n  EnumContentType[\"XML\"] = \"application/xml\";\n  EnumContentType[\"FORM\"] = \"application/x-www-form-urlencoded\";\n})(EnumContentType || (EnumContentType = {}));\n\nclass HttpApiService {\n  getAll(endpoint, conf = {}) {\n    return API.get(`${endpoint}`, conf).then(response => response.data);\n  }\n\n  get(endpoint, conf = {}) {\n    return new Promise(resolve => {\n      API.get(`${endpoint}`, conf).then(response => {\n        resolve(response.data);\n      });\n    });\n  }\n\n  getCount(endpoint, conf = {}) {\n    return new Promise(resolve => {\n      API.get(`${endpoint}`, conf).then(response => {\n        resolve(response.data);\n      });\n    });\n  }\n\n  findMany(endpoint, data, conf = {}) {\n    return new Promise(resolve => {\n      API.put(`${endpoint}`, data, conf).then(response => {\n        resolve(response.data);\n      });\n    });\n  }\n\n  create(endpoint, data, conf = {}) {\n    return this.post(endpoint, data, conf);\n  }\n\n  post(endpoint, data, conf = {}) {\n    return API.post(`${endpoint}`, data, conf).then(response => response.data);\n  }\n\n  update(endpoint, data, conf = {}) {\n    return new Promise(resolve => {\n      API.put(`${endpoint}`, data, conf).then(response => {\n        resolve(response.data);\n      });\n    });\n  }\n\n  delete(endpoint, conf = {}) {\n    return new Promise(resolve => {\n      API.delete(`${endpoint}`, conf).then(response => {\n        resolve(response.data);\n      });\n    });\n  }\n\n}\n\nexport default HttpApiService;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/HttpApiService.ts"],"names":["API","EnumContentType","HttpApiService","getAll","endpoint","conf","get","then","response","data","Promise","resolve","getCount","findMany","put","create","post","update","delete"],"mappings":"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","sourcesContent":["import API from './APIService';\r\n\r\nexport enum EnumContentType {\r\n  JSON = \"application/json\",\r\n  XML = \"application/xml\",\r\n  FORM = \"application/x-www-form-urlencoded\",\r\n}\r\nclass HttpApiService<T> {\r\n\r\n  protected getAll(endpoint: string, conf = {}): Promise<T[]> {\r\n    return API.get<T[]>(`${endpoint}`, conf)\r\n        .then(response =>response.data);\r\n  }\r\n\r\n  protected get(endpoint: string, conf = {}): Promise<T> {\r\n    return new Promise(resolve => {\r\n      API.get<T>(`${endpoint}`, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n     });\r\n  }\r\n\r\n  protected getCount(endpoint: string, conf = {}): Promise<number> {\r\n    return new Promise(resolve => {\r\n      API.get<number>(`${endpoint}`, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n     });\r\n  }\r\n\r\n  protected findMany(endpoint: string, data: {}, conf = {}): Promise<T[]> {\r\n    return new Promise(resolve => {\r\n      API.put<T[]>(`${endpoint}`, data, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n     });\r\n  }\r\n\r\n  protected create(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return this.post(endpoint, data, conf)\r\n  }\r\n\r\n  protected post(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n      return API.post<T>(`${endpoint}`, data, conf)\r\n        .then(response => response.data);\r\n  }\r\n\r\n  protected update(endpoint: string, data: T, conf = {}): Promise<T> {\r\n    return new Promise(resolve => {\r\n      API.put<T>(`${endpoint}`, data, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n     });\r\n  }\r\n\r\n  protected delete(endpoint: string, conf = {}): Promise<T> {\r\n    return new Promise(resolve => {\r\n      API.delete<T>(`${endpoint}`, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport default HttpApiService;"]},"metadata":{},"sourceType":"module"}