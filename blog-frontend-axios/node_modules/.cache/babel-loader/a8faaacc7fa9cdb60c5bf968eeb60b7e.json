{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\blog\\\\ListBlogs.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { toast } from \"react-toastify\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport useAuth from '../../contexts/auth';\nimport { createActionLoading } from '../../reducers/auth';\nimport ListErrors from '../common/ListErrors';\nimport { PostApiService } from '../../services/api/PostApiService';\nimport { DropdownButton, Dropdown, Container } from 'react-bootstrap';\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../../reducers/auth';\nimport ViewBlogCards from './ViewBlogCards';\nimport { resizeImage } from '../../utils/image.utils';\n\nconst ListBlogs = () => {\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        user = _useAuth$state.user,\n        isLoading = _useAuth$state.isLoading,\n        categoryFilter = _useAuth$state.categoryFilter,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        posts = _useState2[0],\n        setPosts = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState('All'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        categoryTitle = _useState8[0],\n        setCategoryTitle = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        postTitleFilter = _useState10[0],\n        setPostTitleFilter = _useState10[1];\n\n  const _useState11 = useState(),\n        _useState12 = _slicedToArray(_useState11, 2),\n        postDefaultImage = _useState12[0],\n        setpostDefaultImage = _useState12[1];\n\n  const _useState13 = useState(),\n        _useState14 = _slicedToArray(_useState13, 2),\n        userDefaultImage = _useState14[0],\n        setuserDefaultImage = _useState14[1];\n\n  const imageMaxSize = {\n    maxWidth: 120,\n    maxHeight: 120\n  };\n  useEffect(() => {\n    (async () => {\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          await getDefaultPostImage().then(imageData => {\n            setpostDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          });\n          await getDefaultUserImage().then(imageData => {\n            setuserDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          });\n          await CategoryApiService.getAllCategories().then(categories => {\n            const all = {\n              id: 'all',\n              title: 'All',\n              description: ''\n            };\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            const allCategories = [all, noCategory].concat(categories);\n            setCategories(allCategories);\n\n            if (categoryFilter) {\n              selectCategory(allCategories, categoryFilter.id, false);\n            } else {\n              selectCategory(allCategories, 'all', false);\n            }\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n        };\n\n        fetchCategories();\n      }\n\n      setPostTitleFilter(postTitleFilter);\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      if (category) {\n        dispatch(createActionLoading(true));\n\n        if (category.id === 'all') {\n          await PostApiService.findManyPosts(postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        } else if (category.id === 'no_category') {\n          await PostApiService.findManyPostsWithoutCategory(postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        } else {\n          await PostApiService.findManyPostsForCategory(category.id, postTitleFilter).then(posts => setPosts(posts)).catch(apiErrors => handleFetchPostError(apiErrors));\n        }\n\n        dispatch(createActionLoading(false));\n      }\n    };\n\n    fetchPosts(); // eslint-disable-next-line\n  }, [category, postTitleFilter, user]);\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const getDefaultUserImage = () => {\n    return resizeImage('/default-user-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const handleFetchCategoriesError = apiErrors => {\n    setErrors(apiErrors);\n    toast.error(`Categories reading failed, see error list`);\n  };\n\n  const handleFetchPostError = apiErrors => {\n    setErrors(apiErrors);\n    toast.error(`Post reading failed, see error list`);\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories === null || categories === void 0 ? void 0 : categories.find(category => category.id === categoryId);\n    setCategoryTitle(category.title);\n    setCategory(category);\n    dispatch(createActionSetCategoryFilter(category));\n  };\n\n  const handlePostTitleFilterChange = filter => {\n    setPostTitleFilter(filter);\n    dispatch(createActionSetPostTitleFilter(filter));\n  };\n\n  return React.createElement(\"section\", {\n    className: \"blog-area section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(Container, {\n    className: \"col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-group \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(\"div\", {\n    key: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, category.title)))), React.createElement(\"input\", {\n    style: {\n      float: 'right'\n    },\n    className: \"col-md-2\",\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\",\n    value: categoryTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"col-md-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Filter:\")), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"postTitleFilter\",\n    value: postTitleFilter,\n    placeholder: \"enter some part of post title text\",\n    className: \"col-md-2\",\n    onChange: e => handlePostTitleFilterChange(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }))), !isLoading && posts && React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(ViewBlogCards, {\n    className: \"col-lg-3 col-md-4\",\n    posts: posts,\n    defaultPostImage: postDefaultImage,\n    defaultUserImage: userDefaultImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }))));\n};\n\nexport default ListBlogs;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/blog/ListBlogs.tsx"],"names":["React","useState","useEffect","toast","CategoryApiService","useAuth","createActionLoading","ListErrors","PostApiService","DropdownButton","Dropdown","Container","createActionSetCategoryFilter","createActionSetPostTitleFilter","ViewBlogCards","resizeImage","ListBlogs","state","user","isLoading","categoryFilter","dispatch","errors","setErrors","posts","setPosts","categories","setCategories","category","setCategory","categoryTitle","setCategoryTitle","postTitleFilter","setPostTitleFilter","postDefaultImage","setpostDefaultImage","userDefaultImage","setuserDefaultImage","imageMaxSize","maxWidth","maxHeight","fetchCategories","getDefaultPostImage","then","imageData","catch","error","Error","getDefaultUserImage","getAllCategories","all","id","title","description","noCategory","allCategories","concat","selectCategory","apiErrors","handleFetchCategoriesError","fetchPosts","findManyPosts","handleFetchPostError","findManyPostsWithoutCategory","findManyPostsForCategory","handleCategorySelect","e","categoryId","setDirty","find","handlePostTitleFilterChange","filter","map","float","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { toast } from \"react-toastify\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { IPost, ICategory } from \"../../types\";\r\nimport useAuth from '../../contexts/auth';\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, ImageSizeProps, ImageData } from '../../types';\r\nimport { PostApiService } from '../../services/api/PostApiService';\r\nimport { DropdownButton, Dropdown, Container } from 'react-bootstrap';\r\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../../reducers/auth';\r\nimport ViewBlogCards from './ViewBlogCards';\r\nimport { resizeImage } from '../../utils/image.utils';\r\n\r\nconst ListBlogs = () => {\r\n\r\n  const { state: { user, isLoading, categoryFilter }, dispatch } = useAuth();\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n  const [posts, setPosts] = useState<IPost[]>([]);\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [categoryTitle, setCategoryTitle] = useState<string>('All');\r\n  const [postTitleFilter, setPostTitleFilter] = useState<string>('');\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n  const [userDefaultImage, setuserDefaultImage] = useState<ImageData>();\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:120, maxHeight:120}\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n          await getDefaultPostImage()\r\n          .then(imageData => { setpostDefaultImage(imageData);})\r\n          .catch(error => {\r\n            throw new Error(error);\r\n          });   \r\n          await getDefaultUserImage()\r\n          .then(imageData => { setuserDefaultImage(imageData);})\r\n          .catch(error => {\r\n            throw new Error(error);\r\n          });   \r\n         await CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const all: ICategory = {id:'all', title: 'All', description: ''};\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            const allCategories = [all, noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            if (categoryFilter) {\r\n              selectCategory(allCategories, categoryFilter.id!, false);\r\n            } else {\r\n              selectCategory(allCategories, 'all', false);\r\n            }            \r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        }\r\n        fetchCategories();\r\n      }\r\n      setPostTitleFilter(postTitleFilter);\r\n      dispatch(createActionLoading(false));\r\n    })();\r\n // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async (): Promise<void> => {\r\n      if (category) {\r\n        dispatch(createActionLoading(true));\r\n        if ( category.id === 'all') {\r\n          await PostApiService.findManyPosts(postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        } \r\n        else if (category.id === 'no_category') {\r\n          await PostApiService.findManyPostsWithoutCategory(postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        } \r\n        else {\r\n          await PostApiService.findManyPostsForCategory(category.id!, postTitleFilter)\r\n          .then(posts => setPosts(posts))\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        }\r\n        dispatch(createActionLoading(false));\r\n      }\r\n    }\r\n    fetchPosts();\r\n  // eslint-disable-next-line\r\n  }, [category, postTitleFilter, user])\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const getDefaultUserImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-user-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    setErrors(apiErrors);\r\n    toast.error(`Categories reading failed, see error list`);\r\n  }\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    setErrors(apiErrors);\r\n    toast.error(`Post reading failed, see error list`);\r\n  }\r\n\r\n  const handleCategorySelect=(e: any)=>{\r\n    selectCategory(categories!, e, true);\r\n  }\r\n\r\n  const selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n    const category = categories?.find(category => category.id === categoryId);\r\n    setCategoryTitle(category!.title!);\r\n    setCategory(category);\r\n    dispatch(createActionSetCategoryFilter(category!));\r\n  }\r\n\r\n  const handlePostTitleFilterChange = (filter: string)=>{\r\n    setPostTitleFilter(filter);\r\n    dispatch(createActionSetPostTitleFilter(filter));\r\n  }\r\n\r\n  return (\r\n    <section className=\"blog-area section\">\r\n      {errors && <ListErrors errors={errors} />}\r\n      <Container  className=\"col-md-12\">\r\n        <br/>\r\n        <br/>\r\n        <div className=\"form-group \">\r\n          <div className=\"row\">\r\n            <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                {categories && categories.map((category: ICategory) => \r\n                (\r\n                  <div key={category.id}>\r\n                    <Dropdown.Item eventKey={category.id}>\r\n                      {category.title}\r\n                    </Dropdown.Item>\r\n                  </div>\r\n                ))\r\n              }\r\n            </DropdownButton>\r\n            <input \r\n              style={{float: 'right'}} \r\n              className=\"col-md-2\"   \r\n              type=\"text\" \r\n              disabled  \r\n              placeholder=\"no category selected\" \r\n              value={categoryTitle}        \r\n            />\r\n            <h4 className=\"col-md-1\">\r\n              <span>\r\n                Filter:\r\n              </span>\r\n            </h4>\r\n            <input  \r\n              type=\"text\" \r\n              name=\"postTitleFilter\" \r\n              value={postTitleFilter} \r\n              placeholder=\"enter some part of post title text\" \r\n              className=\"col-md-2\" \r\n              onChange={e => handlePostTitleFilterChange(e.target.value)}      \r\n            />\r\n          </div>\r\n        </div>\r\n        {!isLoading && posts &&       \r\n          <div className=\"row\">\r\n            <ViewBlogCards\r\n              className=\"col-lg-3 col-md-4\"\r\n              posts={posts}\r\n              defaultPostImage={postDefaultImage!}\r\n              defaultUserImage={userDefaultImage!}\r\n            /> \r\n          </div>\r\n        }\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ListBlogs;\r\n"]},"metadata":{},"sourceType":"module"}