{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\CreatePost.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport { minimumPostTitleLength, minimumPostDescriptionLength, minimumPostBodyLength } from '../../types';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\nimport ImageUpload from '../common/ImageUpload';\nimport Image from '../common/Image';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\n\nconst CreatePost = () => {\n  var _errors$categoryTitle, _errors$title, _errors$description, _errors$body;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        categories = _useState2[0],\n        setCategories = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        category = _useState4[0],\n        setCategory = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        postImage = _useState6[0],\n        setPostImage = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        postDefaultImage = _useState8[0],\n        setpostDefaultImage = _useState8[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required').min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\n    body: Yup.string().required('Content is required').min(minimumPostBodyLength, `Content must be at least ${minimumPostBodyLength} characters long`),\n    categoryTitle: Yup.string()\n  });\n  const defaultValues = {\n    title: '',\n    description: '',\n    body: '',\n    categoryTitle: '',\n    image: undefined\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue;\n\n  useEffect(() => {\n    (async () => {\n      if (!categories) {\n        dispatch(createActionLoading(true));\n\n        const fetchCategories = async () => {\n          await getDefaultPostImage().then(imageData => {\n            setpostDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          });\n          await CategoryApiService.getAllCategories().then(categories => {\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            const allCategories = [noCategory].concat(categories);\n            setCategories(allCategories);\n            selectCategory(allCategories, 'no_category', false);\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n          dispatch(createActionLoading(false));\n        };\n\n        fetchCategories();\n      }\n    })(); // eslint-disable-next-line\n\n  }, []);\n\n  const handleFetchCategoriesError = apiErrors => {\n    toast.error(`Categories reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const PostImage = () => {\n    if (postImage) {\n      return React.createElement(ImageResize, {\n        imageData: postImage,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n    } else {\n      return postDefaultImage && React.createElement(Image, {\n        imageData: postDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      });\n    }\n  };\n\n  const imageMaxSize = {\n    maxWidth: 200,\n    maxHeight: 200\n  };\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    const image = postImage;\n\n    const postData = _objectSpread({}, data, {\n      category,\n      image,\n      user\n    });\n\n    await PostApiService.createPost(postData).then(() => {\n      handleSubmitFormSuccess();\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  const handleSubmitFormSuccess = () => {\n    toast.success(`Post created successfully...`);\n    navigate('/');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`Post creation failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`Post creation failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelCreatePostMessage = () => `post creation and loose changes`;\n\n  const handleClearCreatePost = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n    const noCategory = categories === null || categories === void 0 ? void 0 : categories.find(category => category.id === 'no_category');\n    setCategory(noCategory);\n    setValue('categoryTitle', noCategory.title, {\n      shouldDirty: false\n    });\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories === null || categories === void 0 ? void 0 : categories.find(category => category.id === categoryId);\n    setCategory((category === null || category === void 0 ? void 0 : category.id) === 'no_category' ? undefined : category);\n    setValue('categoryTitle', category.title, {\n      shouldDirty: setDirty\n    });\n  };\n\n  const handleCancelCreatePost = () => {\n    navigate('/');\n  };\n\n  const handleImageUpload = image => {\n    setPostImage(image);\n  };\n\n  const handleImageUploadError = error => {\n    toast.error(`User image upload failed`);\n  };\n\n  const handleDeleteImage = () => {\n    setPostImage(undefined);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \" Create Post \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-post-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, category.title))), React.createElement(\"input\", Object.assign({\n    style: {\n      float: 'right'\n    },\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\"\n  }, register('categoryTitle'), {\n    className: `col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, (_errors$categoryTitle = errors.categoryTitle) === null || _errors$categoryTitle === void 0 ? void 0 : _errors$categoryTitle.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \" Image: \"), postImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    onImageUploadError: handleImageUploadError,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, PostImage(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \" Write Content \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter body\"\n  }, register('body'), {\n    className: `form-control ${errors.body ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, (_errors$body = errors.body) === null || _errors$body === void 0 ? void 0 : _errors$body.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"Create Post\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleClearCreatePost(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, \"Clear\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelCreatePostMessage(),\n    onClick: () => handleCancelCreatePost(),\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default CreatePost;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/CreatePost.tsx"],"names":["React","useState","useEffect","useForm","useNavigate","toast","Yup","CancelButton","yupResolver","PostApiService","createActionLoading","useAuth","ListErrors","DropdownButton","Dropdown","CategoryApiService","minimumPostTitleLength","minimumPostDescriptionLength","minimumPostBodyLength","checkUnauthorized","checkForbidden","createActionSessionExpired","ImageUpload","Image","ImageResize","resizeImage","CreatePost","navigate","state","isLoading","user","dispatch","errorList","setErrorList","categories","setCategories","category","setCategory","postImage","setPostImage","postDefaultImage","setpostDefaultImage","validationSchema","object","shape","title","string","required","min","description","body","categoryTitle","defaultValues","image","undefined","resolver","register","handleSubmit","formState","errors","isDirty","reset","setValue","fetchCategories","getDefaultPostImage","then","imageData","catch","error","Error","getAllCategories","noCategory","id","allCategories","concat","selectCategory","apiErrors","handleFetchCategoriesError","imageMaxSize","maxWidth","maxHeight","PostImage","onSubmit","data","postData","createPost","handleSubmitFormSuccess","handleSubmitFormError","success","cancelCreatePostMessage","handleClearCreatePost","keepDirty","find","shouldDirty","handleCategorySelect","e","categoryId","setDirty","handleCancelCreatePost","handleImageUpload","handleImageUploadError","handleDeleteImage","map","float","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,iBAAzC;AACA,SAASC,kBAAT,QAAmC,uCAAnC;AACA,SAAwDC,sBAAxD,EAAgFC,4BAAhF,EACUC,qBADV,QACuC,aADvC;AAEA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,iCAAlD;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAEvB,QAAMC,QAAQ,GAAGvB,WAAW,EAA5B;;AAFuB,mBAG0BO,OAAO,EAHjC;AAAA,kCAGfiB,KAHe;AAAA,QAGNC,SAHM,kBAGNA,SAHM;AAAA,QAGKC,IAHL,kBAGKA,IAHL;AAAA,QAGaC,QAHb,YAGaA,QAHb;;AAAA,0BAIW/B,KAAK,CAACC,QAAN,EAJX;AAAA;AAAA,QAIhB+B,SAJgB;AAAA,QAILC,YAJK;;AAAA,oBAKahC,QAAQ,EALrB;AAAA;AAAA,QAKhBiC,UALgB;AAAA,QAKJC,aALI;;AAAA,qBAMSlC,QAAQ,EANjB;AAAA;AAAA,QAMhBmC,QANgB;AAAA,QAMNC,WANM;;AAAA,qBAOWpC,QAAQ,EAPnB;AAAA;AAAA,QAOhBqC,SAPgB;AAAA,QAOLC,YAPK;;AAAA,qBAQyBtC,QAAQ,EARjC;AAAA;AAAA,QAQhBuC,gBARgB;AAAA,QAQEC,mBARF;;AAUvB,QAAMC,gBAAgB,GAAGpC,GAAG,CAACqC,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,IAAAA,KAAK,EAAEvC,GAAG,CAACwC,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,EACJC,GADI,CACAhC,sBADA,EACyB,0BAAyBA,sBAAuB,kBADzE,CADmC;AAG1CiC,IAAAA,WAAW,EAAE3C,GAAG,CAACwC,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,EACVC,GADU,CACN/B,4BADM,EACyB,gCAA+BA,4BAA6B,kBADrF,CAH6B;AAK1CiC,IAAAA,IAAI,EAAE5C,GAAG,CAACwC,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,EACHC,GADG,CACC9B,qBADD,EACyB,4BAA2BA,qBAAsB,kBAD1E,CALoC;AAO1CiC,IAAAA,aAAa,EAAE7C,GAAG,CAACwC,MAAJ;AAP2B,GAAnB,CAAzB;AAiBA,QAAMM,aAAa,GAAG;AAACP,IAAAA,KAAK,EAAE,EAAR;AAAYI,IAAAA,WAAW,EAAE,EAAzB;AAA6BC,IAAAA,IAAI,EAAE,EAAnC;AAAuCC,IAAAA,aAAa,EAAE,EAAtD;AAA0DE,IAAAA,KAAK,EAAEC;AAAjE,GAAtB;;AA3BuB,mBAmCnBnD,OAAO,CAAmB;AAC5BoD,IAAAA,QAAQ,EAAE/C,WAAW,CAACkC,gBAAD,CADO;AAE5BU,IAAAA,aAAa,EAAEA;AAFa,GAAnB,CAnCY;AAAA,QA8BrBI,QA9BqB,YA8BrBA,QA9BqB;AAAA,QA+BrBC,YA/BqB,YA+BrBA,YA/BqB;AAAA,sCAgCrBC,SAhCqB;AAAA,QAgCRC,MAhCQ,sBAgCRA,MAhCQ;AAAA,QAgCAC,OAhCA,sBAgCAA,OAhCA;AAAA,QAiCrBC,KAjCqB,YAiCrBA,KAjCqB;AAAA,QAkCrBC,QAlCqB,YAkCrBA,QAlCqB;;AAwCvB5D,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAI,CAACgC,UAAL,EAAiB;AACfH,QAAAA,QAAQ,CAACrB,mBAAmB,CAAC,IAAD,CAApB,CAAR;;AACA,cAAMqD,eAAe,GAAG,YAA2B;AACnD,gBAAMC,mBAAmB,GACtBC,IADG,CACEC,SAAS,IAAI;AAAEzB,YAAAA,mBAAmB,CAACyB,SAAD,CAAnB;AAAgC,WADjD,EAEHC,KAFG,CAEGC,KAAK,IAAI;AACd,kBAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD,WAJG,CAAN;AAKA,gBAAMrD,kBAAkB,CAACuD,gBAAnB,GACHL,IADG,CACE/B,UAAU,IAAI;AAClB,kBAAMqC,UAAqB,GAAG;AAACC,cAAAA,EAAE,EAAC,aAAJ;AAAmB3B,cAAAA,KAAK,EAAE,aAA1B;AAAyCI,cAAAA,WAAW,EAAE;AAAtD,aAA9B;AACA,kBAAMwB,aAAa,GAAG,CAACF,UAAD,EAAaG,MAAb,CAAoBxC,UAApB,CAAtB;AACAC,YAAAA,aAAa,CAACsC,aAAD,CAAb;AACAE,YAAAA,cAAc,CAACF,aAAD,EAAgB,aAAhB,EAA+B,KAA/B,CAAd;AACD,WANG,EAOHN,KAPG,CAOIS,SAAD,IAAwBC,0BAA0B,CAACD,SAAD,CAPrD,CAAN;AAQA7C,UAAAA,QAAQ,CAACrB,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACC,SAfD;;AAgBAqD,QAAAA,eAAe;AAChB;AACF,KArBD,IADc,CAuBjB;;AACE,GAxBQ,EAwBN,EAxBM,CAAT;;AA0BA,QAAMc,0BAA0B,GAAID,SAAD,IAAwB;AACzDvE,IAAAA,KAAK,CAAC+D,KAAN,CAAa,2CAAb;AACAnC,IAAAA,YAAY,CAAC2C,SAAD,CAAZ;AACD,GAHD;;AAKA,QAAMZ,mBAAmB,GAAG,MAA0B;AACpD,WAAOvC,WAAW,CAAC,yBAAD,EAA4B,WAA5B,EAAyCqD,YAAY,CAACC,QAAtD,EAAgED,YAAY,CAACE,SAA7E,CAAlB;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACtB,QAAG3C,SAAH,EAAc;AACZ,aAAO,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEA,SAAxB;AAAmC,QAAA,MAAM,EAAEwC,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEQ;AACN,aAAQtC,gBAAgB,IAAI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA5B;AACD;AACF,GAND;;AAQA,QAAMsC,YAA4B,GAAG;AAACC,IAAAA,QAAQ,EAAC,GAAV;AAAeC,IAAAA,SAAS,EAAC;AAAzB,GAArC;;AAEA,QAAME,QAAQ,GAAG,MAAOC,IAAP,IAAkC;AACjDpD,IAAAA,QAAQ,CAACrB,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACA,UAAM2C,KAA4B,GAAGf,SAArC;;AACA,UAAM8C,QAAQ,qBAAOD,IAAP;AAAa/C,MAAAA,QAAb;AAAuBiB,MAAAA,KAAvB;AAA8BvB,MAAAA;AAA9B,MAAd;;AACA,UAAMrB,cAAc,CAAC4E,UAAf,CAA0BD,QAA1B,EACLnB,IADK,CACA,MAAM;AAAEqB,MAAAA,uBAAuB;AAAK,KADpC,EAELnB,KAFK,CAEES,SAAD,IAAyB;AAAEW,MAAAA,qBAAqB,CAACX,SAAD,CAArB;AAAmC,KAF/D,CAAN;AAGA7C,IAAAA,QAAQ,CAACrB,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACD,GARD;;AAUA,QAAM4E,uBAAuB,GAAG,MAAM;AACpCjF,IAAAA,KAAK,CAACmF,OAAN,CAAe,8BAAf;AACA7D,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACD,GAHD;;AAKA,QAAM4D,qBAAqB,GAAIX,SAAD,IAAwB;AACpD,QAAIxD,cAAc,CAACwD,SAAD,CAAlB,EAA+B;AAC7BvE,MAAAA,KAAK,CAAC+D,KAAN,CAAa,uCAAb;AACArC,MAAAA,QAAQ,CAACV,0BAA0B,EAA3B,CAAR;AACD,KAHD,MAGO,IAAIF,iBAAiB,CAACyD,SAAD,CAArB,EAAkC;AACvCvE,MAAAA,KAAK,CAAC+D,KAAN,CAAa,eAAb;AACD,KAFM,MAEA;AACL/D,MAAAA,KAAK,CAAC+D,KAAN,CAAa,sCAAb;AACAnC,MAAAA,YAAY,CAAC2C,SAAD,CAAZ;AACD;AACF,GAVD;;AAYA,QAAMa,uBAAuB,GAAG,MAAO,iCAAvC;;AAEA,QAAMC,qBAAqB,GAAG,MAAM;AAClC7B,IAAAA,KAAK,CAACT,aAAD,EAAgB;AAAEuC,MAAAA,SAAS,EAAE;AAAb,KAAhB,CAAL;AACA,UAAMpB,UAAU,GAAGrC,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAE0D,IAAZ,CAAiBxD,QAAQ,IAAIA,QAAQ,CAACoC,EAAT,KAAgB,aAA7C,CAAnB;AACAnC,IAAAA,WAAW,CAACkC,UAAD,CAAX;AACAT,IAAAA,QAAQ,CAAC,eAAD,EAAkBS,UAAU,CAAE1B,KAA9B,EAAqC;AAAEgD,MAAAA,WAAW,EAAE;AAAf,KAArC,CAAR;AACD,GALD;;AAOA,QAAMC,oBAAoB,GAAEC,CAAD,IAAU;AACnCpB,IAAAA,cAAc,CAACzC,UAAD,EAAc6D,CAAd,EAAiB,IAAjB,CAAd;AACD,GAFD;;AAIA,QAAMpB,cAAc,GAAG,CAACzC,UAAD,EAA0B8D,UAA1B,EAA8CC,QAA9C,KAAkE;AACvF,UAAM7D,QAAQ,GAAGF,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAE0D,IAAZ,CAAiBxD,QAAQ,IAAIA,QAAQ,CAACoC,EAAT,KAAgBwB,UAA7C,CAAjB;AACA3D,IAAAA,WAAW,CAAC,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEoC,EAAV,MAAiB,aAAjB,GAAiClB,SAAjC,GAA4ClB,QAA7C,CAAX;AACA0B,IAAAA,QAAQ,CAAC,eAAD,EAAkB1B,QAAQ,CAAES,KAA5B,EAAmC;AAAEgD,MAAAA,WAAW,EAAEI;AAAf,KAAnC,CAAR;AACD,GAJD;;AAMA,QAAMC,sBAAsB,GAAG,MAAM;AACnCvE,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACD,GAFD;;AAIA,QAAMwE,iBAAiB,GAAI9C,KAAD,IAAsB;AAC9Cd,IAAAA,YAAY,CAACc,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAM+C,sBAAsB,GAAIhC,KAAD,IAAgB;AAC7C/D,IAAAA,KAAK,CAAC+D,KAAN,CAAa,0BAAb;AACD,GAFD;;AAIA,QAAMiC,iBAAiB,GAAG,MAAM;AAC9B9D,IAAAA,YAAY,CAACe,SAAD,CAAZ;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAE,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGtB,SAAS,IAAI,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEA,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhB,EAGE;AAAM,IAAA,EAAE,EAAE,kBAAV;AAA8B,IAAA,QAAQ,EAAEyB,YAAY,CAACyB,QAAD,CAApD;AAAgE,IAAA,UAAU,EAAE,IAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAC,iBAAtB;AAAwC,IAAA,QAAQ,EAAEY,oBAAlD;AAAwE,IAAA,SAAS,EAAC,UAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5D,UAAU,IAAIA,UAAU,CAACoE,GAAX,CAAgBlE,QAAD,IAE5B,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAEA,QAAQ,CAACoC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCpC,QAAQ,CAACS,KAAhD,CAFa,CADnB,CADF,EAQE;AAAO,IAAA,KAAK,EAAG;AAAC0D,MAAAA,KAAK,EAAE;AAAR,KAAf;AACE,IAAA,IAAI,EAAC,MADP;AACc,IAAA,QAAQ,MADtB;AACwB,IAAA,WAAW,EAAC;AADpC,KAEM/C,QAAQ,CAAC,eAAD,CAFd;AAGE,IAAA,SAAS,EAAG,qCAAoCG,MAAM,CAACR,aAAP,GAAuB,YAAvB,GAAsC,EAAG,EAH3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARF,CADF,EAeE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAmCQ,MAAM,CAACR,aAA1C,0DAAmC,sBAAsBqD,OAAzD,CAfF,CAFF,EAoBE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEIlE,SAAS,IACT;AAAQ,IAAA,SAAS,EAAC,4BAAlB;AAAgD,IAAA,OAAO,EAAG,MAAM+D,iBAAiB,EAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,EAOE,oBAAC,WAAD;AAAa,IAAA,aAAa,EAAEF,iBAA5B;AAA+C,IAAA,kBAAkB,EAAEC,sBAAnE;AAA2F,IAAA,MAAM,EAAEtB,YAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CApBF,EAgCE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCG,SAAS,EADV,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC;AAFd,KAGMzB,QAAQ,CAAC,OAAD,CAHd;AAIE,IAAA,SAAS,EAAG,gBAAeG,MAAM,CAACd,KAAP,GAAe,YAAf,GAA8B,EAAG,EAJ9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,EAUE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmCc,MAAM,CAACd,KAA1C,kDAAmC,cAAc2D,OAAjD,CAVF,CAhCF,EA6CE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC;AAFd,KAGMhD,QAAQ,CAAC,aAAD,CAHd;AAIE,IAAA,SAAS,EAAG,gBAAeG,MAAM,CAACV,WAAP,GAAqB,YAArB,GAAoC,EAAG,EAJpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAQE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAmCU,MAAM,CAACV,WAA1C,wDAAmC,oBAAoBuD,OAAvD,CARF,CA7CF,EAwDE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC;AAFd,KAGMhD,QAAQ,CAAC,MAAD,CAHd;AAIE,IAAA,SAAS,EAAG,gBAAeG,MAAM,CAACT,IAAP,GAAc,YAAd,GAA6B,EAAG,EAJ7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAQE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmCS,MAAM,CAACT,IAA1C,iDAAmC,aAAasD,OAAhD,CARF,CAxDF,EAmEE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAqC,IAAA,QAAQ,EAAE,CAAC5C,OAAhD;AAAyD,IAAA,IAAI,EAAC,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAIG/B,SAAS,IACR;AAAM,IAAA,SAAS,EAAC,8BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CAnEF,EA4EE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,mBAAlB;AAAuC,IAAA,QAAQ,EAAE,CAAC+B,OAAlD;AAA2D,IAAA,OAAO,EAAG,MAAM8B,qBAAqB,EAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAIG7D,SAAS,IACR;AAAM,IAAA,SAAS,EAAC,8BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CA5EF,CAHF,EA0FE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAE+B,OAAtB;AAA+B,IAAA,OAAO,EAAE6B,uBAAuB,EAA/D;AAAmE,IAAA,OAAO,EAAE,MAAMS,sBAAsB,EAAxG;AAA4G,IAAA,SAAS,EAAC,gBAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR,CA1FF,CADA,CADF;AAmGD,CAtPD;;AAuPA,eAAexE,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { IErrors, ICategory, ImageData, ImageSizeProps, minimumPostTitleLength, minimumPostDescriptionLength, \r\n          minimumPostBodyLength } from '../../types';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport Image from '../common/Image';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils'\r\n\r\nconst CreatePost = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading, user }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [postImage, setPostImage] = useState<ImageData>();\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required')\r\n      .min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\r\n    body: Yup.string().required('Content is required')\r\n      .min(minimumPostBodyLength, `Content must be at least ${minimumPostBodyLength} characters long`),\r\n    categoryTitle: Yup.string(),\r\n  });\r\n\r\n  type CreateSubmitForm = {\r\n    categoryTitle: string;\r\n    title: string;\r\n    description: string;\r\n    body: string;\r\n  };\r\n\r\n  const defaultValues = {title: '', description: '', body: '', categoryTitle: '', image: undefined};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    setValue,\r\n  } = useForm<CreateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!categories) {\r\n        dispatch(createActionLoading(true));\r\n        const fetchCategories = async (): Promise<void> => {\r\n        await getDefaultPostImage()\r\n          .then(imageData => { setpostDefaultImage(imageData);})\r\n          .catch(error => {\r\n            throw new Error(error);\r\n          });  \r\n        await CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            const allCategories = [noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            selectCategory(allCategories, 'no_category', false);\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        dispatch(createActionLoading(false));\r\n        }\r\n        fetchCategories();\r\n      }\r\n    })();\r\n // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    toast.error(`Categories reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const PostImage = () => {\r\n    if(postImage) {\r\n      return <ImageResize imageData={postImage} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  postDefaultImage && <Image imageData={postDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:200, maxHeight:200}\r\n  \r\n  const onSubmit = async (data: CreateSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    const image: ImageData | undefined = postImage;\r\n    const postData = {...data, category, image, user};\r\n    await PostApiService.createPost(postData)\r\n    .then(() => { handleSubmitFormSuccess(); })\r\n    .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n    dispatch(createActionLoading(false));\r\n  } \r\n\r\n  const handleSubmitFormSuccess = () => {\r\n    toast.success(`Post created successfully...`);\r\n    navigate('/'); \r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`Post creation failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`Post creation failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const cancelCreatePostMessage = () => `post creation and loose changes`;\r\n\r\n  const handleClearCreatePost = () => {\r\n    reset(defaultValues, { keepDirty: false});\r\n    const noCategory = categories?.find(category => category.id === 'no_category');\r\n    setCategory(noCategory);\r\n    setValue('categoryTitle', noCategory!.title, { shouldDirty: false });\r\n  }\r\n\r\n  const handleCategorySelect=(e: any)=>{\r\n    selectCategory(categories!, e, true);\r\n  }\r\n\r\n  const selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n    const category = categories?.find(category => category.id === categoryId);\r\n    setCategory(category?.id === 'no_category' ? undefined: category);\r\n    setValue('categoryTitle', category!.title, { shouldDirty: setDirty });\r\n  }\r\n\r\n  const handleCancelCreatePost = () => {\r\n    navigate('/');   \r\n  };\r\n\r\n  const handleImageUpload = (image: ImageData) => {\r\n    setPostImage(image);\r\n  }\r\n\r\n  const handleImageUploadError = (error: any) => {\r\n    toast.error(`User image upload failed`);\r\n  }\r\n  \r\n  const handleDeleteImage = () => {\r\n    setPostImage(undefined);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <div className={\"col-md-12 form-wrapper\"}>\r\n      <h2> Create Post </h2>\r\n      {errorList && <ListErrors errors={errorList} />}\r\n      <form id={\"create-post-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n        \r\n        <div className=\"form-group \">\r\n          <div className=\"row\">\r\n            <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                {categories && categories.map((category: ICategory) => \r\n                (\r\n                  <Dropdown.Item eventKey={category.id}>{category.title}</Dropdown.Item>\r\n                ))\r\n              }\r\n            </DropdownButton>\r\n            <input style={ {float: 'right'} }    \r\n              type=\"text\" disabled  placeholder=\"no category selected\" \r\n              {...register('categoryTitle')}\r\n              className={`col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`}           \r\n            />\r\n          </div>\r\n          <div className=\"invalid-feedback\">{errors.categoryTitle?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-4\">\r\n          <div className=\"row\">\r\n            <label className=\"col-md-2\"> Image: </label>\r\n            { postImage && \r\n              <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleDeleteImage() } >\r\n                Delete Image\r\n              </button>  \r\n            }  \r\n            <ImageUpload onImageUpload={handleImageUpload} onImageUploadError={handleImageUploadError} resize={imageMaxSize}/>                \r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-12\">\r\n        {PostImage()}\r\n        <br/>\r\n          <label htmlFor=\"title\"> Title </label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder=\"Enter title\"\r\n            {...register('title')}\r\n            className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-12\">\r\n          <label htmlFor=\"description\"> Description </label>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter description\"\r\n            {...register('description')}\r\n            className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-12\">\r\n          <label htmlFor=\"body\"> Write Content </label>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter body\" \r\n            {...register('body')}\r\n            className={`form-control ${errors.body ? 'is-invalid' : ''}`}           \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.body?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-1 pull-right\">\r\n          <button className=\"btn btn-success\"  disabled={!isDirty} type=\"submit\">\r\n            Create Post\r\n          </button>\r\n          {isLoading &&\r\n            <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n          }\r\n        </div>\r\n  \r\n        <div className=\"form-group col-md-1 pull-right\">\r\n          <button className=\"btn btn-secondary\"  disabled={!isDirty} onClick={ () => handleClearCreatePost() } >\r\n            Clear\r\n          </button>\r\n          {isLoading &&\r\n            <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n          }\r\n        </div>\r\n\r\n      </form>\r\n\r\n      <div className=\"form-group col-md-1 pull-right\">\r\n              <CancelButton prompt={isDirty} message={cancelCreatePostMessage()} onClick={() => handleCancelCreatePost()} className=\"btn btn-danger\">Cancel</CancelButton>\r\n            </div>\r\n\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\nexport default CreatePost\r\n"]},"metadata":{},"sourceType":"module"}