{"ast":null,"code":"import API, { TOKEN_KEY, setToken } from './APIUtils';\nimport { setLocalStorage } from '../../utils/utils';\n\nfunction handleUserData(user) {\n  setLocalStorage(TOKEN_KEY, user.token);\n  setToken(user.token);\n}\n\nasync function getCurrentUser() {\n  return new Promise((resolve, reject) => {\n    API.get('/auth/user').then(response => {\n      handleUserData(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nasync function login(email, password) {\n  return new Promise((resolve, reject) => {\n    API.post('/auth/login', {\n      user: {\n        email,\n        password\n      }\n    }).then(response => {\n      handleUserData(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nasync function register(username, email, password) {\n  return new Promise((resolve, reject) => {\n    API.post('/auth/register', {\n      user: {\n        username,\n        email,\n        password\n      }\n    }).then(response => {\n      handleUserData(response.data);\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nfunction logout() {\n  localStorage.removeItem(TOKEN_KEY);\n  setToken(null);\n}\n\nconst AUTHAPI = {\n  getCurrentUser,\n  login,\n  register,\n  logout\n};\nexport default AUTHAPI;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/AuthAPI.ts"],"names":["API","TOKEN_KEY","setToken","setLocalStorage","handleUserData","user","token","getCurrentUser","Promise","resolve","reject","get","then","response","data","catch","error","login","email","password","post","register","username","logout","localStorage","removeItem","AUTHAPI"],"mappings":"AAAA,OAAOA,GAAP,IAAcC,SAAd,EAA0BC,QAA1B,QAA0C,YAA1C;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAAoC;AAClCF,EAAAA,eAAe,CAACF,SAAD,EAAYI,IAAI,CAACC,KAAjB,CAAf;AACAJ,EAAAA,QAAQ,CAACG,IAAI,CAACC,KAAN,CAAR;AACD;;AAED,eAAgBC,cAAhB,GAAgD;AAC9C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,IAAAA,GAAG,CAACW,GAAJ,CAAc,YAAd,EACGC,IADH,CACQC,QAAQ,IAAI;AAChBT,MAAAA,cAAc,CAACS,QAAQ,CAACC,IAAV,CAAd;AACAL,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdN,MAAAA,MAAM,CAACM,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,eAAeC,KAAf,CAAqBC,KAArB,EAAoCC,QAApC,EAAqE;AACnE,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,IAAAA,GAAG,CAACoB,IAAJ,CAAe,aAAf,EAA8B;AAACf,MAAAA,IAAI,EAAE;AAAEa,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAP,KAA9B,EACGP,IADH,CACQC,QAAQ,IAAI;AAChBT,MAAAA,cAAc,CAACS,QAAQ,CAACC,IAAV,CAAd;AACAL,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdN,MAAAA,MAAM,CAACM,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,eAAeK,QAAf,CAAwBC,QAAxB,EAA0CJ,KAA1C,EAAyDC,QAAzD,EAA2F;AACzF,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,IAAAA,GAAG,CAACoB,IAAJ,CAAe,gBAAf,EAAiC;AAAEf,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,QAAF;AAAYJ,QAAAA,KAAZ;AAAmBC,QAAAA;AAAnB;AAAR,KAAjC,EACGP,IADH,CACQC,QAAQ,IAAI;AAChBT,MAAAA,cAAc,CAACS,QAAQ,CAACC,IAAV,CAAd;AACAL,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,KAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdN,MAAAA,MAAM,CAACM,KAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,SAASO,MAAT,GAAkB;AAChBC,EAAAA,YAAY,CAACC,UAAb,CAAwBxB,SAAxB;AACAC,EAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AAED,MAAMwB,OAAO,GAAG;AAACnB,EAAAA,cAAD;AAAiBU,EAAAA,KAAjB;AAAwBI,EAAAA,QAAxB;AAAkCE,EAAAA;AAAlC,CAAhB;AAEA,eAAeG,OAAf","sourcesContent":["import API, { TOKEN_KEY , setToken } from './APIUtils';\r\nimport { User } from '../../types';\r\nimport { setLocalStorage } from '../../utils/utils';\r\n\r\nfunction handleUserData(user: User) {\r\n  setLocalStorage(TOKEN_KEY, user.token!);\r\n  setToken(user.token!);\r\n}\r\n\r\nasync function  getCurrentUser(): Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.get<User>('/auth/user')\r\n      .then(response => {\r\n        handleUserData(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nasync function login(email: string, password: string): Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.post<User>('/auth/login', {user: { email, password }})\r\n      .then(response => {\r\n        handleUserData(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nasync function register(username: string, email: string, password: string) : Promise<User> {\r\n  return new Promise((resolve, reject) => {\r\n    API.post<User>('/auth/register', { user: { username, email, password }})\r\n      .then(response => {\r\n        handleUserData(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nfunction logout() {\r\n  localStorage.removeItem(TOKEN_KEY);\r\n  setToken(null);\r\n}\r\n\r\nconst AUTHAPI = {getCurrentUser, login, register, logout}\r\n\r\nexport default AUTHAPI\r\n"]},"metadata":{},"sourceType":"module"}