{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\Register.tsx\";\nimport React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport useAuth from '../../contexts/auth';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createActionLoadUser, createActionLoading } from '../../reducers/auth';\nimport { checkUnauthorized, checkForbidden, checkTimeout } from '../../utils/html.response.utils';\nimport ListErrors from '../common/ListErrors';\nimport { minimumUserNameLength, minimumPasswordLength, minimumEmailLength } from \"../../types\";\n\nconst Register = () => {\n  var _errors$username, _errors$email, _errors$password, _errors$password2;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    password: Yup.string().required('Password is required').min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\n    confirm_password: Yup.string().required('Confirmation password is required').min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`)\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n  const navigate = useNavigate();\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      const message = apiErrors['message'];\n      toast.error(`Registration failed: ${message}`);\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else if (checkTimeout(apiErrors)) {\n      toast.error(`Request timeout`);\n    } else {\n      toast.error(`User registration failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    const username = data.username,\n          email = data.email,\n          password = data.password;\n    await AUTHAPI.register(username, email, password).then(user => {\n      toast.success(`${user.username} is registered`);\n      dispatch(createActionLoadUser(user));\n      navigate('/login');\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    }).finally(() => dispatch(createActionLoading(false)));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"auth-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 offset-md-3 col-xs-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"p\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Have an account?\")), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Enter your user name:\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({\n    type: \"username\",\n    placeholder: \"Your user name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Enter your email:\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({\n    type: \"email\",\n    placeholder: \"Your email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Enter your password:\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Your password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"confirm_password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Enter your password again:\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Your password again\"\n  }, register('confirm_password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, (_errors$password2 = errors.password) === null || _errors$password2 === void 0 ? void 0 : _errors$password2.message)), React.createElement(\"button\", {\n    className: \"btn btn-lg btn-primary pull-xs-right\",\n    type: \"submit\",\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Register\"))))));\n};\n\nexport default Register;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/Register.tsx"],"names":["React","useForm","Link","useNavigate","AUTHAPI","useAuth","toast","Yup","yupResolver","createActionLoadUser","createActionLoading","checkUnauthorized","checkForbidden","checkTimeout","ListErrors","minimumUserNameLength","minimumPasswordLength","minimumEmailLength","Register","useState","errorList","setErrorList","isLoading","state","dispatch","validationSchema","object","shape","username","string","required","min","email","password","confirm_password","resolver","register","handleSubmit","errors","formState","navigate","handleSubmitFormError","apiErrors","message","error","onSubmit","data","then","user","success","catch","finally"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport useAuth from '../../contexts/auth';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { createActionLoadUser, createActionLoading } from '../../reducers/auth';\r\nimport { checkUnauthorized, checkForbidden, checkTimeout } from '../../utils/html.response.utils';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, User, minimumUserNameLength, minimumPasswordLength, minimumEmailLength } from \"../../types\";\r\n\r\nconst Register = () => {\r\n\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const {\r\n    state: { isLoading },\r\n    dispatch,\r\n  } = useAuth();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required('User name is required')\r\n    .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n    email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n    password: Yup.string().required('Password is required')\r\n      .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\r\n    confirm_password: Yup.string().required('Confirmation password is required')\r\n      .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\r\n  });\r\n\r\n  type RegisterSubmitForm = {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    confirm_password: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm<RegisterSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      const message = apiErrors['message'];\r\n      toast.error(`Registration failed: ${message}`);\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else if (checkTimeout(apiErrors)) {\r\n      toast.error(`Request timeout`);\r\n    } else {\r\n      toast.error(`User registration failed, see error list`);\r\n      setErrorList(apiErrors);\r\n      }\r\n  }\r\n\r\n  const onSubmit = async (data: RegisterSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    const { username, email, password } = data;\r\n    await AUTHAPI.register(username, email, password)\r\n      .then(\r\n        (user: User) => {\r\n          toast.success(`${user.username} is registered`);\r\n          dispatch(createActionLoadUser(user));\r\n          navigate('/login');    \r\n        }\r\n      )\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); })\r\n      .finally(() => dispatch(createActionLoading(false))); \r\n } \r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">Register</h1>\r\n            <p className=\"text-xs-center\">\r\n              <Link to=\"/login\">Have an account?</Link>\r\n            </p>\r\n            {errorList && <ListErrors errors={errorList} />}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <fieldset className=\"form-group\">\r\n                <h4 className=\"username\">\r\n                  <span>\r\n                    Enter your user name:\r\n                  </span>\r\n                </h4>\r\n                <br/>\r\n                <input\r\n                      type=\"username\"\r\n                      placeholder=\"Your user name\"\r\n                      {...register('username')}\r\n                      className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <h4 className=\"email\">\r\n                  <span>\r\n                    Enter your email:\r\n                  </span>\r\n                </h4>\r\n                <br/>\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Your email\"\r\n                  {...register('email')}\r\n                  className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n              <h4 className=\"password\">\r\n                  <span>\r\n                    Enter your password:\r\n                  </span>\r\n                </h4>\r\n                <br/>\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Your password\"\r\n                    {...register('password')}\r\n                    className={`form-control ${errors.password ? 'is-invalid' : ''}`} \r\n                  />\r\n                <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n             </fieldset>\r\n             <fieldset className=\"form-group\">\r\n              <h4 className=\"confirm_password\">\r\n                  <span>\r\n                    Enter your password again:\r\n                  </span>\r\n                </h4>\r\n                <br/>\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Your password again\"\r\n                    {...register('confirm_password')}\r\n                    className={`form-control ${errors.password ? 'is-invalid' : ''}`} \r\n                  />\r\n                <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n             </fieldset>\r\n\r\n              <button\r\n                className=\"btn btn-lg btn-primary pull-xs-right\"\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n              >\r\n                Register\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}