{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\ListPostsForUser.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport useAuth from '../../contexts/auth';\nimport { createActionLoading } from '../../reducers/auth';\nimport { resizeImage } from '../../utils/image.utils';\nimport ListErrors from '../common/ListErrors';\nimport { PostApiService } from '../../services/api/PostApiService';\nimport { DropdownButton, Dropdown, Table, Container } from 'react-bootstrap';\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../../reducers/auth';\nimport ImageResize from '../common/ImageResize';\nimport Image from '../common/Image';\nimport { checkUnauthorized, checkSessionExpired } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\n\nconst ListPostsForUser = () => {\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        user = _useAuth$state.user,\n        isLoading = _useAuth$state.isLoading,\n        categoryFilter = _useAuth$state.categoryFilter,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedPosts = _useState2[0],\n        setSelectedPosts = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState('All'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        categoryTitle = _useState8[0],\n        setCategoryTitle = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        postTitleFilter = _useState10[0],\n        setPostTitleFilter = _useState10[1];\n\n  const _useState11 = useState(),\n        _useState12 = _slicedToArray(_useState11, 2),\n        postDefaultImage = _useState12[0],\n        setpostDefaultImage = _useState12[1];\n\n  useEffect(() => {\n    (async () => {\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          await CategoryApiService.getAllCategories().then(categories => {\n            const all = {\n              id: 'all',\n              title: 'All',\n              description: ''\n            };\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            const allCategories = [all, noCategory].concat(categories);\n            setCategories(allCategories);\n\n            if (categoryFilter) {\n              selectCategory(allCategories, categoryFilter.id, false);\n            } else {\n              selectCategory(allCategories, 'all', false);\n            }\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n        };\n\n        fetchCategories();\n      }\n\n      setPostTitleFilter(postTitleFilter);\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      await getDefaultPostImage().then(imageData => {\n        setpostDefaultImage(imageData);\n      }).catch(error => {\n        throw new Error(error);\n      });\n\n      if (category) {\n        dispatch(createActionLoading(true));\n        let fetchedPosts = [];\n        await PostApiService.finManyPostsForUser(user.id, postTitleFilter).then(posts => fetchedPosts = posts).catch(apiErrors => handleFetchPostError(apiErrors));\n\n        if (category.id === 'all') {\n          setSelectedPosts(fetchedPosts);\n        } else if (category.id === 'no_category') {\n          setSelectedPosts(fetchedPosts.filter(post => !post.category));\n        } else {\n          setSelectedPosts(fetchedPosts.filter(post => post.category && post.category.id === category.id));\n        }\n\n        dispatch(createActionLoading(false));\n      }\n    };\n\n    fetchPosts(); // eslint-disable-next-line\n  }, [category, postTitleFilter]);\n\n  const handleApiErrors = (apiErrors, process) => {\n    if (checkSessionExpired(apiErrors)) {\n      toast.error(`${process} failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`${process} failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const handleFetchCategoriesError = apiErrors => {\n    handleApiErrors(apiErrors, 'Categories reading');\n  };\n\n  const handleFetchPostError = apiErrors => {\n    handleApiErrors(apiErrors, 'Post reading');\n  };\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const PostImage = post => {\n    if (post.image) {\n      return React.createElement(ImageResize, {\n        imageData: post.image,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    } else {\n      return postDefaultImage && React.createElement(Image, {\n        imageData: postDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }\n  };\n\n  const imageMaxSize = {\n    maxWidth: 40,\n    maxHeight: 40\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories === null || categories === void 0 ? void 0 : categories.find(category => category.id === categoryId);\n    setCategoryTitle(category.title);\n    setCategory(category);\n    dispatch(createActionSetCategoryFilter(category));\n  };\n\n  const handlePostTitleFilterChange = filter => {\n    setPostTitleFilter(filter);\n    dispatch(createActionSetPostTitleFilter(filter));\n  };\n\n  return React.createElement(\"section\", {\n    className: \"blog-area section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(Container, {\n    className: \"col-md-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(\"div\", {\n    key: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, category.title)))), React.createElement(\"input\", {\n    style: {\n      float: 'right'\n    },\n    className: \"col-md-2\",\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\",\n    value: categoryTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"col-md-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Filter:\")), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"postTitleFilter\",\n    value: postTitleFilter,\n    placeholder: \"enter some part of post title text\",\n    className: \"col-md-2\",\n    onChange: e => handlePostTitleFilterChange(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"col-md-2 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, !isLoading && isAuthenticated && React.createElement(Link, {\n    to: `/post/create`,\n    className: \"btn btn-sm btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Create Post\")))), !isLoading && selectedPosts && selectedPosts.map(post => React.createElement(\"div\", {\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"col-auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Owner\"), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Category\"), React.createElement(\"th\", {\n    className: \"col-md-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"th\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Actions\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, PostImage(post)), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, post.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, post.user.username), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, post.category ? post.category.title : 'No category assigned'), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, post.description), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: `/post/${post.id}`,\n    className: \"btn btn-sm btn-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"View\"))))))));\n};\n\nexport default ListPostsForUser;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/ListPostsForUser.tsx"],"names":["React","useState","useEffect","Link","toast","CategoryApiService","useAuth","createActionLoading","resizeImage","ListErrors","PostApiService","DropdownButton","Dropdown","Table","Container","createActionSetCategoryFilter","createActionSetPostTitleFilter","ImageResize","Image","checkUnauthorized","checkSessionExpired","createActionSessionExpired","ListPostsForUser","state","user","isLoading","categoryFilter","isAuthenticated","dispatch","errorList","setErrorList","selectedPosts","setSelectedPosts","categories","setCategories","category","setCategory","categoryTitle","setCategoryTitle","postTitleFilter","setPostTitleFilter","postDefaultImage","setpostDefaultImage","fetchCategories","getAllCategories","then","all","id","title","description","noCategory","allCategories","concat","selectCategory","catch","apiErrors","handleFetchCategoriesError","fetchPosts","getDefaultPostImage","imageData","error","Error","fetchedPosts","finManyPostsForUser","posts","handleFetchPostError","filter","post","handleApiErrors","process","imageMaxSize","maxWidth","maxHeight","PostImage","image","handleCategorySelect","e","categoryId","setDirty","find","handlePostTitleFilterChange","map","float","target","value","username"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { IPost, ICategory, ImageData } from \"../../types\";\r\nimport useAuth from '../../contexts/auth';\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, ImageSizeProps } from '../../types';\r\nimport { PostApiService } from '../../services/api/PostApiService';\r\nimport { DropdownButton, Dropdown, Table, Container } from 'react-bootstrap';\r\nimport { createActionSetCategoryFilter, createActionSetPostTitleFilter } from '../../reducers/auth';\r\nimport ImageResize from '../common/ImageResize';\r\nimport Image from '../common/Image';\r\nimport { checkUnauthorized, checkSessionExpired } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\n\r\nconst ListPostsForUser = () => {\r\n\r\n  const { state: { user, isLoading, categoryFilter, isAuthenticated }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const [selectedPosts, setSelectedPosts] = useState<IPost[]>([]);\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [categoryTitle, setCategoryTitle] = useState<string>('All');\r\n  const [postTitleFilter, setPostTitleFilter] = useState<string>('');\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n        await CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const all: ICategory = {id:'all', title: 'All', description: ''};\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            const allCategories = [all, noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            if (categoryFilter) {\r\n              selectCategory(allCategories, categoryFilter.id!, false);\r\n            } else {\r\n              selectCategory(allCategories, 'all', false);\r\n            }            \r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        }\r\n        fetchCategories();\r\n      }\r\n      setPostTitleFilter(postTitleFilter);\r\n      dispatch(createActionLoading(false));\r\n    })();\r\n // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async (): Promise<void> => {\r\n      await getDefaultPostImage()\r\n      .then(imageData => { setpostDefaultImage(imageData);})\r\n      .catch(error => {\r\n        throw new Error(error);\r\n      });\r\n      if (category) {\r\n        dispatch(createActionLoading(true));\r\n        let fetchedPosts: IPost[] = [];\r\n        await PostApiService.finManyPostsForUser(user!.id!, postTitleFilter)\r\n        .then(posts => fetchedPosts = posts)\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        if ( category.id === 'all') {\r\n          setSelectedPosts(fetchedPosts);\r\n        } \r\n        else if (category.id === 'no_category') {\r\n          setSelectedPosts(fetchedPosts.filter(post => !post.category));\r\n        } \r\n        else {\r\n          setSelectedPosts(fetchedPosts.filter(post => post.category && post.category.id === (category.id)));\r\n        }\r\n        dispatch(createActionLoading(false));\r\n      }\r\n    }\r\n    fetchPosts();\r\n  // eslint-disable-next-line\r\n  }, [category, postTitleFilter])\r\n\r\n  const handleApiErrors = (apiErrors: IErrors, process: string) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      toast.error(`${process} failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`${process} failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Categories reading');\r\n  }\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    handleApiErrors(apiErrors, 'Post reading');\r\n  }\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const PostImage = (post: IPost) => {\r\n    if(post.image) {\r\n      return <ImageResize imageData={post.image} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  postDefaultImage && <Image imageData={postDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:40, maxHeight:40};\r\n\r\n  const handleCategorySelect=(e: any)=>{\r\n    selectCategory(categories!, e, true);\r\n  }\r\n\r\n  const selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n    const category = categories?.find(category => category.id === categoryId);\r\n    setCategoryTitle(category!.title!);\r\n    setCategory(category);\r\n    dispatch(createActionSetCategoryFilter(category!));\r\n  }\r\n\r\n  const handlePostTitleFilterChange = (filter: string)=>{\r\n    setPostTitleFilter(filter);\r\n    dispatch(createActionSetPostTitleFilter(filter));\r\n  }\r\n\r\n  return (\r\n    <section className=\"blog-area section\">\r\n      {errorList && <ListErrors errors={errorList} />}\r\n      <Container  className=\"col-md-10\">\r\n        <div className=\"form-group \">\r\n          <div className=\"row\">\r\n            <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                {categories && categories.map((category: ICategory) => \r\n                (\r\n                  <div key={category.id}>\r\n                    <Dropdown.Item eventKey={category.id}>\r\n                      {category.title}\r\n                    </Dropdown.Item>\r\n                  </div>\r\n                ))\r\n              }\r\n            </DropdownButton>\r\n            <input \r\n              style={{float: 'right'}} \r\n              className=\"col-md-2\"   \r\n              type=\"text\" \r\n              disabled  \r\n              placeholder=\"no category selected\" \r\n              value={categoryTitle}        \r\n            />\r\n            <h4 className=\"col-md-1\">\r\n              <span>\r\n                Filter:\r\n              </span>\r\n            </h4>\r\n            <input  \r\n              type=\"text\" \r\n              name=\"postTitleFilter\" \r\n              value={postTitleFilter} \r\n              placeholder=\"enter some part of post title text\" \r\n              className=\"col-md-2\" \r\n              onChange={e => handlePostTitleFilterChange(e.target.value)}      \r\n            />\r\n            <div className=\"col-md-2 pull-right\">\r\n              {\r\n                !isLoading && isAuthenticated &&\r\n                (\r\n                  <Link to={`/post/create`} className=\"btn btn-sm btn-primary\">Create Post</Link>\r\n                )\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {\r\n          !isLoading && selectedPosts && selectedPosts.map((post: IPost) =>    \r\n          (\r\n            <div key={post.id}>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <th className=\"col-auto\"/>\r\n                  <th className=\"col-md-2\">\r\n                      Name\r\n                  </th>\r\n                  <th className=\"col-md-2\">\r\n                      Owner\r\n                  </th>\r\n                  <th className=\"col-md-2\">\r\n                      Category\r\n                  </th>\r\n                  <th className=\"col-md-10\">\r\n                    Description\r\n                  </th>\r\n                  <th className=\"col-md-2\">\r\n                    Actions\r\n                  </th>\r\n                </thead>\r\n                <tr>\r\n                  <td>\r\n                    {PostImage(post)}\r\n                  </td>\r\n                  <td>\r\n                      {post.title}\r\n                  </td>\r\n                  <td>\r\n                      {post.user!.username}\r\n                  </td>\r\n                  <td>\r\n                  {post.category ? post.category.title : 'No category assigned'}\r\n                  </td>\r\n                  <td>\r\n                      {post.description}\r\n                  </td>\r\n                  <td>\r\n                      <Link to={`/post/${post.id}`} className=\"btn btn-sm btn-info\">View</Link>\r\n                  </td>\r\n              </tr>\r\n            </Table>\r\n          </div>\r\n          ))\r\n        }\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ListPostsForUser;\r\n"]},"metadata":{},"sourceType":"module"}