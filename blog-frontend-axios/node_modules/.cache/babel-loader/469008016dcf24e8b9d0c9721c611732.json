{"ast":null,"code":"import { StatusCodes } from 'http-status-codes';\nimport { isTokenValid } from '../services/api/AuthApiService';\nimport TokenService from '../services/api/TokenService';\nexport function checkSessionExpired(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n\n  if (statusCode === StatusCodes.UNAUTHORIZED) {\n    const token = errors['token'];\n\n    if (token) {\n      if (!isTokenValid(token)) {\n        // Token has expired but session could be extended if user made a request after\n        // the last time the session was set/reset. \n        try {\n          const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\n        } catch (error) {\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\nexport function checkNotFound(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.NOT_FOUND;\n}\nexport function checkUnauthorized(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.UNAUTHORIZED;\n}\nexport function checkForbidden(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.FORBIDDEN;\n}\nexport function checkTimeout(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.REQUEST_TIMEOUT;\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/html.response.utils.ts"],"names":["StatusCodes","isTokenValid","TokenService","checkSessionExpired","errors","status","statusCode","parseInt","UNAUTHORIZED","token","lastResponseTimeStamp","getHttpResponseTimeStamp","error","checkNotFound","NOT_FOUND","checkUnauthorized","checkForbidden","FORBIDDEN","checkTimeout","REQUEST_TIMEOUT"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAGA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAuD;AAC1D,QAAMC,MAAM,GAAGD,MAAM,CAAC,QAAD,CAArB;AACA,QAAME,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;;AACA,MAAGC,UAAU,KAAKN,WAAW,CAACQ,YAA9B,EAA4C;AACxC,UAAMC,KAAK,GAAGL,MAAM,CAAC,OAAD,CAApB;;AACA,QAAIK,KAAJ,EAAW;AACP,UAAI,CAACR,YAAY,CAACQ,KAAD,CAAjB,EAA0B;AACtB;AACA;AACA,YAAI;AACA,gBAAMC,qBAAqB,GAAGR,YAAY,CAACS,wBAAb,EAA9B;AACH,SAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,iBAAO,IAAP;AACH;AACJ;AACJ,KAVD,MAUO;AACH,aAAO,KAAP;AACH;AACJ,GAfD,MAeO;AACH,WAAO,KAAP;AACH;AACJ;AAED,OAAO,SAASC,aAAT,CAAuBT,MAAvB,EAAiD;AACxD,QAAMC,MAAM,GAAGD,MAAM,CAAC,QAAD,CAArB;AACA,QAAME,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKN,WAAW,CAACc,SAAlC;AACC;AAED,OAAO,SAASC,iBAAT,CAA2BX,MAA3B,EAAqD;AACxD,QAAMC,MAAM,GAAGD,MAAM,CAAC,QAAD,CAArB;AACA,QAAME,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKN,WAAW,CAACQ,YAAlC;AACH;AAED,OAAO,SAASQ,cAAT,CAAwBZ,MAAxB,EAAkD;AACrD,QAAMC,MAAM,GAAGD,MAAM,CAAC,QAAD,CAArB;AACA,QAAME,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKN,WAAW,CAACiB,SAAlC;AACH;AAED,OAAO,SAASC,YAAT,CAAsBd,MAAtB,EAAgD;AACnD,QAAMC,MAAM,GAAGD,MAAM,CAAC,QAAD,CAArB;AACA,QAAME,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKN,WAAW,CAACmB,eAAlC;AACH","sourcesContent":["import { StatusCodes } from 'http-status-codes';\r\nimport { IErrors } from '../types';\r\nimport { isTokenValid } from '../services/api/AuthApiService';\r\nimport TokenService from '../services/api/TokenService';\r\nimport { HEADER_HTTP_RESPONSE_TIMEOUT } from \"../config/api.config\";\r\n\r\nexport function checkSessionExpired(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    if(statusCode === StatusCodes.UNAUTHORIZED) {\r\n        const token = errors['token'] as any;\r\n        if (token) {\r\n            if (!isTokenValid(token)) {\r\n                // Token has expired but session could be extended if user made a request after\r\n                // the last time the session was set/reset. \r\n                try {\r\n                    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\r\n                } catch (error) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function checkNotFound(errors: IErrors): boolean {\r\nconst status = errors['status'] as any;\r\nconst statusCode = parseInt(status);\r\nreturn statusCode === StatusCodes.NOT_FOUND;\r\n}\r\n\r\nexport function checkUnauthorized(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    return statusCode === StatusCodes.UNAUTHORIZED;\r\n}\r\n\r\nexport function checkForbidden(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    return statusCode === StatusCodes.FORBIDDEN;\r\n}\r\n\r\nexport function checkTimeout(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    return statusCode === StatusCodes.REQUEST_TIMEOUT;\r\n}"]},"metadata":{},"sourceType":"module"}