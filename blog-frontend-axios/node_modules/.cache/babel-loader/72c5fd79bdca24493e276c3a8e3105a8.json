{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport AuthApiService from '../services/api/AuthApiService';\nimport TokenService from '../services/api/TokenService';\n\nfunction getSessionDuration(token) {\n  const decoded_jwt = jwtDecode(token);\n  return decoded_jwt.expiresIn;\n}\n\nexport function wasUserActiveDuringCurrentSession(token) {\n  try {\n    const sessionDuration = getSessionDuration(token);\n    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\n    const lastRequestTime = lastResponseTimeStamp.valueOf() / 1000;\n    const current_time = Date.now().valueOf() / 1000;\n    const lastAccessDelay = current_time - lastRequestTime;\n    return lastAccessDelay < sessionDuration;\n  } catch (_) {\n    return false;\n  }\n}\nexport function getSessionRemainingTimeBeforeExpiration(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return Math.min(0, decoded_jwt.exp - current_time);\n  } catch (_) {\n    return 0;\n  }\n}\nexport function automaticSessionRenewal(token) {\n  const sessionDuration = getSessionDuration(token);\n  const remainingTime = getSessionRemainingTimeBeforeExpiration(token);\n\n  if (remainingTime < sessionDuration * 0.10 && wasUserActiveDuringCurrentSession(token)) {\n    AuthApiService.extendUserSession(sessionDuration);\n  }\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/session.util.ts"],"names":["jwtDecode","AuthApiService","TokenService","getSessionDuration","token","decoded_jwt","expiresIn","wasUserActiveDuringCurrentSession","sessionDuration","lastResponseTimeStamp","getHttpResponseTimeStamp","lastRequestTime","valueOf","current_time","Date","now","lastAccessDelay","_","getSessionRemainingTimeBeforeExpiration","Math","min","exp","automaticSessionRenewal","remainingTime","extendUserSession"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAgD;AAC5C,QAAMC,WAAuB,GAAGL,SAAS,CAAaI,KAAb,CAAzC;AACA,SAAOC,WAAW,CAACC,SAAnB;AACH;;AAED,OAAO,SAASC,iCAAT,CAA2CH,KAA3C,EAAmE;AACtE,MAAI;AACA,UAAMI,eAAe,GAAGL,kBAAkB,CAACC,KAAD,CAA1C;AACA,UAAMK,qBAAqB,GAAGP,YAAY,CAACQ,wBAAb,EAA9B;AACA,UAAMC,eAAe,GAAGF,qBAAqB,CAACG,OAAtB,KAAkC,IAA1D;AACA,UAAMC,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWH,OAAX,KAAuB,IAA5C;AACA,UAAMI,eAAe,GAAGH,YAAY,GAAGF,eAAvC;AACA,WAAOK,eAAe,GAAGR,eAAzB;AACH,GAPD,CAOE,OAAOS,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACJ;AAED,OAAO,SAASC,uCAAT,CAAiDd,KAAjD,EAAgE;AACnE,MAAI;AACF,UAAMC,WAAuB,GAAGL,SAAS,CAAaI,KAAb,CAAzC;AACA,UAAMS,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWH,OAAX,KAAuB,IAA5C;AACA,WAAOO,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYf,WAAW,CAACgB,GAAZ,GAAkBR,YAA9B,CAAP;AACD,GAJD,CAIE,OAAOI,CAAP,EAAU;AACV,WAAO,CAAP;AACD;AACJ;AAED,OAAO,SAASK,uBAAT,CAAiClB,KAAjC,EAAgD;AACnD,QAAMI,eAAe,GAAGL,kBAAkB,CAACC,KAAD,CAA1C;AACA,QAAMmB,aAAa,GAAGL,uCAAuC,CAACd,KAAD,CAA7D;;AACA,MAAImB,aAAa,GAAGf,eAAe,GAAG,IAAlC,IAA0CD,iCAAiC,CAACH,KAAD,CAA/E,EAAwF;AACpFH,IAAAA,cAAc,CAACuB,iBAAf,CAAiChB,eAAjC;AACH;AACJ","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { JWTPayload } from '../types';\r\nimport AuthApiService from '../services/api/AuthApiService';\r\nimport TokenService from '../services/api/TokenService';\r\n\r\nfunction getSessionDuration(token: any): number {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token); \r\n    return decoded_jwt.expiresIn;\r\n}\r\n\r\nexport function wasUserActiveDuringCurrentSession(token: string): boolean {\r\n    try {\r\n        const sessionDuration = getSessionDuration(token);\r\n        const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\r\n        const lastRequestTime = lastResponseTimeStamp.valueOf() / 1000;\r\n        const current_time = Date.now().valueOf() / 1000;\r\n        const lastAccessDelay = current_time - lastRequestTime;\r\n        return lastAccessDelay < sessionDuration;\r\n    } catch (_) {\r\n      return false;\r\n    }\r\n}\r\n\r\nexport function getSessionRemainingTimeBeforeExpiration(token: string) {\r\n    try {\r\n      const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n      const current_time = Date.now().valueOf() / 1000;\r\n      return Math.min(0, decoded_jwt.exp - current_time);\r\n    } catch (_) {\r\n      return 0;\r\n    }\r\n}\r\n\r\nexport function automaticSessionRenewal(token: string) {\r\n    const sessionDuration = getSessionDuration(token);\r\n    const remainingTime = getSessionRemainingTimeBeforeExpiration(token);\r\n    if (remainingTime < sessionDuration * 0.10 && wasUserActiveDuringCurrentSession(token)) {\r\n        AuthApiService.extendUserSession(sessionDuration);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}