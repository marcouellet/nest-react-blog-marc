{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\contexts\\\\auth.tsx\";\nimport React from 'react';\nimport { authReducer, initialState, createActionLogout, createActionLoadUser } from '../reducers/auth';\nimport TokenService from '../services/api/TokenService';\nimport { isTokenExpired } from '../services/api/AuthAPI';\nimport AUTHAPI from '../services/api/AuthAPI';\nimport sessionTimeoutConfirmation from '../components/common/sessionTimeoutConfirmation';\nconst AuthContext = React.createContext({\n  state: initialState,\n  dispatch: () => initialState\n});\nexport function AuthProvider(props) {\n  const _React$useReducer = React.useReducer(authReducer, initialState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  React.useEffect(() => {\n    const token = TokenService.getLocalAccessToken();\n    const user = TokenService.getUser();\n    if (!user) return;\n\n    if (isTokenExpired(user.authtoken.accessToken)) {\n      dispatch(createActionLoadUser(user));\n    } else {\n      sessionTimeoutConfirmation().then(result => {\n        if (result) {// Must renew session\n        } else {\n          dispatch(createActionLogout());\n          AUTHAPI.logout();\n        }\n      });\n    }\n  }, []);\n  return React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      state,\n      dispatch\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}\nexport default function useAuth() {\n  return React.useContext(AuthContext);\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/contexts/auth.tsx"],"names":["React","authReducer","initialState","createActionLogout","createActionLoadUser","TokenService","isTokenExpired","AUTHAPI","sessionTimeoutConfirmation","AuthContext","createContext","state","dispatch","AuthProvider","props","useReducer","useEffect","token","getLocalAccessToken","user","getUser","authtoken","accessToken","then","result","logout","useAuth","useContext"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,YAFF,EAKEC,kBALF,EAMEC,oBANF,QAOO,kBAPP;AAQA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,0BAAP,MAAuC,iDAAvC;AAOA,MAAMC,WAAW,GAAGT,KAAK,CAACU,aAAN,CAAsC;AACxDC,EAAAA,KAAK,EAAET,YADiD;AAExDU,EAAAA,QAAQ,EAAE,MAAMV;AAFwC,CAAtC,CAApB;AAKA,OAAO,SAASW,YAAT,CAAsBC,KAAtB,EAA0D;AAAA,4BACrCd,KAAK,CAACe,UAAN,CAAiBd,WAAjB,EAA8BC,YAA9B,CADqC;AAAA;AAAA,QACxDS,KADwD;AAAA,QACjDC,QADiD;;AAE/DZ,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,UAAMC,KAAK,GAAGZ,YAAY,CAACa,mBAAb,EAAd;AACA,UAAMC,IAAI,GAAGd,YAAY,CAACe,OAAb,EAAb;AAEA,QAAI,CAACD,IAAL,EAAW;;AAEX,QAAIb,cAAc,CAACa,IAAI,CAACE,SAAL,CAAgBC,WAAjB,CAAlB,EAAiD;AAC/CV,MAAAA,QAAQ,CAACR,oBAAoB,CAACe,IAAD,CAArB,CAAR;AACD,KAFD,MAEO;AACLX,MAAAA,0BAA0B,GAAGe,IAA7B,CAAmCC,MAAD,IAAY;AAC5C,YAAIA,MAAJ,EAAY,CACV;AACD,SAFD,MAEO;AACLZ,UAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR;AACAI,UAAAA,OAAO,CAACkB,MAAR;AACD;AACF,OAPD;AAQD;AACF,GAlBD,EAkBG,EAlBH;AAoBA,SAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEd,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAA7B,KAAsDE,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,eAAe,SAASY,OAAT,GAAmB;AAChC,SAAO1B,KAAK,CAAC2B,UAAN,CAAiBlB,WAAjB,CAAP;AACD","sourcesContent":["import React from 'react';\r\nimport {\r\n  authReducer,\r\n  initialState,\r\n  AuthAction,\r\n  AuthState,\r\n  createActionLogout,\r\n  createActionLoadUser\r\n} from '../reducers/auth';\r\nimport TokenService from '../services/api/TokenService';\r\nimport { isTokenExpired } from '../services/api/AuthAPI';\r\nimport AUTHAPI from '../services/api/AuthAPI';\r\nimport sessionTimeoutConfirmation from '../components/common/sessionTimeoutConfirmation'\r\n\r\ntype AuthContextProps = {\r\n  state: AuthState;\r\n  dispatch: React.Dispatch<AuthAction>;\r\n};\r\n\r\nconst AuthContext = React.createContext<AuthContextProps>({\r\n  state: initialState,\r\n  dispatch: () => initialState,\r\n});\r\n\r\nexport function AuthProvider(props: React.PropsWithChildren<{}>) {\r\n  const [state, dispatch] = React.useReducer(authReducer, initialState);\r\n  React.useEffect(() => {\r\n    const token = TokenService.getLocalAccessToken();\r\n    const user = TokenService.getUser();\r\n\r\n    if (!user) return;\r\n\r\n    if (isTokenExpired(user.authtoken!.accessToken)) {\r\n      dispatch(createActionLoadUser(user));\r\n    } else {\r\n      sessionTimeoutConfirmation().then((result) => {\r\n        if (result) {\r\n          // Must renew session\r\n        } else {\r\n          dispatch(createActionLogout());\r\n          AUTHAPI.logout();    \r\n        }\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  return <AuthContext.Provider value={{ state, dispatch }} {...props} />;\r\n}\r\n\r\nexport default function useAuth() {\r\n  return React.useContext(AuthContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}