{"ast":null,"code":"import API from './APIService';\nimport TokenService from './TokenService';\n\nasync function login(email, password) {\n  const loginParms = {\n    email,\n    password\n  };\n  return API.put('/auth/login', loginParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function register(username, email, password) {\n  const registerParms = {\n    username,\n    email,\n    password\n  };\n  return API.post('/auth/register', registerParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function refresh() {\n  const user = TokenService.getUser();\n  const authtoken = user.authtoken,\n        authrefreshtoken = user.authrefreshtoken;\n  const refreshParms = {\n    authtoken,\n    authrefreshtoken\n  };\n  return API.put('/auth/session/refresh', refreshParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function extendUserSession(extension) {\n  const user = TokenService.getUser();\n  const authtoken = user.authtoken,\n        authrefreshtoken = user.authrefreshtoken;\n  const sessionExtensionParms = {\n    authtoken,\n    authrefreshtoken,\n    extension\n  };\n  return API.put('/auth/session/extend', sessionExtensionParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function getUserProfile() {\n  return API.get('/auth/profile').then(response => response.data);\n}\n\nasync function updateUserProfile(user) {\n  return API.put('/auth/profile', user).then(response => response.data);\n}\n\nfunction logout() {\n  TokenService.removeUser();\n}\n\nconst AUTHAPI = {\n  login,\n  register,\n  refresh,\n  logout,\n  getUserProfile,\n  updateUserProfile,\n  extendUserSession\n};\nexport default AUTHAPI;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/AuthApiService.ts"],"names":["API","TokenService","login","email","password","loginParms","put","then","response","setUser","data","register","username","registerParms","post","refresh","user","getUser","authtoken","authrefreshtoken","refreshParms","extendUserSession","extension","sessionExtensionParms","getUserProfile","get","updateUserProfile","logout","removeUser","AUTHAPI"],"mappings":"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","sourcesContent":["import API from './APIService';\r\nimport { User, ILogin, IRegister, IRefresh, JWTPayload, ISessionExtension } from '../../types';\r\nimport TokenService from './TokenService';\r\n\r\nasync function login(email: string, password: string): Promise<User> {\r\n  const loginParms: ILogin = { email, password }\r\n  return API.put<User>('/auth/login', loginParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function register(username: string, email: string, password: string) : Promise<User> {\r\n  const registerParms: IRegister = { username, email, password }\r\n  return API.post<User>('/auth/register', registerParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function refresh() : Promise<User> {\r\n  const user = TokenService.getUser();\r\n  const { authtoken, authrefreshtoken } = user;\r\n  const refreshParms: IRefresh = { authtoken, authrefreshtoken };\r\n  return API.put<User>('/auth/session/refresh', refreshParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function extendUserSession(extension: number) : Promise<User> {\r\n  const user = TokenService.getUser();\r\n  const { authtoken, authrefreshtoken } = user;\r\n  const sessionExtensionParms: ISessionExtension = { authtoken, authrefreshtoken, extension };\r\n  return API.put<User>('/auth/session/extend', sessionExtensionParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function getUserProfile() : Promise<User> {\r\n  return API.get<User>('/auth/profile')\r\n    .then(response => response.data);\r\n}\r\n\r\nasync function updateUserProfile(user: User) : Promise<User> {\r\n  return API.put<User>('/auth/profile', user)\r\n    .then(response => response.data);\r\n}\r\n\r\nfunction logout() {\r\n  TokenService.removeUser();\r\n}\r\n\r\nconst AUTHAPI = {login, register, refresh, logout, getUserProfile, updateUserProfile, extendUserSession}\r\n\r\nexport default AUTHAPI\r\n"]},"metadata":{},"sourceType":"module"}