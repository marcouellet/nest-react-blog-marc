{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\blog\\\\ViewBlog.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { toLocalDateString } from '../../utils/local.storage.utils';\nimport Image from '../common/Image';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\n\nconst ViewBlog = () => {\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        dispatch = _useAuth.dispatch;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        postDefaultImage = _useState4[0],\n        setpostDefaultImage = _useState4[1];\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await getDefaultPostImage().then(imageData => {\n          setpostDefaultImage(imageData);\n        }).catch(error => {\n          throw new Error(error);\n        });\n        await PostApiService.getPostById(postId).then(post => setPost(post)).catch(apiErrors => handleFetchPostError(apiErrors));\n        dispatch(createActionLoading(false));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const PostImage = post => {\n    if (post.image) {\n      return React.createElement(ImageResize, {\n        imageData: post.image,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    } else {\n      return postDefaultImage && React.createElement(Image, {\n        imageData: postDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    }\n  };\n\n  const parseHtml = html => {\n    return ReactHtmlParser(html);\n  };\n\n  const imageMaxSize = {\n    maxWidth: 200,\n    maxHeight: 200\n  };\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrors(apiErrors);\n  };\n\n  const handleReturn = () => {\n    navigate('/blog');\n  };\n\n  const getDateString = date => {\n    if (date) {\n      return toLocalDateString(date);\n    } else {\n      return \"no date provided\";\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, PostImage(post)), React.createElement(\"div\", {\n    className: \"col-md-7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    className: \"date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Date posted:\\xA0\", getDateString(post.publishDate))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"h5\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Title:\\xA0\", post.title)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(\"h5\", {\n    className: \"category\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Category:\\xA0\", post.category ? post.category.title : 'No category assigned')), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"para\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, parseHtml(post.body))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group row-md-6 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn ml-2 btn-secondary\",\n    onClick: () => handleReturn(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Return\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, errors && React.createElement(ListErrors, {\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }))));\n};\n\nexport default ViewBlog;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/blog/ViewBlog.tsx"],"names":["React","useState","useEffect","ReactHtmlParser","useParams","useNavigate","toast","PostApiService","createActionLoading","useAuth","ListErrors","toLocalDateString","Image","ImageResize","resizeImage","ViewBlog","postId","state","isLoading","isAuthenticated","dispatch","post","setPost","errors","setErrors","postDefaultImage","setpostDefaultImage","navigate","fetchData","getDefaultPostImage","then","imageData","catch","error","Error","getPostById","apiErrors","handleFetchPostError","imageMaxSize","maxWidth","maxHeight","PostImage","image","parseHtml","html","handleReturn","getDateString","date","publishDate","title","category","body"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { IPost } from \"../../types\";\r\nimport { toast } from \"react-toastify\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, ImageData, ImageSizeProps } from '../../types';\r\nimport { toLocalDateString } from '../../utils/local.storage.utils';\r\nimport Image from '../common/Image';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils';\r\n\r\nconst ViewBlog = () => {\r\n\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const { state: { isLoading, isAuthenticated }, dispatch } = useAuth();\r\n  const [post, setPost] = useState<IPost>();\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await getDefaultPostImage()\r\n        .then(imageData => { setpostDefaultImage(imageData);})\r\n        .catch(error => {\r\n          throw new Error(error);\r\n        }); \r\n        await PostApiService.getPostById(postId!)\r\n        .then((post) => setPost(post))\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors))\r\n        dispatch(createActionLoading(false));\r\n      }\r\n      fetchData();  \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const PostImage = (post: IPost) => {\r\n    if(post.image) {\r\n      return <ImageResize imageData={post.image} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  postDefaultImage && <Image imageData={postDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const parseHtml = (html: string) => {\r\n    return ReactHtmlParser(html);\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:200, maxHeight:200}\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrors(apiErrors);\r\n  }\r\n\r\n  const handleReturn = () => {\r\n    navigate('/blog');\r\n  }\r\n\r\n  const getDateString = (date: Date): string => {\r\n    if (date) {\r\n      return toLocalDateString(date)!;\r\n    } else {\r\n      return \"no date provided\"\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {post && \r\n        (\r\n          <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                {PostImage(post)}\r\n              </div>\r\n              <div className=\"col-md-7\">\r\n                <h5 className=\"date\">\r\n                  <span>\r\n                    Date posted:&nbsp;{getDateString(post.publishDate!)}\r\n                  </span>\r\n                </h5>\r\n                <br/>\r\n                <h5 className=\"title\">\r\n                  <span>\r\n                    Title:&nbsp;{post.title}\r\n                  </span>\r\n                </h5>\r\n                <br/>\r\n                <h5 className=\"category\">\r\n                  <span>\r\n                    Category:&nbsp;{post.category ? post.category.title : 'No category assigned'}\r\n                  </span>\r\n                </h5>\r\n                <br/>\r\n              </div>\r\n            </div>\r\n            <br/>\r\n            <div className=\"row\">\r\n              <p className=\"para\">\r\n                {parseHtml(post.body)}\r\n              </p>                \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-10 col-md-12\">\r\n                <div className=\"form-group row-md-6 pull-right\">\r\n                  <button className=\"btn ml-2 btn-secondary\"  onClick={ () => handleReturn() } >\r\n                    Return\r\n                  </button>\r\n                  {isLoading &&\r\n                    <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                  }\r\n                 </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {errors && <ListErrors errors={errors} />}\r\n            </div>\r\n          </div>\r\n        )\r\n        }\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ViewBlog;"]},"metadata":{},"sourceType":"module"}