{"ast":null,"code":"import axios from 'axios';\nimport { StatusCodes } from 'http-status-codes';\nimport { API_BASE_URL, API_REQUEST_TIMEOUT, HTTP_RESPONSE_HEADER_TIMESTAMP } from \"../../config/api.config\";\nimport TokenService from './TokenService';\naxios.defaults.baseURL = API_BASE_URL;\naxios.defaults.timeout = API_REQUEST_TIMEOUT;\n\nfunction processError(error) {\n  let errorAttributes = {};\n\n  if (error.message && error.message.length > 0) {\n    console.log('Error: ', error.message);\n    errorAttributes.message = error.message;\n  }\n\n  if (error.code && error.code === 'ECONNABORTED') {\n    errorAttributes.status = StatusCodes.REQUEST_TIMEOUT.toString();\n  }\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n\n    if (error.response.status > 0) {\n      errorAttributes.status = error.response.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n\n    if (error.response.data) {\n      errorAttributes.message = error.response.data.message;\n    }\n\n    if (error.config.headers) {\n      errorAttributes.authorize = error.config.headers['Authorize'];\n      errorAttributes.token = [errorAttributes.authorize.replace('Bearer ', '').trim()];\n    }\n  } else if (error.request) {\n    // The client never received a response, and the request was never left\n    console.log(error.request);\n\n    if (error.request.status > 0) {\n      errorAttributes.status = error.request.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  }\n\n  return errorAttributes;\n}\n\nexport function handleError(error) {\n  return Promise.reject(processError(error));\n} // Add a request interceptor\n\naxios.interceptors.request.use(config => {\n  const token = TokenService.getLocalAccessToken();\n\n  if (token) {\n    config.headers[\"Authorization\"] = 'Bearer ' + token.accessToken; // for Spring Boot back-end\n    //config.headers[\"x-access-token\"] = token.accessToken; // for Node.js Express back-end\n  }\n\n  return config;\n}, error => {\n  return handleError(error);\n});\naxios.interceptors.response.use(response => {\n  const ts = response.headers[HTTP_RESPONSE_HEADER_TIMESTAMP];\n  const timestamp = Number(ts);\n  TokenService.setHttpResponseTimeStamp(timestamp);\n  return response;\n}, error => {\n  return handleError(error);\n});\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIService.ts"],"names":["axios","StatusCodes","API_BASE_URL","API_REQUEST_TIMEOUT","HTTP_RESPONSE_HEADER_TIMESTAMP","TokenService","defaults","baseURL","timeout","processError","error","errorAttributes","message","length","console","log","code","status","REQUEST_TIMEOUT","toString","response","data","headers","statusText","request","config","authorize","token","replace","trim","handleError","Promise","reject","interceptors","use","getLocalAccessToken","accessToken","ts","timestamp","Number","setHttpResponseTimeStamp"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { StatusCodes } from 'http-status-codes';\r\nimport { API_BASE_URL, API_REQUEST_TIMEOUT, HTTP_RESPONSE_HEADER_TIMESTAMP } from \"../../config/api.config\";\r\nimport { IErrors } from '../../types';\r\nimport TokenService from './TokenService';\r\n\r\naxios.defaults.baseURL = API_BASE_URL;\r\naxios.defaults.timeout = API_REQUEST_TIMEOUT;\r\n\r\nfunction processError(error : any) : IErrors {\r\n  let errorAttributes : IErrors = {};\r\n\r\n  if (error.message && error.message.length > 0) {\r\n    console.log('Error: ', error.message);\r\n    errorAttributes.message = error.message;\r\n  }\r\n\r\n  if (error.code && error.code === 'ECONNABORTED') {\r\n    errorAttributes.status = StatusCodes.REQUEST_TIMEOUT.toString();\r\n  }\r\n\r\n  if (error.response) {\r\n    // The client was given an error response (5xx, 4xx)\r\n    console.log(error.response.data);\r\n    console.log(error.response.status);\r\n    console.log(error.response.headers);\r\n    if (error.response.status > 0) {\r\n      errorAttributes.status = error.response.status;\r\n      errorAttributes.statusText = error.request.statusText;\r\n    }\r\n    if (error.response.data) {\r\n      errorAttributes.message = error.response.data.message;\r\n    }\r\n    if (error.config.headers) {\r\n      errorAttributes.authorize = error.config.headers['Authorize'] as string;\r\n      errorAttributes.token = [errorAttributes.authorize.replace('Bearer ', '').trim()];\r\n    }\r\n  } else if (error.request) {\r\n    // The client never received a response, and the request was never left\r\n    console.log(error.request);\r\n    if (error.request.status > 0) {\r\n      errorAttributes.status = error.request.status;\r\n      errorAttributes.statusText = error.request.statusText;\r\n    }\r\n  }\r\n   return errorAttributes;\r\n}\r\n\r\nexport function handleError(error : any) : Promise<IErrors> {\r\n   return Promise.reject(processError(error));\r\n}\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use( \r\n  (config) => {\r\n    const token = TokenService.getLocalAccessToken();\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = 'Bearer ' + token.accessToken;  // for Spring Boot back-end\r\n      //config.headers[\"x-access-token\"] = token.accessToken; // for Node.js Express back-end\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return handleError(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    const ts = response.headers[HTTP_RESPONSE_HEADER_TIMESTAMP];\r\n    const timestamp =Number(ts);\r\n    TokenService.setHttpResponseTimeStamp(timestamp);\r\n\r\n    return response;\r\n  },\r\n  (error) => {\r\n    return handleError(error);\r\n  }\r\n);\r\n\r\nexport default axios;\r\n"]},"metadata":{},"sourceType":"module"}