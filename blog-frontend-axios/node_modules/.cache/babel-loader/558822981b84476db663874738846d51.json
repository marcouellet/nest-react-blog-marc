{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from \"../../config/api.config\";\nimport TokenService from './TokenService';\naxios.defaults.baseURL = API_BASE_URL;\n\nfunction processError(error) {\n  let errorAttributes = {};\n\n  if (error.message && error.message.length > 0) {\n    console.log('Error: ', error.message);\n    errorAttributes.message = error.message;\n  }\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n\n    if (error.response.status > 0) {\n      errorAttributes.status = error.response.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n\n    if (error.response.data && error.response.request.authorize) {\n      errorAttributes.message = error.response.data;\n    }\n\n    if (error.response.request && error.response.request.authorize) {\n      errorAttributes.authorize = [error.response.request.authorize];\n      errorAttributes.token = [error.response.request.authorize.replace('Bearer ', '').trim()];\n    }\n  } else if (error.request) {\n    // The client never received a response, and the request was never left\n    console.log(error.request);\n\n    if (error.request.status > 0) {\n      errorAttributes.status = error.request.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  }\n\n  return errorAttributes;\n}\n\nexport function handleError(error) {\n  return Promise.reject(processError(error));\n} // Add a request interceptor\n\naxios.interceptors.request.use(config => {\n  const token = TokenService.getLocalAccessToken();\n\n  if (token) {\n    config.headers[\"Authorization\"] = 'Bearer ' + token.accessToken; // for Spring Boot back-end\n    //config.headers[\"x-access-token\"] = token.accessToken; // for Node.js Express back-end\n  }\n\n  return config;\n}, error => {\n  return handleError(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return handleError(error);\n});\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIService.ts"],"names":["axios","API_BASE_URL","TokenService","defaults","baseURL","processError","error","errorAttributes","message","length","console","log","response","data","status","headers","statusText","request","authorize","token","replace","trim","handleError","Promise","reject","interceptors","use","config","getLocalAccessToken","accessToken"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL } from \"../../config/api.config\";\r\nimport { IErrors } from '../../types';\r\nimport TokenService from './TokenService';\r\n\r\naxios.defaults.baseURL = API_BASE_URL;\r\nfunction processError(error : any) : IErrors {\r\n  let errorAttributes : IErrors = {};\r\n\r\n  if (error.message && error.message.length > 0) {\r\n    console.log('Error: ', error.message);\r\n    errorAttributes.message = error.message;\r\n  }\r\n\r\n  if (error.response) {\r\n    // The client was given an error response (5xx, 4xx)\r\n    console.log(error.response.data);\r\n    console.log(error.response.status);\r\n    console.log(error.response.headers);\r\n    if (error.response.status > 0) {\r\n      errorAttributes.status = error.response.status;\r\n      errorAttributes.statusText = error.request.statusText;\r\n    }\r\n    if (error.response.data && error.response.request.authorize) {\r\n      errorAttributes.message = error.response.data;\r\n    }\r\n    if (error.response.request && error.response.request.authorize) {\r\n      errorAttributes.authorize = [error.response.request.authorize];\r\n      errorAttributes.token = [error.response.request.authorize.replace('Bearer ', '').trim()];\r\n    }\r\n  } else if (error.request) {\r\n    // The client never received a response, and the request was never left\r\n    console.log(error.request);\r\n    if (error.request.status > 0) {\r\n      errorAttributes.status = error.request.status;\r\n      errorAttributes.statusText = error.request.statusText;\r\n    }\r\n  }\r\n   return errorAttributes;\r\n}\r\n\r\nexport function handleError(error : any) : Promise<IErrors> {\r\n   return Promise.reject(processError(error));\r\n}\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use( \r\n  (config) => {\r\n    const token = TokenService.getLocalAccessToken();\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = 'Bearer ' + token.accessToken;  // for Spring Boot back-end\r\n      //config.headers[\"x-access-token\"] = token.accessToken; // for Node.js Express back-end\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return handleError(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    return handleError(error);\r\n  }\r\n);\r\n\r\nexport default axios;\r\n"]},"metadata":{},"sourceType":"module"}