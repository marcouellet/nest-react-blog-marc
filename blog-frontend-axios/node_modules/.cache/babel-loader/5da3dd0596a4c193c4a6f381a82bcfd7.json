{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nexport let AuthActionType;\n\n(function (AuthActionType) {\n  AuthActionType[\"LoadUser\"] = \"LOAD_USER\";\n  AuthActionType[\"Logout\"] = \"LOGOUT\";\n  AuthActionType[\"Loading\"] = \"LOADING\";\n  AuthActionType[\"SessionExpired\"] = \"SESSION_EXPIRED\";\n  AuthActionType[\"SessionRefresh\"] = \"SESSION_REFRESH\";\n  AuthActionType[\"SetCategoryFilter\"] = \"SET_CATEGORY_FILTER\";\n  AuthActionType[\"SetPostTitleFilter\"] = \"SET_POST_TITLE_FILTER\";\n  AuthActionType[\"SetUserNameFilter\"] = \"SET_USER_NAME_FILTER\";\n  AuthActionType[\"UpdateUser\"] = \"UPDATE_USER\";\n})(AuthActionType || (AuthActionType = {}));\n\nexport const createActionLogout = () => {\n  return {\n    type: AuthActionType.Logout\n  };\n};\nexport const createActionLoadUser = user => {\n  return {\n    type: AuthActionType.LoadUser,\n    user: user\n  };\n};\nexport const createActionLoading = isLoading => {\n  return {\n    type: AuthActionType.Loading,\n    isLoading: isLoading\n  };\n};\nexport const createActionSessionExpired = () => {\n  return {\n    type: AuthActionType.SessionExpired\n  };\n};\nexport const createActionSessionRefresh = () => {\n  return {\n    type: AuthActionType.SessionRefresh\n  };\n};\nexport const createActionSetCategoryFilter = category => {\n  return {\n    type: AuthActionType.SetCategoryFilter,\n    categoryFilter: category\n  };\n};\nexport const createActionSetPostTitleFilter = titleFilter => {\n  return {\n    type: AuthActionType.SetPostTitleFilter,\n    postTitleFilter: titleFilter\n  };\n};\nexport const createActionUpdateUser = user => {\n  return {\n    type: AuthActionType.UpdateUser,\n    user: user\n  };\n};\nexport const createActionSetUserNameFilter = userName => {\n  return {\n    type: AuthActionType.SetUserNameFilter,\n    userNameFilter: userName\n  };\n};\n;\nexport const initialState = {\n  isLoading: false,\n  isAuthenticated: false,\n  isSessionExpired: false,\n  sessionRefresh: false,\n  categoryFilter: undefined,\n  postTitleFilter: '',\n  user: undefined,\n  userNameFilter: ''\n};\nexport function authReducer(state, action) {\n  switch (action.type) {\n    case AuthActionType.LoadUser:\n      {\n        return _objectSpread({}, state, {\n          isAuthenticated: true,\n          isSessionExpired: false,\n          sessionRefresh: false,\n          user: action.user\n        });\n      }\n\n    case AuthActionType.Logout:\n      {\n        return _objectSpread({}, state, {\n          isAuthenticated: false,\n          isSessionExpired: false,\n          user: undefined\n        });\n      }\n\n    case AuthActionType.Loading:\n      {\n        return _objectSpread({}, state, {\n          isLoading: action.isLoading\n        });\n      }\n\n    case AuthActionType.SessionExpired:\n      {\n        return _objectSpread({}, state, {\n          isSessionExpired: true\n        });\n      }\n\n    case AuthActionType.SessionRefresh:\n      {\n        return _objectSpread({}, state, {\n          sessionRefresh: true\n        });\n      }\n\n    case AuthActionType.SetCategoryFilter:\n      {\n        return _objectSpread({}, state, {\n          categoryFilter: action.categoryFilter\n        });\n      }\n\n    case AuthActionType.SetPostTitleFilter:\n      {\n        return _objectSpread({}, state, {\n          postTitleFilter: action.postTitleFilter\n        });\n      }\n\n    case AuthActionType.UpdateUser:\n      {\n        return _objectSpread({}, state, {\n          user: action.user\n        });\n      }\n\n    case AuthActionType.SetUserNameFilter:\n      {\n        return _objectSpread({}, state, {\n          userNameFilter: action.userNameFilter\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/reducers/auth.tsx"],"names":["AuthActionType","createActionLogout","type","Logout","createActionLoadUser","user","LoadUser","createActionLoading","isLoading","Loading","createActionSessionExpired","SessionExpired","createActionSessionRefresh","SessionRefresh","createActionSetCategoryFilter","category","SetCategoryFilter","categoryFilter","createActionSetPostTitleFilter","titleFilter","SetPostTitleFilter","postTitleFilter","createActionUpdateUser","UpdateUser","createActionSetUserNameFilter","userName","SetUserNameFilter","userNameFilter","initialState","isAuthenticated","isSessionExpired","sessionRefresh","undefined","authReducer","state","action"],"mappings":"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","sourcesContent":["import { User, ICategory } from '../types';\r\n\r\nexport enum AuthActionType {\r\n  LoadUser = 'LOAD_USER',\r\n  Logout = 'LOGOUT',\r\n  Loading = 'LOADING',\r\n  SessionExpired = 'SESSION_EXPIRED',\r\n  SessionRefresh = 'SESSION_REFRESH',\r\n  SetCategoryFilter = 'SET_CATEGORY_FILTER',\r\n  SetPostTitleFilter = 'SET_POST_TITLE_FILTER',\r\n  SetUserNameFilter = 'SET_USER_NAME_FILTER',\r\n  UpdateUser = 'UPDATE_USER',\r\n}\r\nexport const createActionLogout = () : AuthAction => { return {type:  AuthActionType.Logout}}\r\nexport const createActionLoadUser = (user: User) : AuthAction => { return {type:  AuthActionType.LoadUser, user: user}}\r\nexport const createActionLoading = (isLoading: boolean) : AuthAction => { return {type:  AuthActionType.Loading, isLoading: isLoading}}\r\nexport const createActionSessionExpired = () : AuthAction => { return {type:  AuthActionType.SessionExpired}}\r\nexport const createActionSessionRefresh = () : AuthAction => { return {type:  AuthActionType.SessionRefresh}}\r\nexport const createActionSetCategoryFilter = (category: ICategory) : AuthAction => { return {type:  AuthActionType.SetCategoryFilter, categoryFilter: category}}\r\nexport const createActionSetPostTitleFilter = (titleFilter: string) : AuthAction => { return {type:  AuthActionType.SetPostTitleFilter, postTitleFilter: titleFilter}}\r\nexport const createActionUpdateUser = (user: User) : AuthAction => { return {type:  AuthActionType.UpdateUser, user: user}}\r\nexport const createActionSetUserNameFilter = (userName: string) : AuthAction => { return {type:  AuthActionType.SetUserNameFilter, userNameFilter: userName}}\r\n\r\nexport type AuthAction =\r\n  | {\r\n      type: AuthActionType.LoadUser;\r\n      user: User;\r\n    }\r\n  | { type: AuthActionType.Logout }\r\n  | { \r\n      type: AuthActionType.Loading;\r\n      isLoading: boolean;\r\n    }\r\n  | { \r\n      type: AuthActionType.SessionExpired;\r\n    }\r\n  | { \r\n    type: AuthActionType.SessionRefresh;\r\n    }\r\n  | { \r\n      type: AuthActionType.SetCategoryFilter;\r\n      categoryFilter: ICategory;\r\n    }\r\n  | { \r\n      type: AuthActionType.SetPostTitleFilter;\r\n      postTitleFilter: string;\r\n    }\r\n  | {\r\n    type: AuthActionType.UpdateUser;\r\n    user: User;\r\n  }\r\n  | { \r\n    type: AuthActionType.SetUserNameFilter;\r\n    userNameFilter: string;\r\n  }\r\n;;\r\nexport interface AuthState {\r\n  isLoading: boolean;\r\n  isAuthenticated: boolean;\r\n  isSessionExpired: boolean;\r\n  sessionRefresh: boolean;\r\n  categoryFilter: ICategory | undefined,\r\n  postTitleFilter: string,\r\n  user: User | undefined,\r\n  userNameFilter: string,\r\n}\r\n\r\nexport const initialState: AuthState = {\r\n  isLoading: false,\r\n  isAuthenticated: false,\r\n  isSessionExpired: false,\r\n  sessionRefresh: false,\r\n  categoryFilter: undefined,\r\n  postTitleFilter: '',\r\n  user: undefined,\r\n  userNameFilter: '',\r\n};\r\n\r\nexport function authReducer(state: AuthState, action: AuthAction): AuthState {\r\n  switch (action.type) {\r\n    case AuthActionType.LoadUser:\r\n    {\r\n      return { ...state, isAuthenticated: true, isSessionExpired: false, sessionRefresh: false, user: action.user! };\r\n    }\r\n    case AuthActionType.Logout: {\r\n      return { ...state, isAuthenticated: false, isSessionExpired: false, user: undefined };\r\n    }\r\n    case AuthActionType.Loading: {\r\n      return { ...state, isLoading: action.isLoading!};\r\n    }\r\n    case AuthActionType.SessionExpired: {\r\n      return { ...state, isSessionExpired: true};\r\n    }\r\n    case AuthActionType.SessionRefresh: {\r\n      return { ...state, sessionRefresh: true};\r\n    }\r\n    case AuthActionType.SetCategoryFilter: {\r\n      return { ...state, categoryFilter: action.categoryFilter};\r\n    }\r\n    case AuthActionType.SetPostTitleFilter: {\r\n      return { ...state, postTitleFilter: action.postTitleFilter};\r\n    }    \r\n    case AuthActionType.UpdateUser: {\r\n      return { ...state, user: action.user!};\r\n    }   \r\n    case AuthActionType.SetUserNameFilter: {\r\n      return { ...state, userNameFilter: action.userNameFilter};\r\n    }     \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}