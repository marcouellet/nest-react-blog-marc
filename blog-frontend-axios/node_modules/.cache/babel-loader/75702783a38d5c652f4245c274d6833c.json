{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\EditPost.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { createPostForUpdate, minimumPostTitleLength, minimumPostDescriptionLength } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport { checkUnauthorized, checkSessionExpired } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\nimport Image from '../common/Image';\nimport ImageUpload from '../common/ImageUpload';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\nimport ViewPostContent from './ViewPostContent';\nimport EditPostContent from './EditPostContent';\n\nconst EditPost = () => {\n  var _errors$categoryTitle, _errors$title, _errors$description, _errors$body;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        postImage = _useState8[0],\n        setPostImage = _useState8[1];\n\n  const _useState9 = useState(),\n        _useState10 = _slicedToArray(_useState9, 2),\n        postDefaultImage = _useState10[0],\n        setpostDefaultImage = _useState10[1];\n\n  const _useState11 = useState(),\n        _useState12 = _slicedToArray(_useState11, 2),\n        viewingContent = _useState12[0],\n        setViewingContent = _useState12[1];\n\n  const _useState13 = useState(),\n        _useState14 = _slicedToArray(_useState13, 2),\n        editingContent = _useState14[0],\n        setEditingContent = _useState14[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required').min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\n    body: Yup.string().required('Content is required'),\n    categoryTitle: Yup.string(),\n    imageChanged: Yup.bool()\n  });\n  const defaultValues = {\n    categoryTitle: '',\n    title: post === null || post === void 0 ? void 0 : post.title,\n    description: post === null || post === void 0 ? void 0 : post.description,\n    body: post === null || post === void 0 ? void 0 : post.body,\n    imageChanged: false\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue,\n        getValues = _useForm.getValues,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    (async () => {\n      let allCategories;\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          await CategoryApiService.getAllCategories().then(categories => {\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            allCategories = [noCategory].concat(categories);\n            setCategories(allCategories);\n            selectCategory(allCategories, 'no_category', false);\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n        };\n\n        fetchCategories();\n      }\n\n      if (!post) {\n        const fetchPost = async () => {\n          await getDefaultPostImage().then(imageData => {\n            setpostDefaultImage(imageData);\n          }).catch(error => {\n            throw new Error(error);\n          });\n          await PostApiService.getPostById(postId).then(post => {\n            setPost(post);\n            reset(post);\n\n            if (post === null || post === void 0 ? void 0 : post.category) {\n              selectCategory(allCategories, post.category.id, false);\n            }\n          }).catch(apiErrors => handleFetchPostError(apiErrors));\n        };\n\n        await fetchPost();\n      }\n\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    setImageData(post === null || post === void 0 ? void 0 : post.image); // eslint-disable-next-line\n  }, [post]);\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const PostImage = post => {\n    if (postImage) {\n      return React.createElement(ImageResize, {\n        imageData: postImage,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      });\n    } else {\n      return postDefaultImage && React.createElement(Image, {\n        imageData: postDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    }\n  };\n\n  const imageMaxSize = {\n    maxWidth: 200,\n    maxHeight: 200\n  };\n\n  const onSubmit = async data => {\n    if (post && isDirty) {\n      dispatch(createActionLoading(true));\n      const image = postImage;\n      const postData = createPostForUpdate(_objectSpread({}, post, {}, data, {\n        image,\n        category\n      }));\n      await PostApiService.updatePost(post.id, postData).then(() => {\n        handleSubmitFormSuccess();\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleErrors = (apiErrors, process) => {\n    if (checkSessionExpired(apiErrors)) {\n      toast.error(`${process} failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`${process} failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const handleFetchCategoriesError = apiErrors => {\n    handleErrors(apiErrors, 'Categories reading');\n  };\n\n  const handleFetchPostError = apiErrors => {\n    handleErrors(apiErrors, 'Post reading');\n  };\n\n  const handleSubmitFormSuccess = () => {\n    toast.success(`Post updated successfully...`);\n    navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkSessionExpired(apiErrors)) {\n      toast.error(`Post update failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`Post update failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelEditPostMessage = () => `post edition and loose changes`;\n\n  const handleResetEditPost = () => {\n    setPostContent(post.body, false);\n\n    if (post === null || post === void 0 ? void 0 : post.category) {\n      selectCategory(categories, post.category.id, false);\n    } else {\n      selectCategory(categories, 'no_category', false);\n    }\n\n    setImageData(post === null || post === void 0 ? void 0 : post.image);\n    reset(post);\n  };\n\n  const handleViewContent = () => {\n    setViewingContent(true);\n  };\n\n  const handleEditContent = () => {\n    setEditingContent(true);\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const setPostContent = (value, shouldDirty = true) => {\n    setValue('body', value, {\n      shouldDirty: shouldDirty,\n      shouldValidate: false\n    });\n    setEditingContent(false);\n  };\n\n  const onCloseContentViewing = () => {\n    setViewingContent(false);\n  };\n\n  const onCancelContentEditing = () => {\n    setEditingContent(false);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories.find(category => category.id === categoryId);\n    setCategory((category === null || category === void 0 ? void 0 : category.id) === 'no_category' ? undefined : category);\n    setValue('categoryTitle', category.title, {\n      shouldDirty: setDirty\n    });\n  };\n\n  const handleCancelEditPost = () => {\n    navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n  };\n\n  const handleImageUpload = image => {\n    setImageData(image);\n  };\n\n  const handleImageUploadError = error => {\n    toast.error(`User image upload failed`);\n  };\n\n  const handleDeleteImage = () => {\n    setImageData(undefined);\n  };\n\n  const setImageData = image => {\n    var _post$image;\n\n    const isImageDefined = image !== undefined;\n    const isInitialImageDefined = (post === null || post === void 0 ? void 0 : post.image) !== undefined;\n    const imageChanged = isImageDefined !== isInitialImageDefined || isImageDefined && (image === null || image === void 0 ? void 0 : image.base64) !== (post === null || post === void 0 ? void 0 : (_post$image = post.image) === null || _post$image === void 0 ? void 0 : _post$image.base64);\n    setValue('imageChanged', imageChanged, {\n      shouldDirty: true\n    });\n    setPostImage(image);\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \" Edit Post  \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"edit-post-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, category.title))), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\"\n  }, register('categoryTitle'), {\n    className: `col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, (_errors$categoryTitle = errors.categoryTitle) === null || _errors$categoryTitle === void 0 ? void 0 : _errors$categoryTitle.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, \" Image: \"), postImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    onImageUploadError: handleImageUploadError,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, PostImage(post)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), !editingContent && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, \" Content \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, React.createElement(\"textarea\", Object.assign({\n    readOnly: true,\n    placeholder: \"Content must not be empty, user Edit button to edit the content\"\n  }, register('body'), {\n    className: `form-control ${errors.body ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }, (_errors$body = errors.body) === null || _errors$body === void 0 ? void 0 : _errors$body.message))), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleViewContent(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, \"View Content\"), \"\\xA0\", isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleEditContent(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343\n    },\n    __self: this\n  }, \"Edit Content\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  })))), viewingContent && React.createElement(ViewPostContent, {\n    content: getValues('body'),\n    onClose: onCloseContentViewing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }), editingContent && React.createElement(EditPostContent, {\n    content: getValues('body'),\n    onSaveContent: setPostContent,\n    onCancelEditing: onCancelContentEditing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-lg-10 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group row-md-5 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditPostMessage(),\n    onClick: () => handleCancelEditPost(),\n    className: \"btn ml-2 btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditPost(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368\n    },\n    __self: this\n  }, \"Reset\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn ml-2 btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374\n    },\n    __self: this\n  }, \"Update\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378\n    },\n    __self: this\n  })))))));\n};\n\nexport default EditPost;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/EditPost.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","toast","Yup","yupResolver","CancelButton","createPostForUpdate","minimumPostTitleLength","minimumPostDescriptionLength","PostApiService","CategoryApiService","createActionLoading","useAuth","ListErrors","DropdownButton","Dropdown","checkUnauthorized","checkSessionExpired","createActionSessionExpired","Image","ImageUpload","ImageResize","resizeImage","ViewPostContent","EditPostContent","EditPost","navigate","isLoading","state","dispatch","errorList","setErrorList","postId","post","setPost","categories","setCategories","category","setCategory","postImage","setPostImage","postDefaultImage","setpostDefaultImage","viewingContent","setViewingContent","editingContent","setEditingContent","validationSchema","object","shape","title","string","required","min","description","body","categoryTitle","imageChanged","bool","defaultValues","resolver","register","handleSubmit","reset","setValue","getValues","formState","errors","isDirty","allCategories","fetchCategories","getAllCategories","then","noCategory","id","concat","selectCategory","catch","apiErrors","handleFetchCategoriesError","fetchPost","getDefaultPostImage","imageData","error","Error","getPostById","handleFetchPostError","setImageData","image","imageMaxSize","maxWidth","maxHeight","PostImage","onSubmit","data","postData","updatePost","handleSubmitFormSuccess","handleSubmitFormError","handleErrors","process","success","cancelEditPostMessage","handleResetEditPost","setPostContent","handleViewContent","handleEditContent","handleCategorySelect","e","value","shouldDirty","shouldValidate","onCloseContentViewing","onCancelContentEditing","categoryId","setDirty","find","undefined","handleCancelEditPost","handleImageUpload","handleImageUploadError","handleDeleteImage","isImageDefined","isInitialImageDefined","base64","map","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { IPost, IUpdatePost, ICategory, createPostForUpdate, minimumPostTitleLength, minimumPostDescriptionLength,\r\n          ImageSizeProps } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { IErrors, ImageData } from '../../types';\r\nimport { checkUnauthorized, checkSessionExpired } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\nimport Image from '../common/Image';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nimport ViewPostContent from './ViewPostContent';\r\nimport EditPostContent from './EditPostContent';\r\n\r\nconst EditPost = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const [post, setPost] = useState<IPost>();\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [postImage, setPostImage] = useState<ImageData>();\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n  const [viewingContent, setViewingContent] = useState<boolean>();\r\n  const [editingContent, setEditingContent] = useState<boolean>();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required')\r\n      .min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\r\n    body: Yup.string().required('Content is required'),\r\n    categoryTitle: Yup.string(),\r\n    imageChanged: Yup.bool(),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n    categoryTitle: string;\r\n    title: string;\r\n    description: string;\r\n    body: string;\r\n    imageChanged: boolean;\r\n  };\r\n\r\n  const defaultValues = {categoryTitle: '', title: post?.title, description: post?.description, body: post?.body,\r\n                          imageChanged: false};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    getValues,\r\n    formState: { errors, isDirty }\r\n  } = useForm<UpdateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      let allCategories: ICategory[];\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n        await CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            allCategories = [noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            selectCategory(allCategories, 'no_category', false);\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        }\r\n        fetchCategories();\r\n      }\r\n      if (!post) {\r\n        const fetchPost = async (): Promise<void> => {\r\n          await getDefaultPostImage()\r\n          .then(imageData => { setpostDefaultImage(imageData);})\r\n          .catch(error => {\r\n            throw new Error(error);\r\n          });  \r\n          await PostApiService.getPostById(postId!)\r\n          .then(post => { \r\n            setPost(post); \r\n            reset(post);\r\n            if (post?.category) {\r\n              selectCategory(allCategories, post.category.id!, false);\r\n            }\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        }\r\n        await fetchPost();\r\n      }\r\n      dispatch(createActionLoading(false));\r\n\r\n    })();\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setImageData(post?.image);\r\n  // eslint-disable-next-line\r\n  }, [post]);\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const PostImage = (post: IPost) => {\r\n    if(postImage) {\r\n      return <ImageResize imageData={postImage} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  postDefaultImage && <Image imageData={postDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:200, maxHeight:200}\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n    if (post && isDirty) {\r\n      dispatch(createActionLoading(true));\r\n      const image = postImage;\r\n      const postData: IUpdatePost = createPostForUpdate({...post, ...data, image, category});\r\n      await PostApiService.updatePost(post.id!, postData)\r\n      .then(() => { handleSubmitFormSuccess(); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n      dispatch(createActionLoading(false));\r\n     }\r\n  } \r\n\r\n  const handleErrors = (apiErrors: IErrors, process: string) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      toast.error(`${process} failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate('/'); \r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`${process} failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    handleErrors(apiErrors, 'Categories reading');\r\n  }\r\n  \r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    handleErrors(apiErrors, 'Post reading');\r\n  }\r\n\r\n  const handleSubmitFormSuccess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n    navigate(`/post/${post?.id}`);\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      toast.error(`Post update failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate('/'); \r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`Post update failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n}\r\n\r\nconst cancelEditPostMessage = () => `post edition and loose changes`;\r\n\r\nconst handleResetEditPost = () => {\r\n  setPostContent(post!.body, false);\r\n  if (post?.category) {\r\n    selectCategory(categories!, post.category.id!, false);\r\n  } else {\r\n    selectCategory(categories!, 'no_category', false);\r\n  }\r\n  setImageData(post?.image);\r\n  reset(post);\r\n}\r\n\r\nconst handleViewContent = () => {\r\n  setViewingContent(true);\r\n}\r\n\r\nconst handleEditContent = () => {\r\n  setEditingContent(true);\r\n}\r\n\r\nconst handleCategorySelect=(e: any)=>{\r\n  selectCategory(categories!, e, true);\r\n}\r\n\r\nconst setPostContent = (value: string, shouldDirty: boolean = true) => {\r\n  setValue('body', value, { shouldDirty: shouldDirty, shouldValidate: false });\r\n  setEditingContent(false);\r\n}\r\n\r\nconst onCloseContentViewing = () => {\r\n  setViewingContent(false);\r\n}\r\n\r\nconst onCancelContentEditing = () => {\r\n  setEditingContent(false);\r\n}\r\n\r\nconst selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n  const category = categories.find(category => category.id === categoryId);\r\n  setCategory(category?.id === 'no_category' ? undefined: category);\r\n  setValue('categoryTitle', category!.title, { shouldDirty: setDirty });\r\n}\r\n\r\nconst handleCancelEditPost = () => {\r\n  navigate(`/post/${post?.id}`);   \r\n};\r\n\r\nconst handleImageUpload = (image: ImageData) => {\r\n  setImageData(image);\r\n}\r\n\r\nconst handleImageUploadError = (error: any) => {\r\n  toast.error(`User image upload failed`);\r\n}\r\n\r\nconst handleDeleteImage = () => {\r\n  setImageData(undefined);\r\n}\r\n\r\nconst setImageData = (image: ImageData | undefined) => {\r\n  const isImageDefined = image !== undefined;\r\n  const isInitialImageDefined = post?.image !== undefined;\r\n  const imageChanged = (isImageDefined !== isInitialImageDefined) ||\r\n                        (isImageDefined && image?.base64 !== post?.image?.base64);\r\n  setValue('imageChanged', imageChanged, {shouldDirty: true});\r\n  setPostImage(image);\r\n}\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Post  </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"edit-post-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n            <div className=\"form-group col-md-8\">\r\n              <div className=\"row\">\r\n                <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                    {categories && categories.map((category: ICategory) => \r\n                    (\r\n                      <Dropdown.Item eventKey={category.id}>{category.title}</Dropdown.Item>\r\n                    ))\r\n                  }\r\n                </DropdownButton>\r\n                <input    \r\n                  type=\"text\" disabled  placeholder=\"no category selected\" \r\n                  {...register('categoryTitle')}\r\n                  className={`col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`}           \r\n                />\r\n                </div>\r\n              <div className=\"invalid-feedback\">{errors.categoryTitle?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4\">\r\n              <div className=\"row\">\r\n                <label className=\"col-md-2\"> Image: </label>\r\n                { postImage && (\r\n                  <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleDeleteImage() } >\r\n                    Delete Image\r\n                  </button>\r\n                )  \r\n                }   \r\n                <ImageUpload onImageUpload={handleImageUpload} onImageUploadError={handleImageUploadError} resize={imageMaxSize}/>                     \r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              {PostImage(post)}\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                {...register('title')}\r\n                className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter description\"\r\n                {...register('description')}\r\n                className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n            </div>\r\n\r\n            {!editingContent && (\r\n              <div>\r\n                <div className=\"form-group col-md-12\">\r\n                  <label htmlFor=\"body\"> Content </label>\r\n                  <div>\r\n                    <textarea \r\n                      readOnly \r\n                      placeholder=\"Content must not be empty, user Edit button to edit the content\"\r\n                      {...register('body')}\r\n                      className={`form-control ${errors.body ? 'is-invalid' : ''}`} \r\n                    />\r\n                    <div className=\"invalid-feedback\">{errors.body?.message}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-4\">\r\n                  <div className=\"row\">\r\n                    <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleViewContent() } >\r\n                        View Content\r\n                    </button> \r\n                    &nbsp; \r\n                    {isLoading &&\r\n                      <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                    }\r\n                    <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleEditContent() } >\r\n                        Edit Content\r\n                    </button>  \r\n                    {isLoading &&\r\n                      <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                    }\r\n                  </div> \r\n                </div>\r\n              </div>\r\n            )         \r\n            }\r\n            {viewingContent && (\r\n              <ViewPostContent content={getValues('body')} onClose={onCloseContentViewing}/>\r\n            ) \r\n            }\r\n            {editingContent && (\r\n              <EditPostContent content={getValues('body')} onSaveContent={setPostContent} onCancelEditing={onCancelContentEditing}/>\r\n            ) \r\n            }\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-10 col-md-12\">\r\n                <div className=\"form-group row-md-5 pull-right\">\r\n                    {\r\n                      <CancelButton prompt={isDirty} message={cancelEditPostMessage()} onClick={() => handleCancelEditPost()} className=\"btn ml-2 btn-danger\">Cancel</CancelButton>\r\n                    }\r\n                    <button className=\"btn ml-2 btn-secondary\" disabled={!isDirty} onClick={ () => handleResetEditPost() } >\r\n                      Reset\r\n                    </button>\r\n                    {isLoading &&\r\n                      <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                    }\r\n                    <button className=\"btn ml-2 btn-success\"  disabled={!isDirty} type=\"submit\">\r\n                      Update\r\n                    </button>\r\n                    {isLoading &&\r\n                      <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                    }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default EditPost;"]},"metadata":{},"sourceType":"module"}