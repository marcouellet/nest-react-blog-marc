{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport API from './APIService';\nimport TokenService from './TokenService';\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (_) {\n    return false;\n  }\n}\nexport function isSessionInactiveForSessionDuration(token) {\n  // Session could be expired if user did not made any request to the server since\n  // the last time the session was set/reset. Otherwise, just refresh the session\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\n    const lastRequestTime = lastResponseTimeStamp.valueOf() / 1000;\n    const lastRequestExpirationTime = lastRequestTime + decoded_jwt.sessionDuration;\n    const current_time = Date.now().valueOf() / 1000;\n    return lastRequestExpirationTime < current_time;\n  } catch (_) {\n    return true;\n  }\n}\nexport function getSessionDurationExtension(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\n    const lastRequestTime = lastResponseTimeStamp.valueOf() / 1000;\n    const current_time = Date.now().valueOf() / 1000;\n    const lastAccessDelay = current_time - lastRequestTime;\n    return decoded_jwt.sessionDuration - lastAccessDelay;\n  } catch (_) {\n    return 0;\n  }\n}\n\nfunction getCurrentUser() {\n  return TokenService.getUser();\n}\n\n;\n\nasync function login(email, password) {\n  const loginParms = {\n    email,\n    password\n  };\n  return API.put('/auth/login', loginParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function register(username, email, password) {\n  const registerParms = {\n    username,\n    email,\n    password\n  };\n  return API.post('/auth/register', registerParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function refresh(user) {\n  const authtoken = user.authtoken,\n        authrefreshtoken = user.authrefreshtoken;\n  const refreshParms = {\n    authtoken,\n    authrefreshtoken\n  };\n  return API.put('/auth/refresh', refreshParms).then(response => {\n    TokenService.setUser(response.data);\n    return response.data;\n  });\n}\n\nasync function getUserProfile() {\n  return API.get('/auth/profile').then(response => response.data);\n}\n\nasync function updateUserProfile(user) {\n  return API.put('/auth/profile', user).then(response => response.data);\n}\n\nfunction logout() {\n  TokenService.removeUser();\n}\n\nconst AUTHAPI = {\n  getCurrentUser,\n  login,\n  register,\n  refresh,\n  logout,\n  getUserProfile,\n  updateUserProfile,\n  getSessionDurationExtension\n};\nexport default AUTHAPI;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/AuthApiService.ts"],"names":["jwtDecode","API","TokenService","isTokenValid","token","decoded_jwt","current_time","Date","now","valueOf","exp","_","isSessionInactiveForSessionDuration","lastResponseTimeStamp","getHttpResponseTimeStamp","lastRequestTime","lastRequestExpirationTime","sessionDuration","getSessionDurationExtension","lastAccessDelay","getCurrentUser","getUser","login","email","password","loginParms","put","then","response","setUser","data","register","username","registerParms","post","refresh","user","authtoken","authrefreshtoken","refreshParms","getUserProfile","get","updateUserProfile","logout","removeUser","AUTHAPI"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAGA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMC,WAAuB,GAAGL,SAAS,CAAaI,KAAb,CAAzC;AACA,UAAME,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;AAED,OAAO,SAASC,mCAAT,CAA6CR,KAA7C,EAA4D;AACjE;AACA;AACA,MAAI;AACF,UAAMC,WAAuB,GAAGL,SAAS,CAAaI,KAAb,CAAzC;AACA,UAAMS,qBAAqB,GAAGX,YAAY,CAACY,wBAAb,EAA9B;AACA,UAAMC,eAAe,GAAGF,qBAAqB,CAACJ,OAAtB,KAAkC,IAA1D;AACA,UAAMO,yBAAyB,GAAGD,eAAe,GAAGV,WAAW,CAACY,eAAhE;AACA,UAAMX,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOO,yBAAyB,GAAGV,YAAnC;AACD,GAPD,CAOE,OAAOK,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;AAED,OAAO,SAASO,2BAAT,CAAqCd,KAArC,EAAoD;AACzD,MAAI;AACF,UAAMC,WAAuB,GAAGL,SAAS,CAAaI,KAAb,CAAzC;AACA,UAAMS,qBAAqB,GAAGX,YAAY,CAACY,wBAAb,EAA9B;AACA,UAAMC,eAAe,GAAGF,qBAAqB,CAACJ,OAAtB,KAAkC,IAA1D;AACA,UAAMH,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,UAAMU,eAAe,GAAGb,YAAY,GAAGS,eAAvC;AACA,WAAOV,WAAW,CAACY,eAAZ,GAA8BE,eAArC;AACD,GAPD,CAOE,OAAOR,CAAP,EAAU;AACV,WAAO,CAAP;AACD;AACF;;AAED,SAASS,cAAT,GAAgC;AAC9B,SAAOlB,YAAY,CAACmB,OAAb,EAAP;AACD;;AAAA;;AAED,eAAeC,KAAf,CAAqBC,KAArB,EAAoCC,QAApC,EAAqE;AACnE,QAAMC,UAAkB,GAAG;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA3B;AACA,SAAOvB,GAAG,CAACyB,GAAJ,CAAc,aAAd,EAA6BD,UAA7B,EACJE,IADI,CACCC,QAAQ,IAAI;AAChB1B,IAAAA,YAAY,CAAC2B,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACA,WAAOF,QAAQ,CAACE,IAAhB;AACD,GAJI,CAAP;AAKD;;AAED,eAAeC,QAAf,CAAwBC,QAAxB,EAA0CT,KAA1C,EAAyDC,QAAzD,EAA2F;AACzF,QAAMS,aAAwB,GAAG;AAAED,IAAAA,QAAF;AAAYT,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAjC;AACA,SAAOvB,GAAG,CAACiC,IAAJ,CAAe,gBAAf,EAAiCD,aAAjC,EACJN,IADI,CACCC,QAAQ,IAAI;AAChB1B,IAAAA,YAAY,CAAC2B,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACA,WAAOF,QAAQ,CAACE,IAAhB;AACD,GAJI,CAAP;AAKD;;AAED,eAAeK,OAAf,CAAuBC,IAAvB,EAAmD;AAAA,QACzCC,SADyC,GACTD,IADS,CACzCC,SADyC;AAAA,QAC9BC,gBAD8B,GACTF,IADS,CAC9BE,gBAD8B;AAEjD,QAAMC,YAAsB,GAAG;AAAEF,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA/B;AACA,SAAOrC,GAAG,CAACyB,GAAJ,CAAc,eAAd,EAA+Ba,YAA/B,EACJZ,IADI,CACCC,QAAQ,IAAI;AAChB1B,IAAAA,YAAY,CAAC2B,OAAb,CAAqBD,QAAQ,CAACE,IAA9B;AACA,WAAOF,QAAQ,CAACE,IAAhB;AACD,GAJI,CAAP;AAKD;;AAED,eAAeU,cAAf,GAAgD;AAC9C,SAAOvC,GAAG,CAACwC,GAAJ,CAAc,eAAd,EACJd,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACE,IADtB,CAAP;AAED;;AAED,eAAeY,iBAAf,CAAiCN,IAAjC,EAA6D;AAC3D,SAAOnC,GAAG,CAACyB,GAAJ,CAAc,eAAd,EAA+BU,IAA/B,EACJT,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACE,IADtB,CAAP;AAED;;AAED,SAASa,MAAT,GAAkB;AAChBzC,EAAAA,YAAY,CAAC0C,UAAb;AACD;;AAED,MAAMC,OAAO,GAAG;AAACzB,EAAAA,cAAD;AAAiBE,EAAAA,KAAjB;AAAwBS,EAAAA,QAAxB;AAAkCI,EAAAA,OAAlC;AAA2CQ,EAAAA,MAA3C;AAAmDH,EAAAA,cAAnD;AAAmEE,EAAAA,iBAAnE;AAAsFxB,EAAAA;AAAtF,CAAhB;AAEA,eAAe2B,OAAf","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport API from './APIService';\r\nimport { User, ILogin, IRegister, IRefresh, JWTPayload } from '../../types';\r\nimport TokenService from './TokenService';\r\nimport { HEADER_HTTP_RESPONSE_TIMEOUT } from \"../../config/api.config\";\r\n\r\nexport function isTokenValid(token: string) {\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n    const current_time = Date.now().valueOf() / 1000;\r\n    return decoded_jwt.exp > current_time;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function isSessionInactiveForSessionDuration(token: string) {\r\n  // Session could be expired if user did not made any request to the server since\r\n  // the last time the session was set/reset. Otherwise, just refresh the session\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\r\n    const lastRequestTime = lastResponseTimeStamp.valueOf() / 1000;\r\n    const lastRequestExpirationTime = lastRequestTime + decoded_jwt.sessionDuration;\r\n    const current_time = Date.now().valueOf() / 1000;\r\n    return lastRequestExpirationTime < current_time;\r\n  } catch (_) {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function getSessionDurationExtension(token: string) {\r\n  try {\r\n    const decoded_jwt: JWTPayload = jwtDecode<JWTPayload>(token);\r\n    const lastResponseTimeStamp = TokenService.getHttpResponseTimeStamp();\r\n    const lastRequestTime = lastResponseTimeStamp.valueOf() / 1000;\r\n    const current_time = Date.now().valueOf() / 1000;\r\n    const lastAccessDelay = current_time - lastRequestTime;\r\n    return decoded_jwt.sessionDuration - lastAccessDelay;\r\n  } catch (_) {\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction getCurrentUser(): User {\r\n  return TokenService.getUser();\r\n};\r\n\r\nasync function login(email: string, password: string): Promise<User> {\r\n  const loginParms: ILogin = { email, password }\r\n  return API.put<User>('/auth/login', loginParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function register(username: string, email: string, password: string) : Promise<User> {\r\n  const registerParms: IRegister = { username, email, password }\r\n  return API.post<User>('/auth/register', registerParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function refresh(user: User) : Promise<User> {\r\n  const { authtoken, authrefreshtoken } = user;\r\n  const refreshParms: IRefresh = { authtoken, authrefreshtoken };\r\n  return API.put<User>('/auth/refresh', refreshParms)\r\n    .then(response => {\r\n      TokenService.setUser(response.data);\r\n      return response.data;\r\n    });\r\n}\r\n\r\nasync function getUserProfile() : Promise<User> {\r\n  return API.get<User>('/auth/profile')\r\n    .then(response => response.data);\r\n}\r\n\r\nasync function updateUserProfile(user: User) : Promise<User> {\r\n  return API.put<User>('/auth/profile', user)\r\n    .then(response => response.data);\r\n}\r\n\r\nfunction logout() {\r\n  TokenService.removeUser();\r\n}\r\n\r\nconst AUTHAPI = {getCurrentUser, login, register, refresh, logout, getUserProfile, updateUserProfile, getSessionDurationExtension}\r\n\r\nexport default AUTHAPI\r\n"]},"metadata":{},"sourceType":"module"}