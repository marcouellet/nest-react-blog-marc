{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\common\\\\ImageResize.tsx\";\nimport React, { useState } from 'react';\nimport { resizeImage } from '../../utils/image.utils';\nimport Image from '../common/Image';\n\nconst ImageResize = props => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        imageToProcess = _useState2[0],\n        setImageToProcess = _useState2[1];\n\n  const propImage = _objectSpread({}, props.imageData);\n\n  const handleOnError = error => {\n    throw new Error(error);\n  };\n\n  resizeImage(propImage, props.resize.maxWidth, props.resize.maxHeight).then(imageData => {\n    setImageToProcess(imageData);\n  });\n  return React.createElement(React.Fragment, null, imageToProcess && React.createElement(Image, {\n    imageData: imageToProcess,\n    onError: handleOnError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nexport default ImageResize;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/common/ImageResize.tsx"],"names":["React","useState","resizeImage","Image","ImageResize","props","imageToProcess","setImageToProcess","propImage","imageData","handleOnError","error","Error","resize","maxWidth","maxHeight","then"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAOA,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAAA,oBAEDJ,QAAQ,EAFP;AAAA;AAAA,QAEtCK,cAFsC;AAAA,QAEtBC,iBAFsB;;AAI7C,QAAMC,SAAoB,qBAAOH,KAAK,CAACI,SAAb,CAA1B;;AAEA,QAAMC,aAAa,GAAIC,KAAD,IAAgB;AAClC,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH,GAFD;;AAIAT,EAAAA,WAAW,CAACM,SAAD,EAAYH,KAAK,CAACQ,MAAN,CAAaC,QAAzB,EAAmCT,KAAK,CAACQ,MAAN,CAAaE,SAAhD,CAAX,CACKC,IADL,CACUP,SAAS,IAAI;AACfF,IAAAA,iBAAiB,CAACE,SAAD,CAAjB;AACH,GAHL;AAKA,SACI,0CACEH,cAAc,IAAI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEA,cAAlB;AAAkC,IAAA,OAAO,EAAEI,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADpB,CADJ;AAKH,CApBD;;AAsBA,eAAeN,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { ImageData, ImageSizeProps } from '../../types';\r\nimport { resizeImage } from '../../utils/image.utils';\r\nimport Image from '../common/Image';\r\n\r\nexport interface ImageResizeProps {\r\n    imageData: ImageData,\r\n    resize: ImageSizeProps,\r\n}\r\n\r\nconst ImageResize = (props: ImageResizeProps) => {\r\n\r\n    const [imageToProcess, setImageToProcess] = useState<ImageData>(); \r\n\r\n    const propImage: ImageData = {...props.imageData};\r\n\r\n    const handleOnError = (error: any) => {\r\n        throw new Error(error);\r\n    }\r\n\r\n    resizeImage(propImage, props.resize.maxWidth, props.resize.maxHeight)\r\n        .then(imageData => {\r\n            setImageToProcess(imageData);\r\n        });\r\n\r\n    return (\r\n        <>\r\n        { imageToProcess && <Image imageData={imageToProcess} onError={handleOnError}/> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImageResize;\r\n"]},"metadata":{},"sourceType":"module"}