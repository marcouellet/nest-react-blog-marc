{"ast":null,"code":"const getArrayBuffer = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n\n    reader.readAsArrayBuffer(file);\n  });\n};\n\nexport function getImageFromFile(file, callback, errorHandler) {\n  getArrayBuffer(file).then(data => {\n    const imageData = {\n      base64: Buffer.from(data).toString('base64'),\n      contentType: file.type\n    };\n    callback(imageData);\n  }).catch(error => errorHandler(error));\n}\nexport function readImageFileAsImageData(filePath, maxWidth, maxHeight) {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.src = filePath;\n\n    image.onload = () => {\n      let canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      let context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0);\n      canvas.toBlob(blob => {\n        blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n          const base64 = Buffer.from(array).toString('base64');\n          const newImageData = {\n            base64: base64,\n            contentType: 'base64'\n          };\n          resolve(newImageData);\n        });\n      });\n    };\n\n    image.onerror = reject;\n  });\n}\nexport function resizeImageData(imageData, maxWidth, maxHeight) {\n  const imageSrc = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\n  return resizeImage(imageSrc, imageData.contentType, maxWidth, maxHeight);\n}\nexport function resizeImage(imagePath, contentType, maxWidth, maxHeight) {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.src = imagePath;\n\n    image.onload = () => {\n      let width = image.width;\n      let height = image.height;\n      let newWidth;\n      let newHeight;\n\n      if (width > height) {\n        newHeight = height * (maxWidth / width);\n        newWidth = maxWidth;\n      } else {\n        newWidth = width * (maxHeight / height);\n        newHeight = maxHeight;\n      }\n\n      let canvas = document.createElement('canvas');\n      canvas.width = newWidth;\n      canvas.height = newHeight;\n      let context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, newWidth, newHeight);\n      canvas.toBlob(blob => {\n        blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n          const base64 = Buffer.from(array).toString('base64');\n          const newImageData = {\n            base64: base64,\n            contentType: contentType.trim()\n          };\n          resolve(newImageData);\n        });\n      });\n    };\n\n    image.onerror = reject;\n  });\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/image.utils.ts"],"names":["getArrayBuffer","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsArrayBuffer","getImageFromFile","callback","errorHandler","then","data","imageData","base64","Buffer","from","toString","contentType","type","catch","readImageFileAsImageData","filePath","maxWidth","maxHeight","image","Image","src","canvas","document","createElement","width","height","context","getContext","drawImage","toBlob","blob","arrayBuffer","array","newImageData","resizeImageData","imageSrc","trim","resizeImage","imagePath","newWidth","newHeight"],"mappings":"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","sourcesContent":["import { ImageData } from '../types';\r\n\r\nconst getArrayBuffer = (file: File) => {\r\n    return new Promise<ArrayBuffer>((resolve,reject) => {\r\n       const reader = new FileReader();\r\n       reader.onload = () => resolve(reader.result as ArrayBuffer);\r\n       reader.onerror = error => reject(error);\r\n       reader.readAsArrayBuffer(file);\r\n    });\r\n}\r\n\r\nexport type GetImageCallback = (imageData: ImageData) => void;\r\nexport type GetImageErrorCallback = (error: any) => void;\r\n\r\nexport function getImageFromFile(file: File, callback: GetImageCallback, errorHandler: GetImageErrorCallback) {\r\n\r\n    getArrayBuffer(file).then(data => {\r\n        const imageData: ImageData = { base64: Buffer.from(data).toString('base64'), contentType: file.type };\r\n        callback(imageData);\r\n    })\r\n    .catch((error) => errorHandler(error));\r\n}\r\n\r\nexport function readImageFileAsImageData(filePath: string, maxWidth:number, maxHeight:number): Promise<ImageData> {\r\n\r\n    return new Promise<ImageData>((resolve,reject) => {\r\n\r\n        let image = new Image();\r\n        image.src = filePath;\r\n        image.onload = () => {\r\n    \r\n            let canvas = document.createElement('canvas');\r\n            canvas.width =image.width;\r\n            canvas.height = image.height;\r\n    \r\n            let context = canvas.getContext('2d');\r\n    \r\n            context!.drawImage(image, 0, 0);\r\n            canvas.toBlob(blob => {\r\n                blob?.arrayBuffer()\r\n                    .then((array) => {\r\n                        const base64 = Buffer.from(array).toString('base64');\r\n                        const newImageData : ImageData = {base64: base64, contentType: 'base64'};\r\n                        resolve(newImageData);\r\n                    });\r\n            });\r\n        };\r\n        image.onerror = reject;      \r\n    });  \r\n }\r\n\r\n export function resizeImageData(imageData:ImageData, maxWidth:number, maxHeight:number): Promise<ImageData> {\r\n    const imageSrc = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\r\n    return resizeImage(imageSrc, imageData.contentType, maxWidth, maxHeight);\r\n }\r\n\r\nexport function resizeImage(imagePath:string, contentType: string, maxWidth:number, maxHeight:number): Promise<ImageData> {\r\n\r\n    return new Promise<ImageData>((resolve, reject) => {\r\n\r\n        let image = new Image();\r\n        image.src = imagePath;\r\n        image.onload = () => {\r\n            let width = image.width;\r\n            let height = image.height;\r\n   \r\n            let newWidth;\r\n            let newHeight;\r\n\r\n            if (width > height) {\r\n                newHeight = height * (maxWidth / width);\r\n                newWidth = maxWidth;\r\n            } else {\r\n                newWidth = width * (maxHeight / height);\r\n                newHeight = maxHeight;\r\n            }\r\n\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = newWidth;\r\n            canvas.height = newHeight;\r\n\r\n            let context = canvas.getContext('2d');\r\n\r\n            context!.drawImage(image, 0, 0, newWidth, newHeight);\r\n\r\n            canvas.toBlob(blob => {\r\n                blob?.arrayBuffer()\r\n                    .then((array) => {\r\n                        const base64 = Buffer.from(array).toString('base64');\r\n                        const newImageData : ImageData = {base64: base64, contentType: contentType.trim() };\r\n                        resolve(newImageData);\r\n                    });\r\n            });\r\n        };\r\n        image.onerror = reject;\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}