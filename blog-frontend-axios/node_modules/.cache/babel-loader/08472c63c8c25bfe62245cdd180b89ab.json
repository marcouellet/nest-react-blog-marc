{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\EditPost.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { createPostForUpdate, minimumPostTitleLength, minimumPostDescriptionLength, minimumPostBodyLength } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\nimport Image from '../common/Image';\nimport ImageUpload from '../common/ImageUpload';\n\nconst EditPost = () => {\n  var _errors$categoryTitle, _errors$title, _errors$description, _errors$body;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        categories = _useState4[0],\n        setCategories = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        postImage = _useState8[0],\n        setPostImage = _useState8[1];\n\n  const imageValidationSchema = Yup.object().shape({\n    // error 1 here\n    base64: Yup.string().required(\"The base64 property is required\"),\n    contentType: Yup.string().required(\"The contentType property is required\")\n  });\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required').min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\n    body: Yup.string().required('Content is required').min(minimumPostBodyLength, `Content must be at least ${minimumPostBodyLength} characters long`),\n    categoryTitle: Yup.string(),\n    imageData: imageValidationSchema\n  });\n  const defaultValues = {\n    categoryTitle: '',\n    title: post === null || post === void 0 ? void 0 : post.title,\n    description: post === null || post === void 0 ? void 0 : post.description,\n    body: post === null || post === void 0 ? void 0 : post.body\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    (async () => {\n      let allCategories;\n      dispatch(createActionLoading(true));\n\n      if (!categories) {\n        const fetchCategories = async () => {\n          CategoryApiService.getAllCategories().then(categories => {\n            const noCategory = {\n              id: 'no_category',\n              title: 'No category',\n              description: ''\n            };\n            allCategories = [noCategory].concat(categories);\n            setCategories(allCategories);\n            selectCategory(allCategories, 'no_category', false);\n          }).catch(apiErrors => handleFetchCategoriesError(apiErrors));\n        };\n\n        await fetchCategories();\n      }\n\n      if (!post) {\n        const fetchPost = async () => {\n          PostApiService.getPostById(postId).then(post => {\n            setPost(post);\n            reset(post);\n            setPostImage(post === null || post === void 0 ? void 0 : post.image);\n\n            if (post === null || post === void 0 ? void 0 : post.category) {\n              selectCategory(allCategories, post.category.id, false);\n            }\n          }).catch(apiErrors => handleFetchPostError(apiErrors));\n        };\n\n        await fetchPost();\n      }\n\n      dispatch(createActionLoading(false));\n    })(); // eslint-disable-next-line\n\n  }, []);\n\n  const onSubmit = async data => {\n    if (post && isDirty) {\n      dispatch(createActionLoading(true));\n      const image = postImage;\n      const postData = createPostForUpdate(_objectSpread({}, post, {}, data, {\n        image,\n        category\n      }));\n      await PostApiService.updatePost(post.id, postData).then(() => {\n        handleSubmitFormSuccess();\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleFetchCategoriesError = apiErrors => {\n    toast.error(`Categories reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const handleSubmitFormSuccess = () => {\n    toast.success(`Post updated successfully...`);\n    navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`Post update failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`Post update failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelEditPostMessage = () => `post edition and loose changes`;\n\n  const handleResetEditPost = () => {\n    reset(post);\n\n    if (post === null || post === void 0 ? void 0 : post.category) {\n      selectCategory(categories, post.category.id, false);\n    } else {\n      selectCategory(categories, 'no_category', false);\n    }\n  };\n\n  const handleCategorySelect = e => {\n    selectCategory(categories, e, true);\n  };\n\n  const selectCategory = (categories, categoryId, setDirty) => {\n    const category = categories.find(category => category.id === categoryId);\n    setCategory((category === null || category === void 0 ? void 0 : category.id) === 'no_category' ? undefined : category);\n    setValue('categoryTitle', category.title, {\n      shouldDirty: setDirty\n    });\n  };\n\n  const handleCancelEditPost = () => {\n    navigate(`/post/${post === null || post === void 0 ? void 0 : post.id}`);\n  };\n\n  const handleImageUpload = image => {\n    setPostImage(image);\n  };\n\n  const handleDeleteImage = () => {\n    setPostImage(undefined);\n  };\n\n  const imageMaxSize = {\n    maxWidth: 600,\n    maxHeight: 400\n  };\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \" Edit Post  \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-post-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Category\",\n    onSelect: handleCategorySelect,\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, categories && categories.map(category => React.createElement(Dropdown.Item, {\n    eventKey: category.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, category.title))), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no category selected\"\n  }, register('categoryTitle'), {\n    className: `col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, (_errors$categoryTitle = errors.categoryTitle) === null || _errors$categoryTitle === void 0 ? void 0 : _errors$categoryTitle.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \" Image: \"), postImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"text\"\n  }, register('imageData'), {\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })), postImage && React.createElement(React.Fragment, null, React.createElement(Image, Object.assign({\n    imageData: postImage\n  }, register('imageData'), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, \" Enter Content \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter content\"\n  }, register('body'), {\n    className: `form-control ${errors.body ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, (_errors$body = errors.body) === null || _errors$body === void 0 ? void 0 : _errors$body.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, \"Update Post\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditPost(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, \"Reset\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditPostMessage(),\n    onClick: () => handleCancelEditPost(),\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default EditPost;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/EditPost.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","toast","Yup","yupResolver","CancelButton","createPostForUpdate","minimumPostTitleLength","minimumPostDescriptionLength","minimumPostBodyLength","PostApiService","CategoryApiService","createActionLoading","useAuth","ListErrors","DropdownButton","Dropdown","checkUnauthorized","checkForbidden","createActionSessionExpired","Image","ImageUpload","EditPost","navigate","isLoading","state","dispatch","errorList","setErrorList","postId","post","setPost","categories","setCategories","category","setCategory","postImage","setPostImage","imageValidationSchema","object","shape","base64","string","required","contentType","validationSchema","title","min","description","body","categoryTitle","imageData","defaultValues","resolver","register","handleSubmit","reset","setValue","formState","errors","isDirty","allCategories","fetchCategories","getAllCategories","then","noCategory","id","concat","selectCategory","catch","apiErrors","handleFetchCategoriesError","fetchPost","getPostById","image","handleFetchPostError","onSubmit","data","postData","updatePost","handleSubmitFormSuccess","handleSubmitFormError","error","success","cancelEditPostMessage","handleResetEditPost","handleCategorySelect","e","categoryId","setDirty","find","undefined","shouldDirty","handleCancelEditPost","handleImageUpload","handleDeleteImage","imageMaxSize","maxWidth","maxHeight","map","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { IPost, IUpdatePost, ICategory, createPostForUpdate, minimumPostTitleLength, minimumPostDescriptionLength,\r\n          minimumPostBodyLength, ImageSizeProps } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { CategoryApiService } from \"../../services/api/CategoryApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { IErrors, ImageData } from '../../types';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\nimport Image from '../common/Image';\r\nimport ImageUpload from '../common/ImageUpload';\r\n\r\nconst EditPost = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const [post, setPost] = useState<IPost>();\r\n  const [categories, setCategories] = useState<ICategory[]>();\r\n  const [category, setCategory] = useState<ICategory>();\r\n  const [postImage, setPostImage] = useState<ImageData>();\r\n \r\n  const imageValidationSchema = Yup.object().shape({ // error 1 here\r\n    base64: Yup.string().required(\"The base64 property is required\"),\r\n    contentType: Yup.string().required(\"The contentType property is required\"),\r\n  });\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required')\r\n      .min(minimumPostTitleLength, `Title must be at least ${minimumPostTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumPostDescriptionLength, `Description must be at least ${minimumPostDescriptionLength} characters long`),\r\n    body: Yup.string().required('Content is required')\r\n      .min(minimumPostBodyLength, `Content must be at least ${minimumPostBodyLength} characters long`),\r\n    categoryTitle: Yup.string(),\r\n    imageData: imageValidationSchema,\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n    categoryTitle: string;\r\n    title: string;\r\n    description: string;\r\n    body: string;\r\n    imageData: ImageData;\r\n  };\r\n\r\n  const defaultValues = {categoryTitle: '', title: post?.title, description: post?.description, body: post?.body};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    formState: { errors, isDirty }\r\n  } = useForm<UpdateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      let allCategories: ICategory[];\r\n\r\n      dispatch(createActionLoading(true));\r\n      if (!categories) {\r\n        const fetchCategories = async (): Promise<void> => {\r\n          CategoryApiService.getAllCategories()\r\n          .then(categories => {\r\n            const noCategory: ICategory = {id:'no_category', title: 'No category', description: ''};\r\n            allCategories = [noCategory].concat(categories);\r\n            setCategories(allCategories);\r\n            selectCategory(allCategories, 'no_category', false);\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchCategoriesError(apiErrors));\r\n        }\r\n        await fetchCategories();\r\n      }\r\n      if (!post) {\r\n        const fetchPost = async (): Promise<void> => {\r\n          PostApiService.getPostById(postId!)\r\n          .then(post => { \r\n            setPost(post); \r\n            reset(post);\r\n            setPostImage(post?.image);\r\n            if (post?.category) {\r\n              selectCategory(allCategories, post.category.id!, false);\r\n            }\r\n          })\r\n          .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        }\r\n        await fetchPost();\r\n      }\r\n      dispatch(createActionLoading(false));\r\n\r\n    })();\r\n // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n    if (post && isDirty) {\r\n      dispatch(createActionLoading(true));\r\n      const image = postImage;\r\n      const postData: IUpdatePost = createPostForUpdate({...post, ...data, image, category});\r\n      await PostApiService.updatePost(post.id!, postData)\r\n      .then(() => { handleSubmitFormSuccess(); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n      dispatch(createActionLoading(false));\r\n     }\r\n  } \r\n\r\n  const handleFetchCategoriesError = (apiErrors: IErrors) => {\r\n    toast.error(`Categories reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n  \r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n\r\n  const handleSubmitFormSuccess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n    navigate(`/post/${post?.id}`);\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`Post update failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate('/'); \r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`Post update failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n}\r\n\r\nconst cancelEditPostMessage = () => `post edition and loose changes`;\r\n\r\nconst handleResetEditPost = () => {\r\n  reset(post);\r\n  if (post?.category) {\r\n    selectCategory(categories!, post.category.id!, false);\r\n  } else {\r\n    selectCategory(categories!, 'no_category', false);\r\n  }\r\n}\r\n\r\nconst handleCategorySelect=(e: any)=>{\r\n  selectCategory(categories!, e, true);\r\n}\r\n\r\nconst selectCategory = (categories: ICategory[], categoryId: string, setDirty: boolean)=>{\r\n  const category = categories.find(category => category.id === categoryId);\r\n  setCategory(category?.id === 'no_category' ? undefined: category);\r\n  setValue('categoryTitle', category!.title, { shouldDirty: setDirty });\r\n}\r\n\r\nconst handleCancelEditPost = () => {\r\n  navigate(`/post/${post?.id}`);   \r\n};\r\n\r\nconst handleImageUpload = (image: ImageData) => {\r\n  setPostImage(image);\r\n}\r\n\r\nconst handleDeleteImage = () => {\r\n  setPostImage(undefined);\r\n}\r\n\r\nconst imageMaxSize: ImageSizeProps = {maxWidth:600, maxHeight:400}\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Post  </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"create-post-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n\r\n            <div className=\"form-group col-md-8\">\r\n              <div className=\"row\">\r\n                <DropdownButton title=\"Select Category\" onSelect={handleCategorySelect} className=\"col-md-2\">\r\n                    {categories && categories.map((category: ICategory) => \r\n                    (\r\n                      <Dropdown.Item eventKey={category.id}>{category.title}</Dropdown.Item>\r\n                    ))\r\n                  }\r\n                </DropdownButton>\r\n                <input    \r\n                  type=\"text\" disabled  placeholder=\"no category selected\" \r\n                  {...register('categoryTitle')}\r\n                  className={`col-md-2 form-control float-right ${errors.categoryTitle ? 'is-invalid' : ''}`}           \r\n                />\r\n                </div>\r\n              <div className=\"invalid-feedback\">{errors.categoryTitle?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4\">\r\n              <div className=\"row\">\r\n                <label className=\"col-md-2\"> Image: </label>\r\n                { postImage && \r\n                  <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleDeleteImage() } >\r\n                    Delete Image\r\n                  </button>  \r\n                }   \r\n                <ImageUpload onImageUpload={handleImageUpload} resize={imageMaxSize}/>                     \r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <input type=\"text\" {...register('imageData')} hidden/>                            \r\n              { postImage && \r\n                <>\r\n                  <Image imageData={postImage} {...register('imageData')} /> \r\n                  <br/>\r\n                </>\r\n              }    \r\n           </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                {...register('title')}\r\n                className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n           </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter description\"\r\n                {...register('description')}\r\n                className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"body\"> Enter Content </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter content\" \r\n                {...register('body')}\r\n                className={`form-control ${errors.body ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.body?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4 pull-right\">\r\n              <button className=\"btn btn-success\"  disabled={!isDirty} type=\"submit\">\r\n                Update Post\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-1 pull-right\">\r\n              <button className=\"btn btn-secondary\" disabled={!isDirty} onClick={ () => handleResetEditPost() } >\r\n                Reset\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n          </form>\r\n\r\n          <div className=\"form-group col-md-1 pull-right\">\r\n              {\r\n              <CancelButton prompt={isDirty} message={cancelEditPostMessage()} onClick={() => handleCancelEditPost()} className=\"btn btn-danger\">Cancel</CancelButton>\r\n              }\r\n           </div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default EditPost;"]},"metadata":{},"sourceType":"module"}