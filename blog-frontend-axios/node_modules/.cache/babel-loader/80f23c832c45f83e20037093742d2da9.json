{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\user\\\\CreateUser.tsx\";\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\nimport * as Yup from 'yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { UserApiService } from \"../../services/api/UserApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { minimumPasswordLength, minimumEmailLength, minimumUserNameLength } from '../../types';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport { createActionSessionExpired } from '../../reducers/auth';\nimport ImageUpload from '../common/ImageUpload';\nimport Image from '../common/Image';\n\nconst CreateUser = () => {\n  var _errors$username, _errors$email, _errors$password, _errors$role;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        userImage = _useState2[0],\n        setUserImage = _useState2[1];\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    password: Yup.string().required('Password is required').min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\n    role: Yup.string().required('Role is required')\n  });\n  const defaultValues = {\n    username: '',\n    email: '',\n    password: '',\n    role: ''\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue;\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    const image = userImage;\n\n    const userData = _objectSpread({}, data, {\n      image\n    });\n\n    await UserApiService.createUser(userData).then(() => {\n      handleSubmitFormSuccess();\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  const handleSubmitFormSuccess = () => {\n    toast.success(`User created successfully...`);\n    navigate('/user');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`User creation failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`User already exist or access denied`);\n    } else {\n      toast.error(`User creation failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelCreateUserMessage = () => `User creation and loose changes`;\n\n  const handleClearCreateUser = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelCreateUser = () => {\n    navigate('/user');\n  };\n\n  const handleRoleSelect = e => {\n    setValue('role', e);\n  };\n\n  const handleImageUpload = image => {\n    setUserImage(image);\n  };\n\n  const handleImageUploadError = image => {\n    toast.error(`User image upload failed`);\n  };\n\n  const handleDeleteImage = () => {\n    setUserImage(undefined);\n  };\n\n  const imageMaxSize = {\n    maxWidth: 600,\n    maxHeight: 400\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \" Create User \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-User-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \" Image: \"), userImage && React.createElement(\"button\", {\n    className: \"btn btn-secondary col-md-3\",\n    onClick: () => handleDeleteImage(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Delete Image\"), React.createElement(ImageUpload, {\n    onImageUpload: handleImageUpload,\n    resize: imageMaxSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, userImage && React.createElement(React.Fragment, null, React.createElement(Image, {\n    imageData: userImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter user name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \" Email \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \" Enter Password \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"div\", {\n    className: \"form-group \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: \"Select Role\",\n    onSelect: handleRoleSelect,\n    className: \"col-md-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    eventKey: \"user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"User\"), React.createElement(Dropdown.Item, {\n    eventKey: \"admin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Admin\")), React.createElement(\"input\", Object.assign({\n    style: {\n      float: 'right'\n    },\n    type: \"text\",\n    disabled: true,\n    placeholder: \"no role selected\"\n  }, register('role'), {\n    className: `col-md-1 form-control float-right ${errors.role ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, (_errors$role = errors.role) === null || _errors$role === void 0 ? void 0 : _errors$role.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Create\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleClearCreateUser(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Reset\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelCreateUserMessage(),\n    onClick: () => handleCancelCreateUser(),\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default CreateUser;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/user/CreateUser.tsx"],"names":["React","useState","useForm","useNavigate","toast","DropdownButton","Dropdown","Yup","CancelButton","yupResolver","UserApiService","createActionLoading","useAuth","ListErrors","minimumPasswordLength","minimumEmailLength","minimumUserNameLength","checkUnauthorized","checkForbidden","createActionSessionExpired","ImageUpload","Image","CreateUser","navigate","isLoading","state","dispatch","errorList","setErrorList","userImage","setUserImage","validationSchema","object","shape","username","string","required","min","email","password","role","defaultValues","resolver","register","handleSubmit","formState","errors","isDirty","reset","setValue","onSubmit","data","image","userData","createUser","then","handleSubmitFormSuccess","catch","apiErrors","handleSubmitFormError","success","error","cancelCreateUserMessage","handleClearCreateUser","keepDirty","handleCancelCreateUser","handleRoleSelect","e","handleImageUpload","handleImageUploadError","handleDeleteImage","undefined","imageMaxSize","maxWidth","maxHeight","message","float"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport * as Yup from 'yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { UserApiService } from \"../../services/api/UserApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, minimumPasswordLength, minimumEmailLength, minimumUserNameLength,\r\n          ImageSizeProps, ImageData } from '../../types';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\nimport ImageUpload from '../common/ImageUpload';\r\nimport Image from '../common/Image';\r\n\r\nconst CreateUser = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const [userImage, setUserImage] = useState<ImageData>();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required('User name is required')\r\n      .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n    email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n    password: Yup.string().required('Password is required')\r\n      .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\r\n    role: Yup.string().required('Role is required'),\r\n  });\r\n\r\n  type CreateSubmitForm = {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    role: string;\r\n  };\r\n\r\n  const defaultValues = {username: '', email: '', password: '', role: ''};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    setValue,\r\n  } = useForm<CreateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  const onSubmit = async (data: CreateSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    const image: ImageData | undefined = userImage;\r\n    const userData = {...data, image};\r\n    await UserApiService.createUser(userData)\r\n    .then(() => { handleSubmitFormSuccess(); })\r\n    .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n    dispatch(createActionLoading(false));\r\n  } \r\n\r\n  const handleSubmitFormSuccess = () => {\r\n    toast.success(`User created successfully...`);\r\n    navigate('/user');\r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`User creation failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`User already exist or access denied`);\r\n    } else {\r\n      toast.error(`User creation failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const cancelCreateUserMessage = () => `User creation and loose changes`;\r\n\r\n  const handleClearCreateUser = () => {\r\n    reset(defaultValues, { keepDirty: false});\r\n  }\r\n\r\n  const handleCancelCreateUser = () => {\r\n    navigate('/user');   \r\n  };\r\n\r\n  const handleRoleSelect=(e: any)=>{\r\n      setValue('role', e);\r\n  }\r\n\r\n  const handleImageUpload = (image: ImageData) => {\r\n    setUserImage(image);\r\n  }\r\n\r\n  const handleImageUploadError = (image: ImageData) => {\r\n    toast.error(`User image upload failed`);\r\n  }\r\n  \r\n  const handleDeleteImage = () => {\r\n    setUserImage(undefined);\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:600, maxHeight:400}\r\n\r\n  return (\r\n    <div>\r\n    <div className={\"col-md-12 form-wrapper\"}>\r\n      <h2> Create User </h2>\r\n      {errorList && <ListErrors errors={errorList} />}\r\n      <form id={\"create-User-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n\r\n        <div className=\"form-group col-md-4\">\r\n          <div className=\"row\">\r\n            <label className=\"col-md-2\"> Image: </label>\r\n            { userImage && \r\n              <button className=\"btn btn-secondary col-md-3\"  onClick={ () => handleDeleteImage() } >\r\n                Delete Image\r\n              </button>  \r\n            }  \r\n            <ImageUpload onImageUpload={handleImageUpload} resize={imageMaxSize}/>                \r\n            </div>\r\n        </div>\r\n        <div className=\"form-group col-md-12\">\r\n          { userImage && \r\n            <>\r\n              <Image imageData={userImage}/> \r\n              <br/>\r\n            </>\r\n          }\r\n          <br/>\r\n\r\n          <label htmlFor=\"username\"> Title </label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder=\"Enter user name\"\r\n            {...register('username')}\r\n            className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-12\">\r\n          <label htmlFor=\"email\"> Email </label>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter email\"\r\n            {...register('email')}\r\n            className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-12\">\r\n          <label htmlFor=\"password\"> Enter Password </label>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter password\" \r\n            {...register('password')}\r\n            className={`form-control ${errors.password ? 'is-invalid' : ''}`}           \r\n          />\r\n          <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group \">\r\n          <div className=\"row\">\r\n            <DropdownButton title=\"Select Role\" onSelect={handleRoleSelect} className=\"col-md-1\">\r\n                <Dropdown.Item eventKey='user'>User</Dropdown.Item>\r\n                <Dropdown.Item eventKey='admin'>Admin</Dropdown.Item>\r\n            </DropdownButton>\r\n            <input style={ {float: 'right'} }    \r\n              type=\"text\" disabled  placeholder=\"no role selected\" \r\n              {...register('role')}\r\n              className={`col-md-1 form-control float-right ${errors.role ? 'is-invalid' : ''}`}           \r\n            />\r\n          </div>\r\n          <div className=\"invalid-feedback\">{errors.role?.message}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-4 pull-right\">\r\n          <button className=\"btn btn-success\"  disabled={!isDirty} type=\"submit\">\r\n            Create\r\n          </button>\r\n          {isLoading &&\r\n            <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n          }\r\n        </div>\r\n\r\n        <div className=\"form-group col-md-1 pull-right\">\r\n          <button className=\"btn btn-secondary\" disabled={!isDirty} onClick={ () => handleClearCreateUser() } >\r\n            Reset\r\n          </button>\r\n          {isLoading &&\r\n            <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n          }\r\n        </div>\r\n\r\n      </form>\r\n\r\n      <div className=\"form-group col-md-1 pull-right\">\r\n              <CancelButton prompt={isDirty} message={cancelCreateUserMessage()} onClick={() => handleCancelCreateUser()} className=\"btn btn-danger\">Cancel</CancelButton>\r\n            </div>\r\n\r\n    </div>\r\n  </div>\r\n  );\r\n\r\n}\r\nexport default CreateUser\r\n"]},"metadata":{},"sourceType":"module"}