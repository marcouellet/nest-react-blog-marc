{"ast":null,"code":"import API from './APIUtils';\nexport let EnumContentType;\n\n(function (EnumContentType) {\n  EnumContentType[\"JSON\"] = \"application/json\";\n  EnumContentType[\"XML\"] = \"application/xml\";\n  EnumContentType[\"FORM\"] = \"application/x-www-form-urlencoded\";\n})(EnumContentType || (EnumContentType = {}));\n\nclass HttpApiService {\n  getAll(endpoint, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.get(`${endpoint}`, conf).then(response => {\n        resolve(response.data);\n      }); // .catch(error => {\n      //   reject(error);\n      // });\n    });\n  }\n\n  get(endpoint, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.get(`${endpoint}`, conf).then(response => {\n        resolve(response.data);\n      }); // .catch(error => {\n      //   reject(error);\n      // });\n    });\n  }\n\n  create(endpoint, data, conf = {}) {\n    return this.post(endpoint, data, conf);\n  }\n\n  post(endpoint, data, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.post(`${endpoint}`, data, conf).then(response => {\n        resolve(response.data);\n      }); // .catch(error => {\n      //   reject(error);\n      // });\n    });\n  }\n\n  update(endpoint, data, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.put(`${endpoint}`, data, conf).then(response => {\n        resolve(response.data);\n      }); // .catch(error => {\n      //   reject(error);\n      // });\n    });\n  }\n\n  delete(endpoint, conf = {}) {\n    return new Promise((resolve, reject) => {\n      API.delete(`${endpoint}`, conf).then(response => {\n        resolve(response.data);\n      }); // .catch(error => {\n      //   reject(error);\n      // });\n    });\n  }\n\n}\n\nexport default HttpApiService;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/HttpApiService.ts"],"names":["API","EnumContentType","HttpApiService","getAll","endpoint","conf","Promise","resolve","reject","get","then","response","data","create","post","update","put","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AAEA,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAKZ,MAAMC,cAAN,CAAwB;AAEZC,EAAAA,MAAV,CAAiBC,QAAjB,EAAmCC,IAAI,GAAG,EAA1C,EAA4D;AAC1D,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,GAAG,CAACS,GAAJ,CAAc,GAAEL,QAAS,EAAzB,EAA4BC,IAA5B,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBJ,QAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,OAHH,EADsC,CAKpC;AACA;AACA;AACH,KARM,CAAP;AASD;;AAESH,EAAAA,GAAV,CAAcL,QAAd,EAAgCC,IAAI,GAAG,EAAvC,EAAuD;AACrD,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,GAAG,CAACS,GAAJ,CAAY,GAAEL,QAAS,EAAvB,EAA0BC,IAA1B,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBJ,QAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,OAHH,EADsC,CAKpC;AACA;AACA;AACH,KARM,CAAP;AASD;;AAESC,EAAAA,MAAV,CAAiBT,QAAjB,EAAmCQ,IAAnC,EAA6CP,IAAI,GAAG,EAApD,EAAoE;AAClE,WAAO,KAAKS,IAAL,CAAUV,QAAV,EAAoBQ,IAApB,EAA0BP,IAA1B,CAAP;AACD;;AAESS,EAAAA,IAAV,CAAeV,QAAf,EAAiCQ,IAAjC,EAA2CP,IAAI,GAAG,EAAlD,EAAkE;AAChE,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,GAAG,CAACc,IAAJ,CAAa,GAAEV,QAAS,EAAxB,EAA2BQ,IAA3B,EAAiCP,IAAjC,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBJ,QAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,OAHH,EADsC,CAKpC;AACA;AACA;AACH,KARM,CAAP;AASD;;AAESG,EAAAA,MAAV,CAAiBX,QAAjB,EAAmCQ,IAAnC,EAA4CP,IAAI,GAAG,EAAnD,EAAmE;AACjE,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,GAAG,CAACgB,GAAJ,CAAY,GAAEZ,QAAS,EAAvB,EAA0BQ,IAA1B,EAAgCP,IAAhC,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBJ,QAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,OAHH,EADsC,CAKpC;AACA;AACA;AACH,KARM,CAAP;AASD;;AAESK,EAAAA,MAAV,CAAiBb,QAAjB,EAAmCC,IAAI,GAAG,EAA1C,EAA0D;AACxD,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,GAAG,CAACiB,MAAJ,CAAe,GAAEb,QAAS,EAA1B,EAA6BC,IAA7B,EACGK,IADH,CACQC,QAAQ,IAAI;AAChBJ,QAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,OAHH,EADsC,CAKpC;AACA;AACA;AACH,KARM,CAAP;AASD;;AAhEqB;;AAmExB,eAAeV,cAAf","sourcesContent":["import API from './APIUtils';\r\n\r\nexport enum EnumContentType {\r\n  JSON = \"application/json\",\r\n  XML = \"application/xml\",\r\n  FORM = \"application/x-www-form-urlencoded\",\r\n}\r\nclass HttpApiService<T> {\r\n\r\n  protected getAll(endpoint: string, conf = {}): Promise<T[]> {\r\n    return new Promise((resolve, reject) => {\r\n      API.get<T[]>(`${endpoint}`, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n        // .catch(error => {\r\n        //   reject(error);\r\n        // });\r\n    });\r\n  }\r\n\r\n  protected get(endpoint: string, conf = {}): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      API.get<T>(`${endpoint}`, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n        // .catch(error => {\r\n        //   reject(error);\r\n        // });\r\n    });\r\n  }\r\n\r\n  protected create(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return this.post(endpoint, data, conf)\r\n  }\r\n\r\n  protected post(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      API.post<T>(`${endpoint}`, data, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n        // .catch(error => {\r\n        //   reject(error);\r\n        // });\r\n    });\r\n  }\r\n\r\n  protected update(endpoint: string, data: T, conf = {}): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      API.put<T>(`${endpoint}`, data, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n        // .catch(error => {\r\n        //   reject(error);\r\n        // });\r\n    });\r\n  }\r\n\r\n  protected delete(endpoint: string, conf = {}): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      API.delete<T>(`${endpoint}`, conf)\r\n        .then(response => {\r\n          resolve(response.data);\r\n        });\r\n        // .catch(error => {\r\n        //   reject(error);\r\n        // });\r\n    });\r\n  }\r\n}\r\n\r\nexport default HttpApiService;"]},"metadata":{},"sourceType":"module"}