{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\Register.tsx\";\nimport React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport useAuth from '../../contexts/auth';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createActionLoadUser, createActionLoading } from '../../reducers/auth';\nimport { checkUnauthorized, checkSessionExpired } from '../../utils/html.response.utils';\nimport ListErrors from '../common/ListErrors';\nimport { minimumUserNameLength, minimumPasswordLength, minimumEmailLength } from \"../../types\";\n\nconst Register = () => {\n  var _errors$username, _errors$email, _errors$password;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    password: Yup.string().required('Password is required').min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`)\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n  const navigate = useNavigate();\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkSessionExpired(apiErrors)) {\n      toast.error(`Registration failed, email already used!`);\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`User registration failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    const username = data.username,\n          email = data.email,\n          password = data.password;\n    await AUTHAPI.register(username, email, password).then(user => {\n      toast.success(`${user.username} is registered`);\n      dispatch(createActionLoadUser(user));\n      navigate('/login');\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"auth-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 offset-md-3 col-xs-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"p\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Have an account?\")), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"username\",\n    placeholder: \"Your Name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"email\",\n    placeholder: \"Email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"button\", {\n    className: \"btn btn-lg btn-primary pull-xs-right\",\n    type: \"submit\",\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Register\"))))));\n};\n\nexport default Register;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/Register.tsx"],"names":["React","useForm","Link","useNavigate","AUTHAPI","useAuth","toast","Yup","yupResolver","createActionLoadUser","createActionLoading","checkUnauthorized","checkSessionExpired","ListErrors","minimumUserNameLength","minimumPasswordLength","minimumEmailLength","Register","useState","errorList","setErrorList","isLoading","state","dispatch","validationSchema","object","shape","username","string","required","min","email","password","resolver","register","handleSubmit","errors","formState","navigate","handleSubmitFormError","apiErrors","error","onSubmit","data","then","user","success","catch","message"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport useAuth from '../../contexts/auth';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { createActionLoadUser, createActionLoading } from '../../reducers/auth';\r\nimport { checkUnauthorized, checkSessionExpired } from '../../utils/html.response.utils';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, User, minimumUserNameLength, minimumPasswordLength, minimumEmailLength } from \"../../types\";\r\n\r\nconst Register = () => {\r\n\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const {\r\n    state: { isLoading },\r\n    dispatch,\r\n  } = useAuth();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required('User name is required')\r\n    .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n    email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n    password: Yup.string().required('Password is required')\r\n      .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\r\n  });\r\n\r\n  type RegisterSubmitForm = {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm<RegisterSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      toast.error(`Registration failed, email already used!`);\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`User registration failed, see error list`);\r\n      setErrorList(apiErrors);\r\n      }\r\n  }\r\n\r\n  const onSubmit = async (data: RegisterSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    const { username, email, password } = data;\r\n    await AUTHAPI.register(username, email, password)\r\n      .then(\r\n        (user: User) => {\r\n          toast.success(`${user.username} is registered`);\r\n          dispatch(createActionLoadUser(user));\r\n          navigate('/login');    \r\n        }\r\n      )\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); }); \r\n    dispatch(createActionLoading(false));\r\n } \r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">Register</h1>\r\n            <p className=\"text-xs-center\">\r\n              <Link to=\"/login\">Have an account?</Link>\r\n            </p>\r\n            {errorList && <ListErrors errors={errorList} />}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                      type=\"username\"\r\n                      placeholder=\"Your Name\"\r\n                      {...register('username')}\r\n                      className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  {...register('email')}\r\n                  className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    {...register('password')}\r\n                    className={`form-control ${errors.password ? 'is-invalid' : ''}`} \r\n                  />\r\n                <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n             </fieldset>\r\n              <button\r\n                className=\"btn btn-lg btn-primary pull-xs-right\"\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n              >\r\n                Register\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}