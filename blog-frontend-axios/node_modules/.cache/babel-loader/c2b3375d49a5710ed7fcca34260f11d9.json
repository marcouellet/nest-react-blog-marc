{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nexport const TOKEN_KEY = 'token';\naxios.defaults.baseURL = API_BASE_URL;\nexport function setToken(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n} // Add a request interceptor\n\naxios.interceptors.request.use(config => config, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIUtils.ts"],"names":["axios","jwtDecode","API_BASE_URL","TOKEN_KEY","defaults","baseURL","setToken","token","headers","common","isTokenValid","decoded_jwt","current_time","Date","now","valueOf","exp","error","interceptors","request","use","config","Promise","reject","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,OAAlB;AAEPH,KAAK,CAACI,QAAN,CAAeC,OAAf,GAAyBH,YAAzB;AAEA,OAAO,SAASI,QAAT,CAAkBC,KAAlB,EAAwC;AAC7C,MAAIA,KAAJ,EAAW;AACTP,IAAAA,KAAK,CAACI,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,SAAQF,KAAM,EAAhE;AACD,GAFD,MAEO;AACL,WAAOP,KAAK,CAACI,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF;AAQD,OAAO,SAASC,YAAT,CAAsBH,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMI,WAAuB,GAAGV,SAAS,CAACM,KAAD,CAAzC;AACA,UAAMK,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF,C,CAED;;AACAjB,KAAK,CAACkB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACEC,MAAM,IAAIA,MADZ,EAEEJ,KAAK,IAAI;AACP,SAAOK,OAAO,CAACC,MAAR,CAAeN,KAAf,CAAP;AACD,CAJH;AAOAjB,KAAK,CAACkB,YAAN,CAAmBM,QAAnB,CAA4BJ,GAA5B,CACGI,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIGP,KAAD,IAAW;AACR,SAAOK,OAAO,CAACC,MAAR,CAAeN,KAAf,CAAP;AACF,CANH;AASA,eAAejB,KAAf","sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\n\nexport const TOKEN_KEY = 'token';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nexport function setToken(token: string | null) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\ntype JWTPayload = {\n  id: string;\n  username: string;\n  exp: number;\n};\n\nexport function isTokenValid(token: string) {\n  try {\n    const decoded_jwt: JWTPayload = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  config => config,\n  error => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n     return Promise.reject(error);\n  },\n);\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}