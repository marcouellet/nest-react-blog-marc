{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nexport const TOKEN_KEY = 'token';\naxios.defaults.baseURL = API_BASE_URL;\nexport function setToken(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\nexport function handleError(error) {\n  let errorAttributes = {};\n\n  if (error.message && error.message.length > 0) {\n    console.log('Error: ', error.message);\n    errorAttributes.message = error.message;\n  }\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n\n    if (error.response.status > 0) {\n      errorAttributes.status = error.response.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  } else if (error.request) {\n    // The client never received a response, and the request was never left\n    console.log(error.request);\n\n    if (error.request.status > 0) {\n      errorAttributes.status = error.request.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  }\n\n  return Promise.reject(errorAttributes);\n} // Add a request interceptor\n\naxios.interceptors.request.use(config => config, error => {\n  return Promise.reject(handleError(error));\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(handleError(error));\n});\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIUtils.ts"],"names":["axios","jwtDecode","API_BASE_URL","TOKEN_KEY","defaults","baseURL","setToken","token","headers","common","isTokenValid","decoded_jwt","current_time","Date","now","valueOf","exp","error","handleError","errorAttributes","message","length","console","log","response","data","status","statusText","request","Promise","reject","interceptors","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAGA,OAAO,MAAMC,SAAS,GAAG,OAAlB;AAEPH,KAAK,CAACI,QAAN,CAAeC,OAAf,GAAyBH,YAAzB;AAEA,OAAO,SAASI,QAAT,CAAkBC,KAAlB,EAAwC;AAC7C,MAAIA,KAAJ,EAAW;AACTP,IAAAA,KAAK,CAACI,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,SAAQF,KAAM,EAAhE;AACD,GAFD,MAEO;AACL,WAAOP,KAAK,CAACI,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF;AAQD,OAAO,SAASC,YAAT,CAAsBH,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMI,WAAuB,GAAGV,SAAS,CAACM,KAAD,CAAzC;AACA,UAAMK,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF;AAED,OAAO,SAASC,WAAT,CAAqBD,KAArB,EAAqD;AAC1D,MAAIE,eAAyB,GAAG,EAAhC;;AAEA,MAAIF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACG,OAAN,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAC7CC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAK,CAACG,OAA7B;AACAD,IAAAA,eAAe,CAACC,OAAhB,GAA0BH,KAAK,CAACG,OAAhC;AACD;;AAED,MAAIH,KAAK,CAACO,QAAV,EAAoB;AAClB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,QAAN,CAAeC,IAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,QAAN,CAAeE,MAA3B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,QAAN,CAAehB,OAA3B;;AACA,QAAIS,KAAK,CAACO,QAAN,CAAeE,MAAf,GAAwB,CAA5B,EAA+B;AAC7BP,MAAAA,eAAe,CAACO,MAAhB,GAAyBT,KAAK,CAACO,QAAN,CAAeE,MAAxC;AACAP,MAAAA,eAAe,CAACQ,UAAhB,GAA6BV,KAAK,CAACW,OAAN,CAAcD,UAA3C;AACD;AACF,GATD,MASO,IAAIV,KAAK,CAACW,OAAV,EAAmB;AACxB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACW,OAAlB;;AACA,QAAIX,KAAK,CAACW,OAAN,CAAcF,MAAd,GAAuB,CAA3B,EAA8B;AAC5BP,MAAAA,eAAe,CAACO,MAAhB,GAAyBT,KAAK,CAACW,OAAN,CAAcF,MAAvC;AACAP,MAAAA,eAAe,CAACQ,UAAhB,GAA6BV,KAAK,CAACW,OAAN,CAAcD,UAA3C;AACD;AACF;;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeX,eAAf,CAAP;AACF,C,CAED;;AACAnB,KAAK,CAAC+B,YAAN,CAAmBH,OAAnB,CAA2BI,GAA3B,CACEC,MAAM,IAAIA,MADZ,EAEEhB,KAAK,IAAI;AACP,SAAOY,OAAO,CAACC,MAAR,CAAeZ,WAAW,CAACD,KAAD,CAA1B,CAAP;AACD,CAJH;AAOAjB,KAAK,CAAC+B,YAAN,CAAmBP,QAAnB,CAA4BQ,GAA5B,CACGR,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIGP,KAAD,IAAW;AACT,SAAOY,OAAO,CAACC,MAAR,CAAeZ,WAAW,CAACD,KAAD,CAA1B,CAAP;AACD,CANH;AASA,eAAejB,KAAf","sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nimport { IErrors } from '../../types';\n\nexport const TOKEN_KEY = 'token';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nexport function setToken(token: string | null) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\ntype JWTPayload = {\n  id: string;\n  username: string;\n  exp: number;\n};\n\nexport function isTokenValid(token: string) {\n  try {\n    const decoded_jwt: JWTPayload = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function handleError(error : any) : Promise<IErrors> {\n  let errorAttributes : IErrors = {};\n\n  if (error.message && error.message.length > 0) {\n    console.log('Error: ', error.message);\n    errorAttributes.message = error.message;\n  }\n\n  if (error.response) {\n    // The client was given an error response (5xx, 4xx)\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n    if (error.response.status > 0) {\n      errorAttributes.status = error.response.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  } else if (error.request) {\n    // The client never received a response, and the request was never left\n    console.log(error.request);\n    if (error.request.status > 0) {\n      errorAttributes.status = error.request.status;\n      errorAttributes.statusText = error.request.statusText;\n    }\n  }\n   return Promise.reject(errorAttributes);\n}\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  config => config,\n  error => {\n    return Promise.reject(handleError(error));\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    return Promise.reject(handleError(error));\n  },\n);\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}