{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\sessionHandler.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport useAuth from '../../contexts/auth';\nimport { useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport { createActionLogout, createActionLoadUser, createActionLoading } from '../../reducers/auth';\nimport ConfirmRefresh from '../common/confirmRefresh';\nimport { toast } from \"react-toastify\";\n\nconst SessionHandler = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        askRefresh = _useState2[0],\n        setAskRefresh = _useState2[1];\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        user = _useAuth$state.user,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        isLoggingOut = _useAuth$state.isLoggingOut,\n        isSessionExpired = _useAuth$state.isSessionExpired,\n        dispatch = _useAuth.dispatch;\n\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    setAskRefresh(false);\n\n    if (isAuthenticated) {\n      dispatch(createActionLogout());\n      AUTHAPI.logout();\n      toast.info(`${user.username} is logged out`);\n      navigate('/');\n    }\n  };\n\n  const handleRefresh = async () => {\n    setAskRefresh(false);\n    dispatch(createActionLoading(true));\n    AUTHAPI.refresh().then(user => {\n      dispatch(createActionLoadUser(user));\n      toast.info(`${user.username} session renewed!`);\n    }).catch(_ => {\n      toast.error(`Refresh session failed, logging out!`);\n      handleLogout();\n    }).finally(() => dispatch(createActionLoading(false)));\n  };\n\n  const handleConfirmExit = () => {\n    setAskRefresh(false);\n  };\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      if (isLoggingOut) {\n        handleLogout();\n      } else if (isSessionExpired) {\n        setAskRefresh(true);\n      } else if (user && user.authtoken) {}\n    } // eslint-disable-next-line\n\n  }, [isAuthenticated, isLoggingOut, isSessionExpired]);\n  return React.createElement(ConfirmRefresh, {\n    show: askRefresh,\n    logout: handleLogout,\n    refresh: handleRefresh,\n    onExit: handleConfirmExit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  });\n};\n\nexport default SessionHandler;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/sessionHandler.tsx"],"names":["React","useEffect","useState","useAuth","useNavigate","AUTHAPI","createActionLogout","createActionLoadUser","createActionLoading","ConfirmRefresh","toast","SessionHandler","askRefresh","setAskRefresh","state","user","isAuthenticated","isLoggingOut","isSessionExpired","dispatch","navigate","handleLogout","logout","info","username","handleRefresh","refresh","then","catch","_","error","finally","handleConfirmExit","authtoken"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,mBAAnD,QAA8E,qBAA9E;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA,oBAEWT,QAAQ,CAAC,KAAD,CAFnB;AAAA;AAAA,QAElBU,UAFkB;AAAA,QAENC,aAFM;;AAAA,mBAG6DV,OAAO,EAHpE;AAAA,kCAGjBW,KAHiB;AAAA,QAGRC,IAHQ,kBAGRA,IAHQ;AAAA,QAGFC,eAHE,kBAGFA,eAHE;AAAA,QAGeC,YAHf,kBAGeA,YAHf;AAAA,QAG6BC,gBAH7B,kBAG6BA,gBAH7B;AAAA,QAGgDC,QAHhD,YAGgDA,QAHhD;;AAIzB,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;;AAEA,QAAMiB,YAAY,GAAG,MAAM;AACvBR,IAAAA,aAAa,CAAC,KAAD,CAAb;;AACA,QAAIG,eAAJ,EAAqB;AACjBG,MAAAA,QAAQ,CAACb,kBAAkB,EAAnB,CAAR;AACAD,MAAAA,OAAO,CAACiB,MAAR;AACAZ,MAAAA,KAAK,CAACa,IAAN,CAAY,GAAER,IAAI,CAAES,QAAS,gBAA7B;AACAJ,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACF,GARH;;AAUE,QAAMK,aAAa,GAAG,YAAY;AAChCZ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,IAAAA,QAAQ,CAACX,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACAH,IAAAA,OAAO,CAACqB,OAAR,GACCC,IADD,CACOZ,IAAD,IAAU;AACZI,MAAAA,QAAQ,CAACZ,oBAAoB,CAACQ,IAAD,CAArB,CAAR;AACAL,MAAAA,KAAK,CAACa,IAAN,CAAY,GAAER,IAAI,CAACS,QAAS,mBAA5B;AACC,KAJL,EAKCI,KALD,CAKOC,CAAC,IAAI;AACRnB,MAAAA,KAAK,CAACoB,KAAN,CAAa,sCAAb;AACAT,MAAAA,YAAY;AACf,KARD,EASCU,OATD,CASS,MAAMZ,QAAQ,CAACX,mBAAmB,CAAC,KAAD,CAApB,CATvB;AAUD,GAbD;;AAeA,QAAMwB,iBAAiB,GAAG,MAAM;AAC9BnB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAFD;;AAIFZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,eAAJ,EAAqB;AACnB,UAAIC,YAAJ,EAAkB;AAChBI,QAAAA,YAAY;AACb,OAFD,MAEO,IAAIH,gBAAJ,EAAsB;AAC3BL,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAFM,MAEA,IAAIE,IAAI,IAAIA,IAAI,CAACkB,SAAjB,EAA4B,CAElC;AACF,KATa,CAUhB;;AACC,GAXQ,EAWN,CAACjB,eAAD,EAAkBC,YAAlB,EAAgCC,gBAAhC,CAXM,CAAT;AAaA,SAAO,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAEN,UAAtB;AAAkC,IAAA,MAAM,EAAES,YAA1C;AAAwD,IAAA,OAAO,EAAEI,aAAjE;AACiB,IAAA,MAAM,EAAEO,iBADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEH,CAlDD;;AAoDA,eAAerB,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport useAuth from '../../contexts/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport { createActionLogout, createActionLoadUser, createActionLoading } from '../../reducers/auth';\r\nimport ConfirmRefresh from '../common/confirmRefresh';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SessionHandler = () => {\r\n\r\n    const [askRefresh, setAskRefresh] = useState(false);\r\n    const { state: { user, isAuthenticated, isLoggingOut, isSessionExpired}, dispatch } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogout = () => {\r\n        setAskRefresh(false);\r\n        if (isAuthenticated) {\r\n            dispatch(createActionLogout());\r\n            AUTHAPI.logout();\r\n            toast.info(`${user!.username} is logged out`);\r\n            navigate('/');\r\n        }\r\n      };\r\n\r\n      const handleRefresh = async () => {\r\n        setAskRefresh(false);\r\n        dispatch(createActionLoading(true));\r\n        AUTHAPI.refresh()\r\n        .then((user) => {\r\n            dispatch(createActionLoadUser(user));\r\n            toast.info(`${user.username} session renewed!`);\r\n            })\r\n        .catch(_ => {\r\n            toast.error(`Refresh session failed, logging out!`);\r\n            handleLogout();\r\n        })\r\n        .finally(() => dispatch(createActionLoading(false)));\r\n      };\r\n\r\n      const handleConfirmExit = () => {\r\n        setAskRefresh(false);\r\n      }\r\n\r\n    useEffect(() => {\r\n      if (isAuthenticated) {\r\n        if (isLoggingOut) {\r\n          handleLogout();\r\n        } else if (isSessionExpired) {\r\n          setAskRefresh(true);\r\n        } else if (user && user.authtoken) {\r\n\r\n        }\r\n      }\r\n    // eslint-disable-next-line\r\n    }, [isAuthenticated, isLoggingOut, isSessionExpired]);\r\n\r\n    return <ConfirmRefresh show={askRefresh} logout={handleLogout} refresh={handleRefresh}\r\n                            onExit={handleConfirmExit}></ConfirmRefresh>;\r\n}\r\n\r\nexport default SessionHandler;"]},"metadata":{},"sourceType":"module"}