{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\contexts\\\\auth.tsx\";\nimport React from 'react';\nimport { authReducer, initialState, createActionLoadUser, createActionSessionExpired } from '../reducers/auth';\nimport TokenService from '../services/api/TokenService';\nimport { isTokenValid } from '../services/api/AuthAPI';\nconst AuthContext = React.createContext({\n  state: initialState,\n  dispatch: () => initialState\n});\nexport function AuthProvider(props) {\n  const _React$useReducer = React.useReducer(authReducer, initialState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  React.useEffect(() => {\n    const token = TokenService.getLocalAccessToken();\n    const user = TokenService.getUser();\n    if (!user) return;\n\n    if (isTokenValid(user.authtoken.accessToken)) {\n      dispatch(createActionLoadUser(user));\n    } else {\n      dispatch(createActionSessionExpired());\n    }\n  }, []);\n  return React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      state,\n      dispatch\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n}\nexport default function useAuth() {\n  return React.useContext(AuthContext);\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/contexts/auth.tsx"],"names":["React","authReducer","initialState","createActionLoadUser","createActionSessionExpired","TokenService","isTokenValid","AuthContext","createContext","state","dispatch","AuthProvider","props","useReducer","useEffect","token","getLocalAccessToken","user","getUser","authtoken","accessToken","useAuth","useContext"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,YAFF,EAKEC,oBALF,EAMEC,0BANF,QAOO,kBAPP;AAQA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAOA,MAAMC,WAAW,GAAGP,KAAK,CAACQ,aAAN,CAAsC;AACxDC,EAAAA,KAAK,EAAEP,YADiD;AAExDQ,EAAAA,QAAQ,EAAE,MAAMR;AAFwC,CAAtC,CAApB;AAKA,OAAO,SAASS,YAAT,CAAsBC,KAAtB,EAA0D;AAAA,4BACrCZ,KAAK,CAACa,UAAN,CAAiBZ,WAAjB,EAA8BC,YAA9B,CADqC;AAAA;AAAA,QACxDO,KADwD;AAAA,QACjDC,QADiD;;AAE/DV,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB,UAAMC,KAAK,GAAGV,YAAY,CAACW,mBAAb,EAAd;AACA,UAAMC,IAAI,GAAGZ,YAAY,CAACa,OAAb,EAAb;AAEA,QAAI,CAACD,IAAL,EAAW;;AAEX,QAAIX,YAAY,CAACW,IAAI,CAACE,SAAL,CAAgBC,WAAjB,CAAhB,EAA+C;AAC7CV,MAAAA,QAAQ,CAACP,oBAAoB,CAACc,IAAD,CAArB,CAAR;AACD,KAFD,MAEO;AACLP,MAAAA,QAAQ,CAACN,0BAA0B,EAA3B,CAAR;AACD;AACF,GAXD,EAWG,EAXH;AAaA,SAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAA7B,KAAsDE,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,eAAe,SAASS,OAAT,GAAmB;AAChC,SAAOrB,KAAK,CAACsB,UAAN,CAAiBf,WAAjB,CAAP;AACD","sourcesContent":["import React from 'react';\r\nimport {\r\n  authReducer,\r\n  initialState,\r\n  AuthAction,\r\n  AuthState,\r\n  createActionLoadUser,\r\n  createActionSessionExpired,\r\n} from '../reducers/auth';\r\nimport TokenService from '../services/api/TokenService';\r\nimport { isTokenValid } from '../services/api/AuthAPI';\r\n\r\ntype AuthContextProps = {\r\n  state: AuthState;\r\n  dispatch: React.Dispatch<AuthAction>;\r\n};\r\n\r\nconst AuthContext = React.createContext<AuthContextProps>({\r\n  state: initialState,\r\n  dispatch: () => initialState,\r\n});\r\n\r\nexport function AuthProvider(props: React.PropsWithChildren<{}>) {\r\n  const [state, dispatch] = React.useReducer(authReducer, initialState);\r\n  React.useEffect(() => {\r\n    const token = TokenService.getLocalAccessToken();\r\n    const user = TokenService.getUser();\r\n\r\n    if (!user) return;\r\n\r\n    if (isTokenValid(user.authtoken!.accessToken)) {\r\n      dispatch(createActionLoadUser(user));\r\n    } else {\r\n      dispatch(createActionSessionExpired())\r\n    }\r\n  }, []);\r\n\r\n  return <AuthContext.Provider value={{ state, dispatch }} {...props} />;\r\n}\r\n\r\nexport default function useAuth() {\r\n  return React.useContext(AuthContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}