{"ast":null,"code":"import HttpApiService from \"./HttpApiService\";\nconst POST_ENDPOINT = `/post`;\n\nclass PostApi extends HttpApiService {\n  constructor(...args) {\n    super(...args);\n\n    this.getPostById = id => {\n      return super.get(`${POST_ENDPOINT}/${id}`);\n    };\n\n    this.getNumberOfPostsForUser = userId => {\n      return super.getCount(`${POST_ENDPOINT}/count/user/${userId}`);\n    };\n\n    this.getNumberOfPostsForCategory = categoryId => {\n      return super.getCount(`${POST_ENDPOINT}/count/category/${categoryId}`);\n    };\n\n    this.findManyPosts = postTitleFilter => {\n      return super.findMany(`${POST_ENDPOINT}/findMany`, this.buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.findManyPostsForCategory = (categoryId, postTitleFilter) => {\n      return super.findMany(`${POST_ENDPOINT}/findMany/category/${categoryId}`, this.buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.findManyPostsWithoutCategory = postTitleFilter => {\n      return super.findMany(`${POST_ENDPOINT}/findMany/nocategory`, this.buildPostTitleFilter(postTitleFilter));\n    };\n\n    this.createPost = data => {\n      return super.create(`${POST_ENDPOINT}/create`, data);\n    };\n\n    this.updatePost = (id, data) => {\n      return super.update(`${POST_ENDPOINT}/update/${id}`, data);\n    };\n\n    this.deletePost = id => {\n      return super.delete(`${POST_ENDPOINT}/delete/${id}`);\n    };\n  }\n\n  //TODO Should be done on server side\n  buildPostTitleFilter(postTitleFilter) {\n    let filter = {};\n\n    if (postTitleFilter) {\n      filter.title = {\n        \"$regex\": postTitleFilter,\n        \"$options\": \"i\"\n      };\n    }\n\n    return filter;\n  }\n\n}\n\nexport const PostApiService = new PostApi();","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/PostApiService.ts"],"names":["HttpApiService","POST_ENDPOINT","PostApi","getPostById","id","get","getNumberOfPostsForUser","userId","getCount","getNumberOfPostsForCategory","categoryId","findManyPosts","postTitleFilter","findMany","buildPostTitleFilter","findManyPostsForCategory","findManyPostsWithoutCategory","createPost","data","create","updatePost","update","deletePost","delete","filter","title","PostApiService"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAGA,MAAMC,aAAa,GAAI,OAAvB;;AAEA,MAAMC,OAAN,SAAsBF,cAAtB,CAA4C;AAAA;AAAA;;AAAA,SAW1CG,WAX0C,GAW3BC,EAAD,IAAgB;AAC5B,aAAO,MAAMC,GAAN,CAAW,GAAEJ,aAAc,IAAGG,EAAG,EAAjC,CAAP;AACD,KAbyC;;AAAA,SAe1CE,uBAf0C,GAefC,MAAD,IAAoB;AAC5C,aAAO,MAAMC,QAAN,CAAgB,GAAEP,aAAc,eAAcM,MAAO,EAArD,CAAP;AACD,KAjByC;;AAAA,SAmB1CE,2BAnB0C,GAmBXC,UAAD,IAAwB;AACpD,aAAO,MAAMF,QAAN,CAAgB,GAAEP,aAAc,mBAAkBS,UAAW,EAA7D,CAAP;AACD,KArByC;;AAAA,SAuB1CC,aAvB0C,GAuBzBC,eAAD,IAA6B;AAC3C,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,WAAhC,EAA4C,KAAKa,oBAAL,CAA0BF,eAA1B,CAA5C,CAAP;AACD,KAzByC;;AAAA,SA2B1CG,wBA3B0C,GA2Bf,CAACL,UAAD,EAAqBE,eAArB,KAAiD;AAC1E,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,sBAAqBS,UAAW,EAAhE,EAAmE,KAAKI,oBAAL,CAA0BF,eAA1B,CAAnE,CAAP;AACD,KA7ByC;;AAAA,SA+B1CI,4BA/B0C,GA+BVJ,eAAD,IAA6B;AACxD,aAAO,MAAMC,QAAN,CAAgB,GAAEZ,aAAc,sBAAhC,EAAuD,KAAKa,oBAAL,CAA0BF,eAA1B,CAAvD,CAAP;AACH,KAjCyC;;AAAA,SAmC1CK,UAnC0C,GAmC5BC,IAAD,IAAiB;AAC5B,aAAO,MAAMC,MAAN,CAAc,GAAElB,aAAc,SAA9B,EAAwCiB,IAAxC,CAAP;AACD,KArCyC;;AAAA,SAuC1CE,UAvC0C,GAuC7B,CAAChB,EAAD,EAAac,IAAb,KAAmC;AAC9C,aAAO,MAAMG,MAAN,CAAc,GAAEpB,aAAc,WAAUG,EAAG,EAA3C,EAA8Cc,IAA9C,CAAP;AACD,KAzCyC;;AAAA,SA2C1CI,UA3C0C,GA2C5BlB,EAAD,IAAgB;AAC3B,aAAO,MAAMmB,MAAN,CAAc,GAAEtB,aAAc,WAAUG,EAAG,EAA3C,CAAP;AACD,KA7CyC;AAAA;;AAE1C;AACQU,EAAAA,oBAAR,CAA6BF,eAA7B,EAA4D;AAC1D,QAAIY,MAAW,GAAG,EAAlB;;AACA,QAAIZ,eAAJ,EAAqB;AAClBY,MAAAA,MAAM,CAACC,KAAP,GAAe;AAAE,kBAAUb,eAAZ;AAA6B,oBAAY;AAAzC,OAAf;AACF;;AACD,WAAOY,MAAP;AACD;;AATyC;;AAgD5C,OAAO,MAAME,cAAc,GAAG,IAAIxB,OAAJ,EAAvB","sourcesContent":["import HttpApiService from \"./HttpApiService\";\r\nimport { IPost, IUpdatePost } from \"../../types\";\r\n\r\nconst POST_ENDPOINT = `/post`;\r\n\r\nclass PostApi extends HttpApiService<IPost> {\r\n \r\n  //TODO Should be done on server side\r\n  private buildPostTitleFilter(postTitleFilter: string) : any {\r\n    let filter: any = {};\r\n    if (postTitleFilter) {\r\n       filter.title = { \"$regex\": postTitleFilter, \"$options\": \"i\" }\r\n    }\r\n    return filter;\r\n  }\r\n\r\n  getPostById = (id: string) => {\r\n    return super.get(`${POST_ENDPOINT}/${id}`);\r\n  };\r\n\r\n  getNumberOfPostsForUser = (userId: string) => {\r\n    return super.getCount(`${POST_ENDPOINT}/count/user/${userId}`);\r\n  };\r\n\r\n  getNumberOfPostsForCategory = (categoryId: string) => {\r\n    return super.getCount(`${POST_ENDPOINT}/count/category/${categoryId}`);\r\n  };\r\n\r\n  findManyPosts = (postTitleFilter: string) => {\r\n    return super.findMany(`${POST_ENDPOINT}/findMany`, this.buildPostTitleFilter(postTitleFilter));\r\n  }\r\n\r\n  findManyPostsForCategory = (categoryId: string, postTitleFilter: string) => {\r\n    return super.findMany(`${POST_ENDPOINT}/findMany/category/${categoryId}`, this.buildPostTitleFilter(postTitleFilter));\r\n  };\r\n\r\n  findManyPostsWithoutCategory = (postTitleFilter: string) => {\r\n      return super.findMany(`${POST_ENDPOINT}/findMany/nocategory`, this.buildPostTitleFilter(postTitleFilter));  \r\n  };\r\n\r\n  createPost = (data: IPost) => {\r\n    return super.create(`${POST_ENDPOINT}/create`, data);\r\n  };\r\n\r\n  updatePost = (id: string, data: IUpdatePost) => {\r\n    return super.update(`${POST_ENDPOINT}/update/${id}`, data);\r\n  };\r\n\r\n  deletePost = (id: string) => {\r\n    return super.delete(`${POST_ENDPOINT}/delete/${id}`);\r\n  };\r\n}\r\n\r\nexport const PostApiService = new PostApi();"]},"metadata":{},"sourceType":"module"}