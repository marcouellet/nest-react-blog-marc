{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\common\\\\displayModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\n\nconst DisplayModalButton = ({\n  children,\n  contentToDisplay,\n  toolTip,\n  className\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hasMouseOver = _useState4[0],\n        setHasMouseOver = _useState4[1];\n\n  const showModal = () => {\n    setIsOpen(true);\n  };\n\n  const hideModal = () => {\n    setIsOpen(false);\n  };\n\n  const renderButtonTooltip = props => {\n    return React.createElement(Tooltip, Object.assign({}, props, {\n      style: {\n        backgroundColor: 'rgba(255, 100, 100, 0.85)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), toolTip ? toolTip : 'no tooltip');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(OverlayTrigger, {\n    placement: \"top\",\n    overlay: renderButtonTooltip,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    style: {\n      border: \"none\",\n      outline: \"none\",\n      borderRadius: \"10px\",\n      backgroundColor: hasMouseOver ? \"bisque\" : \"transparent\"\n    },\n    className: className,\n    onClick: showModal,\n    onMouseEnter: () => setHasMouseOver(true),\n    onMouseLeave: () => setHasMouseOver(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, children)), React.createElement(Modal, {\n    show: isOpen,\n    onHide: hideModal,\n    centered: true,\n    dialogClassName: `modal-md`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, contentToDisplay)), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: hideModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Close\"))));\n};\n\nexport default DisplayModalButton;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/common/displayModal.tsx"],"names":["React","useState","Modal","OverlayTrigger","Tooltip","DisplayModalButton","children","contentToDisplay","toolTip","className","isOpen","setIsOpen","hasMouseOver","setHasMouseOver","showModal","hideModal","renderButtonTooltip","props","backgroundColor","border","outline","borderRadius"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAOA,MAAMC,kBAAgD,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,gBAAX;AAA6BC,EAAAA,OAA7B;AAAsCC,EAAAA;AAAtC,CAAD,KAAsD;AAAA,oBAE/ER,QAAQ,CAAC,KAAD,CAFuE;AAAA;AAAA,QAEpGS,MAFoG;AAAA,QAE5FC,SAF4F;;AAAA,qBAGnEV,QAAQ,CAAC,KAAD,CAH2D;AAAA;AAAA,QAGpGW,YAHoG;AAAA,QAGtFC,eAHsF;;AAK3G,QAAMC,SAAS,GAAG,MAAM;AACpBH,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAFD;;AAIA,QAAMI,SAAS,GAAG,MAAM;AACpBJ,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GAFD;;AAIA,QAAMK,mBAAmB,GAAIC,KAAD,IAAgB;AACxC,WACI,oBAAC,OAAD,oBACQA,KADR;AAEI,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIKV,OAAO,GAAGA,OAAH,GAAa,YAJzB,CADJ;AAQH,GATD;;AAWA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,KAA1B;AAAgC,IAAA,OAAO,EAAEQ,mBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AACI,IAAA,KAAK,EAAE;AACHG,MAAAA,MAAM,EAAE,MADL;AAEHC,MAAAA,OAAO,EAAC,MAFL;AAGHC,MAAAA,YAAY,EAAE,MAHX;AAIHH,MAAAA,eAAe,EAAEN,YAAY,GAAG,QAAH,GAAc;AAJxC,KADX;AAOI,IAAA,SAAS,EAAEH,SAPf;AAQI,IAAA,OAAO,EAAEK,SARb;AASI,IAAA,YAAY,EAAE,MAAMD,eAAe,CAAC,IAAD,CATvC;AAUI,IAAA,YAAY,EAAE,MAAMA,eAAe,CAAC,KAAD,CAVvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKP,QAZL,CADH,CADL,EAkBI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEI,MAAb;AAAqB,IAAA,MAAM,EAAEK,SAA7B;AAAwC,IAAA,QAAQ,MAAhD;AAAiD,IAAA,eAAe,EAAG,UAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,gBADL,CADJ,CADJ,EAMQ,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAoC,IAAA,OAAO,EAAEQ,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADA,CANR,CAlBJ,CADJ;AA+BH,CAvDD;;AAyDA,eAAeV,kBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\ntype DisplayButtonProps = React.HTMLProps<HTMLButtonElement> & {\r\n    contentToDisplay: string | JSX.Element,\r\n    toolTip?: string\r\n}\r\n\r\nconst DisplayModalButton: React.FC<DisplayButtonProps> = ({children, contentToDisplay, toolTip, className}) => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [hasMouseOver, setHasMouseOver] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsOpen(true);  \r\n    };\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const renderButtonTooltip = (props: any) => {\r\n        return (\r\n            <Tooltip \r\n                {...props}\r\n                style={{backgroundColor: 'rgba(255, 100, 100, 0.85)'}}\r\n            >\r\n                {toolTip ? toolTip : 'no tooltip'}\r\n            </Tooltip> \r\n        ) \r\n    };\r\n\r\n    return (\r\n        <div>\r\n             <OverlayTrigger placement=\"top\" overlay={renderButtonTooltip}>\r\n                <button \r\n                    style={{\r\n                        border: \"none\",\r\n                        outline:\"none\",\r\n                        borderRadius: \"10px\",\r\n                        backgroundColor: hasMouseOver ? \"bisque\" : \"transparent\"\r\n                    }}\r\n                    className={className} \r\n                    onClick={showModal}\r\n                    onMouseEnter={() => setHasMouseOver(true)}\r\n                    onMouseLeave={() => setHasMouseOver(false)}\r\n                >\r\n                    {children}\r\n                </button>\r\n             </OverlayTrigger>\r\n            \r\n            <Modal show={isOpen} onHide={hideModal} centered dialogClassName={`modal-md`}>\r\n                <Modal.Body>\r\n                    <div>\r\n                        {contentToDisplay} \r\n                    </div>                  \r\n                </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <button className=\"btn btn-primary\" onClick={hideModal}>Close</button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n)\r\n};\r\n\r\nexport default DisplayModalButton;"]},"metadata":{},"sourceType":"module"}