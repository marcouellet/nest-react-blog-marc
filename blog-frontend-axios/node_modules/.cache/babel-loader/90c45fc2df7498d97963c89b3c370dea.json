{"ast":null,"code":"export function resizeImage(imageData, maxWidth, maxHeight) {\n  let image = new Image();\n  image.src = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\n\n  image.onload = () => {\n    let width = image.width;\n    let height = image.height;\n\n    if (width <= maxWidth && height <= maxHeight) {\n      return imageData;\n    }\n\n    let newWidth;\n    let newHeight;\n\n    if (width > height) {\n      newHeight = height * (maxWidth / width);\n      newWidth = maxWidth;\n    } else {\n      newWidth = width * (maxHeight / height);\n      newHeight = maxHeight;\n    }\n\n    let canvas = document.createElement('canvas');\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    let context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0, newWidth, newHeight);\n    canvas.toBlob(blob => {\n      blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n        const base64 = Buffer.from(array).toString('base64');\n        const newImageData = {\n          base64: base64,\n          contentType: imageData.contentType.trim()\n        };\n        return newImageData;\n      });\n    });\n  };\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/image.utils.ts"],"names":["resizeImage","imageData","maxWidth","maxHeight","image","Image","src","contentType","trim","base64","onload","width","height","newWidth","newHeight","canvas","document","createElement","context","getContext","drawImage","toBlob","blob","arrayBuffer","then","array","Buffer","from","toString","newImageData"],"mappings":"AAEA,OAAO,SAASA,WAAT,CAAqBC,SAArB,EAA0CC,QAA1C,EAA2DC,SAA3D,EAA6E;AAEhF,MAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAY,UAAUL,SAAS,CAACM,WAAV,CAAsBC,IAAtB,EAAV,GAAyC,UAAzC,GAAsDP,SAAS,CAACQ,MAA5E;;AACAL,EAAAA,KAAK,CAACM,MAAN,GAAe,MAAM;AACjB,QAAIC,KAAK,GAAGP,KAAK,CAACO,KAAlB;AACA,QAAIC,MAAM,GAAGR,KAAK,CAACQ,MAAnB;;AAEA,QAAID,KAAK,IAAIT,QAAT,IAAqBU,MAAM,IAAIT,SAAnC,EAA8C;AACtC,aAAOF,SAAP;AACP;;AAED,QAAIY,QAAJ;AACA,QAAIC,SAAJ;;AAEA,QAAIH,KAAK,GAAGC,MAAZ,EAAoB;AAChBE,MAAAA,SAAS,GAAGF,MAAM,IAAIV,QAAQ,GAAGS,KAAf,CAAlB;AACAE,MAAAA,QAAQ,GAAGX,QAAX;AACH,KAHD,MAGO;AACHW,MAAAA,QAAQ,GAAGF,KAAK,IAAIR,SAAS,GAAGS,MAAhB,CAAhB;AACAE,MAAAA,SAAS,GAAGX,SAAZ;AACH;;AAED,QAAIY,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,IAAAA,MAAM,CAACJ,KAAP,GAAeE,QAAf;AACAE,IAAAA,MAAM,CAACH,MAAP,GAAgBE,SAAhB;AAEA,QAAII,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;AAEAD,IAAAA,OAAO,CAAEE,SAAT,CAAmBhB,KAAnB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgCS,QAAhC,EAA0CC,SAA1C;AAEAC,IAAAA,MAAM,CAACM,MAAP,CAAcC,IAAI,IAAI;AAClBA,MAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,WAAN,GACKC,IADL,CACWC,KAAD,IAAW;AACb,cAAMhB,MAAM,GAAGiB,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,QAAnB,CAA4B,QAA5B,CAAf;AACA,cAAMC,YAAwB,GAAG;AAACpB,UAAAA,MAAM,EAAEA,MAAT;AAAiBF,UAAAA,WAAW,EAAEN,SAAS,CAACM,WAAV,CAAsBC,IAAtB;AAA9B,SAAjC;AACA,eAAOqB,YAAP;AACH,OALL;AAMH,KAPD;AAQH,GAnCD;AAoCH","sourcesContent":["import { ImageData } from '../types';\r\n\r\nexport function resizeImage(imageData:ImageData, maxWidth:number, maxHeight:number) {\r\n\r\n    let image = new Image();\r\n    image.src = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\r\n    image.onload = () => {\r\n        let width = image.width;\r\n        let height = image.height;\r\n        \r\n        if (width <= maxWidth && height <= maxHeight) {\r\n                return imageData;\r\n        }\r\n\r\n        let newWidth;\r\n        let newHeight;\r\n\r\n        if (width > height) {\r\n            newHeight = height * (maxWidth / width);\r\n            newWidth = maxWidth;\r\n        } else {\r\n            newWidth = width * (maxHeight / height);\r\n            newHeight = maxHeight;\r\n        }\r\n\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = newWidth;\r\n        canvas.height = newHeight;\r\n\r\n        let context = canvas.getContext('2d');\r\n\r\n        context!.drawImage(image, 0, 0, newWidth, newHeight);\r\n\r\n        canvas.toBlob(blob => {\r\n            blob?.arrayBuffer()\r\n                .then((array) => {\r\n                    const base64 = Buffer.from(array).toString('base64');\r\n                    const newImageData : ImageData = {base64: base64, contentType: imageData.contentType.trim() };\r\n                    return newImageData;\r\n                });\r\n        });\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}