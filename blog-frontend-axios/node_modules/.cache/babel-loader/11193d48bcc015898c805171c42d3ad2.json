{"ast":null,"code":"import API from './APIService';\nexport let EnumContentType;\n\n(function (EnumContentType) {\n  EnumContentType[\"JSON\"] = \"application/json\";\n  EnumContentType[\"XML\"] = \"application/xml\";\n  EnumContentType[\"FORM\"] = \"application/x-www-form-urlencoded\";\n})(EnumContentType || (EnumContentType = {}));\n\nclass HttpApiService {\n  get$(endpoint, conf = {}) {\n    return API.get(`${endpoint}`, conf).then(response => response.data);\n  }\n\n  put$(endpoint, data, conf = {}) {\n    return API.put(`${endpoint}`, data, conf).then(response => response.data);\n  }\n\n  post$(endpoint, data, conf = {}) {\n    return API.post(`${endpoint}`, data, conf).then(response => response.data);\n  }\n\n  delete$(endpoint, conf = {}) {\n    return API.delete(`${endpoint}`, conf).then(response => response.data);\n  }\n\n  getAll(endpoint, conf = {}) {\n    return this.get$(endpoint, conf);\n  }\n\n  get(endpoint, conf = {}) {\n    return this.get$(endpoint, conf);\n  }\n\n  getCount(endpoint, conf = {}) {\n    return this.get$(endpoint, conf);\n  }\n\n  findMany(endpoint, data, conf = {}) {\n    return this.put$(endpoint, data, conf);\n  }\n\n  create(endpoint, data, conf = {}) {\n    return this.post(endpoint, data, conf);\n  }\n\n  post(endpoint, data, conf = {}) {\n    return this.post$(endpoint, data, conf);\n  }\n\n  update(endpoint, data, conf = {}) {\n    return this.put$(endpoint, data, conf);\n  }\n\n  delete(endpoint, conf = {}) {\n    return this.delete$(endpoint, conf);\n  }\n\n}\n\nexport default HttpApiService;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/HttpApiService.ts"],"names":["API","EnumContentType","HttpApiService","get$","endpoint","conf","get","then","response","data","put$","put","post$","post","delete$","delete","getAll","getCount","findMany","create","update"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AAEA,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAKZ,MAAMC,cAAN,CAAwB;AAEdC,EAAAA,IAAR,CAAgBC,QAAhB,EAAkCC,IAAI,GAAG,EAAzC,EAAyD;AACvD,WAAOL,GAAG,CAACM,GAAJ,CAAY,GAAEF,QAAS,EAAvB,EAA0BC,IAA1B,EACNE,IADM,CACDC,QAAQ,IAAGA,QAAQ,CAACC,IADnB,CAAP;AAED;;AAEOC,EAAAA,IAAR,CAAgBN,QAAhB,EAAkCK,IAAlC,EAA4CJ,IAAI,GAAG,EAAnD,EAAmE;AACjE,WAAOL,GAAG,CAACW,GAAJ,CAAY,GAAEP,QAAS,EAAvB,EAA0BK,IAA1B,EAAgCJ,IAAhC,EACNE,IADM,CACDC,QAAQ,IAAGA,QAAQ,CAACC,IADnB,CAAP;AAED;;AAEOG,EAAAA,KAAR,CAAiBR,QAAjB,EAAmCK,IAAnC,EAA6CJ,IAAI,GAAG,EAApD,EAAoE;AAClE,WAAOL,GAAG,CAACa,IAAJ,CAAa,GAAET,QAAS,EAAxB,EAA2BK,IAA3B,EAAiCJ,IAAjC,EACNE,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IADpB,CAAP;AAED;;AAEOK,EAAAA,OAAR,CAAmBV,QAAnB,EAAqCC,IAAI,GAAG,EAA5C,EAA4D;AAC1D,WAAOL,GAAG,CAACe,MAAJ,CAAe,GAAEX,QAAS,EAA1B,EAA6BC,IAA7B,EACNE,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IADpB,CAAP;AAED;;AAESO,EAAAA,MAAV,CAAiBZ,QAAjB,EAAmCC,IAAI,GAAG,EAA1C,EAA4D;AAC1D,WAAO,KAAKF,IAAL,CAAeC,QAAf,EAAyBC,IAAzB,CAAP;AACD;;AAESC,EAAAA,GAAV,CAAcF,QAAd,EAAgCC,IAAI,GAAG,EAAvC,EAAuD;AACrD,WAAO,KAAKF,IAAL,CAAaC,QAAb,EAAuBC,IAAvB,CAAP;AACD;;AAESY,EAAAA,QAAV,CAAmBb,QAAnB,EAAqCC,IAAI,GAAG,EAA5C,EAAiE;AAC/D,WAAO,KAAKF,IAAL,CAAkBC,QAAlB,EAA4BC,IAA5B,CAAP;AACD;;AAESa,EAAAA,QAAV,CAAmBd,QAAnB,EAAqCK,IAArC,EAA+CJ,IAAI,GAAG,EAAtD,EAAwE;AACtE,WAAO,KAAKK,IAAL,CAAeN,QAAf,EAAyBK,IAAzB,EAA+BJ,IAA/B,CAAP;AACD;;AAESc,EAAAA,MAAV,CAAiBf,QAAjB,EAAmCK,IAAnC,EAA6CJ,IAAI,GAAG,EAApD,EAAoE;AAClE,WAAO,KAAKQ,IAAL,CAAUT,QAAV,EAAoBK,IAApB,EAA0BJ,IAA1B,CAAP;AACD;;AAESQ,EAAAA,IAAV,CAAeT,QAAf,EAAiCK,IAAjC,EAA2CJ,IAAI,GAAG,EAAlD,EAAkE;AAChE,WAAO,KAAKO,KAAL,CAAcR,QAAd,EAAwBK,IAAxB,EAA8BJ,IAA9B,CAAP;AACD;;AAESe,EAAAA,MAAV,CAAiBhB,QAAjB,EAAmCK,IAAnC,EAA4CJ,IAAI,GAAG,EAAnD,EAAmE;AACjE,WAAO,KAAKK,IAAL,CAAaN,QAAb,EAAuBK,IAAvB,EAA6BJ,IAA7B,CAAP;AACD;;AAESU,EAAAA,MAAV,CAAiBX,QAAjB,EAAmCC,IAAI,GAAG,EAA1C,EAA0D;AACxD,WAAO,KAAKS,OAAL,CAAgBV,QAAhB,EAA0BC,IAA1B,CAAP;AACD;;AApDqB;;AAuDxB,eAAeH,cAAf","sourcesContent":["import API from './APIService';\r\n\r\nexport enum EnumContentType {\r\n  JSON = \"application/json\",\r\n  XML = \"application/xml\",\r\n  FORM = \"application/x-www-form-urlencoded\",\r\n}\r\nclass HttpApiService<T> {\r\n\r\n  private get$<T>(endpoint: string, conf = {}): Promise<T> {\r\n    return API.get<T>(`${endpoint}`, conf)\r\n    .then(response =>response.data);\r\n  }\r\n\r\n  private put$<T>(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return API.put<T>(`${endpoint}`, data, conf)\r\n    .then(response =>response.data);\r\n  }\r\n\r\n  private post$<T>(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return API.post<T>(`${endpoint}`, data, conf)\r\n    .then(response => response.data);\r\n  }\r\n\r\n  private delete$<T>(endpoint: string, conf = {}): Promise<T> {\r\n    return API.delete<T>(`${endpoint}`, conf)\r\n    .then(response => response.data);\r\n  }\r\n\r\n  protected getAll(endpoint: string, conf = {}): Promise<T[]> {\r\n    return this.get$<T[]>(endpoint, conf);\r\n  }\r\n\r\n  protected get(endpoint: string, conf = {}): Promise<T> {\r\n    return this.get$<T>(endpoint, conf);\r\n  }\r\n\r\n  protected getCount(endpoint: string, conf = {}): Promise<number> {\r\n    return this.get$<number>(endpoint, conf);\r\n  }\r\n\r\n  protected findMany(endpoint: string, data: {}, conf = {}): Promise<T[]> {\r\n    return this.put$<T[]>(endpoint, data, conf);\r\n  }\r\n\r\n  protected create(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return this.post(endpoint, data, conf)\r\n  }\r\n\r\n  protected post(endpoint: string, data: {}, conf = {}): Promise<T> {\r\n    return this.post$<T>(endpoint, data, conf);\r\n  }\r\n\r\n  protected update(endpoint: string, data: T, conf = {}): Promise<T> {\r\n    return this.put$<T>(endpoint, data, conf);\r\n  }\r\n\r\n  protected delete(endpoint: string, conf = {}): Promise<T> {\r\n    return this.delete$<T>(endpoint, conf);\r\n  }\r\n}\r\n\r\nexport default HttpApiService;"]},"metadata":{},"sourceType":"module"}