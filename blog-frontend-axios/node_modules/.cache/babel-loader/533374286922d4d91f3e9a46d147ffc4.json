{"ast":null,"code":"export function resizeImage(imageData, maxWidth, maxHeight) {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.src = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\n\n    image.onload = () => {\n      let width = image.width;\n      let height = image.height; // if (width <= maxWidth && height <= maxHeight) {\n      //     resolve(imageData);\n      // }\n\n      let newWidth;\n      let newHeight;\n\n      if (width > height) {\n        newHeight = height * (maxWidth / width);\n        newWidth = maxWidth;\n      } else {\n        newWidth = width * (maxHeight / height);\n        newHeight = maxHeight;\n      }\n\n      let canvas = document.createElement('canvas');\n      canvas.width = newWidth;\n      canvas.height = newHeight;\n      let context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, newWidth, newHeight);\n      canvas.toBlob(blob => {\n        blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n          const base64 = Buffer.from(array).toString('base64');\n          const newImageData = {\n            base64: base64,\n            contentType: imageData.contentType.trim()\n          };\n          resolve(newImageData);\n        });\n      });\n    };\n\n    image.onerror = reject;\n  });\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/image.utils.ts"],"names":["resizeImage","imageData","maxWidth","maxHeight","Promise","resolve","reject","image","Image","src","contentType","trim","base64","onload","width","height","newWidth","newHeight","canvas","document","createElement","context","getContext","drawImage","toBlob","blob","arrayBuffer","then","array","Buffer","from","toString","newImageData","onerror"],"mappings":"AAEA,OAAO,SAASA,WAAT,CAAqBC,SAArB,EAA0CC,QAA1C,EAA2DC,SAA3D,EAAiG;AAEpG,SAAO,IAAIC,OAAJ,CAAuB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAE/C,QAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,KAAK,CAACE,GAAN,GAAY,UAAUR,SAAS,CAACS,WAAV,CAAsBC,IAAtB,EAAV,GAAyC,UAAzC,GAAsDV,SAAS,CAACW,MAA5E;;AACAL,IAAAA,KAAK,CAACM,MAAN,GAAe,MAAM;AACjB,UAAIC,KAAK,GAAGP,KAAK,CAACO,KAAlB;AACA,UAAIC,MAAM,GAAGR,KAAK,CAACQ,MAAnB,CAFiB,CAIjB;AACA;AACA;;AAEA,UAAIC,QAAJ;AACA,UAAIC,SAAJ;;AAEA,UAAIH,KAAK,GAAGC,MAAZ,EAAoB;AAChBE,QAAAA,SAAS,GAAGF,MAAM,IAAIb,QAAQ,GAAGY,KAAf,CAAlB;AACAE,QAAAA,QAAQ,GAAGd,QAAX;AACH,OAHD,MAGO;AACHc,QAAAA,QAAQ,GAAGF,KAAK,IAAIX,SAAS,GAAGY,MAAhB,CAAhB;AACAE,QAAAA,SAAS,GAAGd,SAAZ;AACH;;AAED,UAAIe,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,MAAAA,MAAM,CAACJ,KAAP,GAAeE,QAAf;AACAE,MAAAA,MAAM,CAACH,MAAP,GAAgBE,SAAhB;AAEA,UAAII,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;AAEAD,MAAAA,OAAO,CAAEE,SAAT,CAAmBhB,KAAnB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgCS,QAAhC,EAA0CC,SAA1C;AAEAC,MAAAA,MAAM,CAACM,MAAP,CAAcC,IAAI,IAAI;AAClBA,QAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,WAAN,GACKC,IADL,CACWC,KAAD,IAAW;AACb,gBAAMhB,MAAM,GAAGiB,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,QAAnB,CAA4B,QAA5B,CAAf;AACA,gBAAMC,YAAwB,GAAG;AAACpB,YAAAA,MAAM,EAAEA,MAAT;AAAiBF,YAAAA,WAAW,EAAET,SAAS,CAACS,WAAV,CAAsBC,IAAtB;AAA9B,WAAjC;AACAN,UAAAA,OAAO,CAAC2B,YAAD,CAAP;AACH,SALL;AAMH,OAPD;AAQH,KAnCD;;AAoCAzB,IAAAA,KAAK,CAAC0B,OAAN,GAAgB3B,MAAhB;AACH,GAzCM,CAAP;AA0CH","sourcesContent":["import { ImageData } from '../types';\r\n\r\nexport function resizeImage(imageData:ImageData, maxWidth:number, maxHeight:number): Promise<ImageData> {\r\n\r\n    return new Promise<ImageData>((resolve, reject) => {\r\n\r\n        let image = new Image();\r\n        image.src = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\r\n        image.onload = () => {\r\n            let width = image.width;\r\n            let height = image.height;\r\n            \r\n            // if (width <= maxWidth && height <= maxHeight) {\r\n            //     resolve(imageData);\r\n            // }\r\n\r\n            let newWidth;\r\n            let newHeight;\r\n\r\n            if (width > height) {\r\n                newHeight = height * (maxWidth / width);\r\n                newWidth = maxWidth;\r\n            } else {\r\n                newWidth = width * (maxHeight / height);\r\n                newHeight = maxHeight;\r\n            }\r\n\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = newWidth;\r\n            canvas.height = newHeight;\r\n\r\n            let context = canvas.getContext('2d');\r\n\r\n            context!.drawImage(image, 0, 0, newWidth, newHeight);\r\n\r\n            canvas.toBlob(blob => {\r\n                blob?.arrayBuffer()\r\n                    .then((array) => {\r\n                        const base64 = Buffer.from(array).toString('base64');\r\n                        const newImageData : ImageData = {base64: base64, contentType: imageData.contentType.trim() };\r\n                        resolve(newImageData);\r\n                    });\r\n            });\r\n        };\r\n        image.onerror = reject;\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}