{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\ViewPost.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { UserRole } from \"../../types\";\nimport { toast } from \"react-toastify\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading, createActionSessionExpired } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport { toLocalDateString } from '../../utils/local.storage.utils';\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\nimport Image from '../common/Image';\nimport ImageResize from '../common/ImageResize';\nimport { resizeImage } from '../../utils/image.utils';\n\nconst ViewPost = () => {\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        isAuthenticated = _useAuth$state.isAuthenticated,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errors = _React$useState2[0],\n        setErrors = _React$useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        postDefaultImage = _useState4[0],\n        setpostDefaultImage = _useState4[1];\n\n  const navigate = useNavigate();\n\n  const isAdministrator = () => isAuthenticated && (user === null || user === void 0 ? void 0 : user.role) === UserRole.ADMIN;\n\n  const deletePostMessage = post => `${post.title} post`;\n\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await getDefaultPostImage().then(imageData => {\n          setpostDefaultImage(imageData);\n        }).catch(error => {\n          throw new Error(error);\n        });\n        await PostApiService.getPostById(postId).then(post => setPost(post)).catch(apiErrors => handleFetchPostError(apiErrors));\n        dispatch(createActionLoading(false));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const getDefaultPostImage = () => {\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\n  };\n\n  const PostImage = post => {\n    if (post.image) {\n      return React.createElement(ImageResize, {\n        imageData: post.image,\n        resize: imageMaxSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    } else {\n      return postDefaultImage && React.createElement(Image, {\n        imageData: postDefaultImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n  };\n\n  const imageMaxSize = {\n    maxWidth: 200,\n    maxHeight: 200\n  };\n\n  const handleDeletePost = async id => {\n    dispatch(createActionLoading(true));\n    await PostApiService.deletePost(id).then(() => handleDeletePostSucess()).catch(apiErrors => handleDeletePostError(apiErrors));\n    dispatch(createActionLoading(false));\n    navigate('/');\n  };\n\n  const handleDeletePostSucess = () => {\n    toast.success(`Post deleted successfully...`);\n  };\n\n  const handleDeletePostError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`Post delete failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`Post delete failed, see error list`);\n      setErrors(apiErrors);\n    }\n  };\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrors(apiErrors);\n  };\n\n  const handleReturn = () => {\n    navigate('/post');\n  };\n\n  const getDateString = date => {\n    if (date) {\n      return toLocalDateString(date);\n    } else {\n      return \"no date provided\";\n    }\n  };\n\n  return (//   <section className=\"post-area\">\n    //   {errors && <ListErrors errors={errors} />}\n    //   <div className=\"container\">\n    //     <div className=\"row\">\n    //       <div className=\"col-lg-1 col-md-0\" />\n    //       <div className=\"col-lg-10 col-md-12\">\n    //         {post && \n    //         (\n    //           <div className=\"main-post\">\n    //             <div className=\"post-top-area\">\n    //               {PostImage(post)}\n    //                <h5 className=\"pre-title\">This post belongs to: {post.user!.username}</h5>\n    //               <div>\n    //                 <br/>\n    //                 <h4 className=\"title\">\n    //                   <span>\n    //                     Date posted:&nbsp;{getDateString(post.publishDate!)}\n    //                   </span>\n    //                 </h4>\n    //                 <br/>\n    //                 <h4 className=\"category\">\n    //                   <span>\n    //                     Category:\n    //                   </span>\n    //                 </h4>\n    //                 <h5>{post.category ? post.category.title : 'No category assigned'}</h5>\n    //                 <br/>\n    //                 <h4 className=\"title\">\n    //                   <span>\n    //                     Title:\n    //                   </span>\n    //                 </h4>\n    //                 <h5>{post.title}</h5>\n    //                 <br/>\n    //                 <h4 className=\"description\">\n    //                   <span>\n    //                     Description:\n    //                   </span>\n    //                 </h4>\n    //                 <h5>{post.description}</h5>\n    //                 <br/>\n    //                 <h4 className=\"body\">\n    //                   <p className=\"para\">\n    //                     {post.body}\n    //                   </p>\n    //                 </h4>\n    //               </div>\n    //             </div>\n    //             <div className=\"form-group row-md-2 pull-right\">\n    //               <button className=\"btn ml-2 btn-secondary\"  onClick={ () => handleReturn() } >\n    //                 Return\n    //               </button>\n    //               {isLoading &&\n    //                 <span className=\"fa fa-circle-o-notch fa-spin\" />\n    //               }\n    //               {isAuthenticated && !isLoading && (isAdministrator() || user!.email === post.user!.email) &&\n    //                 (\n    //                   <Link to={`/post/edit/${post.id}`} className=\"btn ml-2 btn-primary\">Edit Post</Link>                  \n    //                 )\n    //               }\n    //               {isAuthenticated && !isLoading && (isAdministrator() || user!.email === post.user!.email) && \n    //                 (               \n    //                     <DeleteButton message={deletePostMessage(post)} onClick={() => handleDeletePost(post.id!)} className=\"btn ml-2 btn-danger\">Delete</DeleteButton>\n    //                 )\n    //               }\n    //             </div>\n    //           </div>               \n    //           )           \n    //         }\n    //       </div>\n    //     </div>\n    //   </div>\n    // </section>\n    React.createElement(\"div\", {\n      className: \"Home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, post && React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, PostImage(post)), \"`           \", React.createElement(\"div\", {\n      className: \"col-md-7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Date posted:\\xA0\", getDateString(post.publishDate))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      className: \"category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Category:\")), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, post.category ? post.category.title : 'No category assigned'), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    })))))\n  );\n};\n\nexport default ViewPost;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/ViewPost.tsx"],"names":["React","useState","useEffect","useParams","useNavigate","UserRole","toast","PostApiService","createActionLoading","createActionSessionExpired","useAuth","toLocalDateString","checkUnauthorized","checkForbidden","Image","ImageResize","resizeImage","ViewPost","postId","state","isLoading","isAuthenticated","user","dispatch","post","setPost","errors","setErrors","postDefaultImage","setpostDefaultImage","navigate","isAdministrator","role","ADMIN","deletePostMessage","title","fetchData","getDefaultPostImage","then","imageData","catch","error","Error","getPostById","apiErrors","handleFetchPostError","imageMaxSize","maxWidth","maxHeight","PostImage","image","handleDeletePost","id","deletePost","handleDeletePostSucess","handleDeletePostError","success","handleReturn","getDateString","date","publishDate","category"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useParams, useNavigate } from 'react-router-dom';\r\nimport { IPost, UserRole } from \"../../types\";\r\nimport { toast } from \"react-toastify\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading, createActionSessionExpired } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, ImageData, ImageSizeProps } from '../../types';\r\nimport { toLocalDateString } from '../../utils/local.storage.utils';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/html.response.utils';\r\nimport DeleteButton from '../common/deleteConfirmation';\r\nimport Image from '../common/Image';\r\nimport ImageResize from '../common/ImageResize';\r\nimport { resizeImage } from '../../utils/image.utils';\r\n\r\nconst ViewPost = () => {\r\n\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const { state: { isLoading, isAuthenticated, user }, dispatch } = useAuth();\r\n  const [post, setPost] = useState<IPost>();\r\n  const [errors, setErrors] = React.useState<IErrors | null>();\r\n  const [postDefaultImage, setpostDefaultImage] = useState<ImageData>();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const isAdministrator = () => isAuthenticated && user?.role === UserRole.ADMIN;\r\n  const deletePostMessage = (post: IPost) => `${post.title} post`;\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await getDefaultPostImage()\r\n        .then(imageData => { setpostDefaultImage(imageData);})\r\n        .catch(error => {\r\n          throw new Error(error);\r\n        }); \r\n        await PostApiService.getPostById(postId!)\r\n        .then((post) => setPost(post))\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors))\r\n        dispatch(createActionLoading(false));\r\n      }\r\n      fetchData();  \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const getDefaultPostImage = (): Promise<ImageData> => {\r\n    return resizeImage('/default-post-image.jpg', 'image/jpg', imageMaxSize.maxWidth, imageMaxSize.maxHeight);\r\n  }\r\n\r\n  const PostImage = (post: IPost) => {\r\n    if(post.image) {\r\n      return <ImageResize imageData={post.image} resize={imageMaxSize}/>;\r\n    }  else {\r\n      return  postDefaultImage && <Image imageData={postDefaultImage}/> \r\n    }\r\n  }\r\n\r\n  const imageMaxSize: ImageSizeProps = {maxWidth:200, maxHeight:200}\r\n  \r\n  const handleDeletePost = async (id: string) => {\r\n    dispatch(createActionLoading(true));\r\n    await PostApiService.deletePost(id)\r\n     .then(() => handleDeletePostSucess())\r\n     .catch((apiErrors: IErrors) => handleDeletePostError(apiErrors))\r\n    dispatch(createActionLoading(false));\r\n    navigate('/');\r\n  }\r\n  const handleDeletePostSucess = () => {\r\n    toast.success(`Post deleted successfully...`);\r\n  }\r\n\r\n  const handleDeletePostError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`Post delete failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate('/'); \r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`Post delete failed, see error list`);\r\n      setErrors(apiErrors);      \r\n    }\r\n  }\r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrors(apiErrors);\r\n  }\r\n\r\n  const handleReturn = () => {\r\n    navigate('/post');  \r\n  }\r\n\r\n  const getDateString = (date: Date): string => {\r\n    if (date) {\r\n      return toLocalDateString(date)!;\r\n    } else {\r\n      return \"no date provided\"\r\n    }\r\n  }\r\n\r\n    return (\r\n      //   <section className=\"post-area\">\r\n      //   {errors && <ListErrors errors={errors} />}\r\n      //   <div className=\"container\">\r\n      //     <div className=\"row\">\r\n      //       <div className=\"col-lg-1 col-md-0\" />\r\n      //       <div className=\"col-lg-10 col-md-12\">\r\n      //         {post && \r\n      //         (\r\n      //           <div className=\"main-post\">\r\n      //             <div className=\"post-top-area\">\r\n      //               {PostImage(post)}\r\n      //                <h5 className=\"pre-title\">This post belongs to: {post.user!.username}</h5>\r\n      //               <div>\r\n      //                 <br/>\r\n      //                 <h4 className=\"title\">\r\n      //                   <span>\r\n      //                     Date posted:&nbsp;{getDateString(post.publishDate!)}\r\n      //                   </span>\r\n      //                 </h4>\r\n      //                 <br/>\r\n      //                 <h4 className=\"category\">\r\n      //                   <span>\r\n      //                     Category:\r\n      //                   </span>\r\n      //                 </h4>\r\n      //                 <h5>{post.category ? post.category.title : 'No category assigned'}</h5>\r\n      //                 <br/>\r\n      //                 <h4 className=\"title\">\r\n      //                   <span>\r\n      //                     Title:\r\n      //                   </span>\r\n      //                 </h4>\r\n      //                 <h5>{post.title}</h5>\r\n      //                 <br/>\r\n      //                 <h4 className=\"description\">\r\n      //                   <span>\r\n      //                     Description:\r\n      //                   </span>\r\n      //                 </h4>\r\n      //                 <h5>{post.description}</h5>\r\n      //                 <br/>\r\n      //                 <h4 className=\"body\">\r\n      //                   <p className=\"para\">\r\n      //                     {post.body}\r\n      //                   </p>\r\n      //                 </h4>\r\n      //               </div>\r\n      //             </div>\r\n      //             <div className=\"form-group row-md-2 pull-right\">\r\n      //               <button className=\"btn ml-2 btn-secondary\"  onClick={ () => handleReturn() } >\r\n      //                 Return\r\n      //               </button>\r\n      //               {isLoading &&\r\n      //                 <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n      //               }\r\n      //               {isAuthenticated && !isLoading && (isAdministrator() || user!.email === post.user!.email) &&\r\n      //                 (\r\n      //                   <Link to={`/post/edit/${post.id}`} className=\"btn ml-2 btn-primary\">Edit Post</Link>                  \r\n      //                 )\r\n      //               }\r\n      //               {isAuthenticated && !isLoading && (isAdministrator() || user!.email === post.user!.email) && \r\n      //                 (               \r\n      //                     <DeleteButton message={deletePostMessage(post)} onClick={() => handleDeletePost(post.id!)} className=\"btn ml-2 btn-danger\">Delete</DeleteButton>\r\n      //                 )\r\n      //               }\r\n      //             </div>\r\n      //           </div>               \r\n      //           )           \r\n      //         }\r\n      //       </div>\r\n      //     </div>\r\n      //   </div>\r\n      // </section>\r\n\r\n      <div className=\"Home\"> \r\n        <div className=\"container-fluid\">\r\n          {post && \r\n          (\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                {PostImage(post)}\r\n              </div>\r\n  `           <div className=\"col-md-7\">\r\n                <h4 className=\"title\">\r\n                  <span>\r\n                    Date posted:&nbsp;{getDateString(post.publishDate!)}\r\n                  </span>\r\n                </h4>\r\n                <br/>\r\n                <h4 className=\"category\">\r\n                  <span>\r\n                    Category:\r\n                  </span>\r\n                </h4>\r\n                <h5>{post.category ? post.category.title : 'No category assigned'}</h5>\r\n                <br/>\r\n             </div>\r\n           </div> \r\n          )\r\n  }\r\n\r\n          </div>\r\n      </div>  \r\n\r\n    );\r\n}\r\n\r\nexport default ViewPost;"]},"metadata":{},"sourceType":"module"}