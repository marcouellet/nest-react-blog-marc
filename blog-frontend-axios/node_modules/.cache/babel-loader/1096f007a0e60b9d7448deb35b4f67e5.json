{"ast":null,"code":"import { StatusCodes } from 'http-status-codes';\nimport { isSessionInactiveForSessionDuration } from '../services/api/AuthApiService';\nimport AuthApiService from '../services/api/AuthApiService';\nexport function getTokenFromErrors(errors) {\n  return errors['token'];\n}\nexport function checkSessionExpired(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n\n  if (statusCode === StatusCodes.UNAUTHORIZED) {\n    const token = getTokenFromErrors(errors);\n\n    if (token) {\n      if (isSessionInactiveForSessionDuration(token)) {\n        return true; // session expired for inactivity\n      } else {\n        // Must extend the session \n        const extension = AuthApiService.getSessionDurationExtension(token);\n\n        if (extension > 0) {\n          AuthApiService.extendUserSession(extension);\n          return false;\n        } else {\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\nexport function checkSessionExtendable(errors) {\n  const token = getTokenFromErrors(errors);\n  return !isSessionInactiveForSessionDuration(token);\n}\nexport function extendSession(token) {\n  const extension = AuthApiService.getSessionDurationExtension(token);\n\n  if (extension > 0) {\n    AuthApiService.extendUserSession(extension);\n  }\n}\nexport function checkNotFound(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.NOT_FOUND;\n}\nexport function checkUnauthorized(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.UNAUTHORIZED;\n}\nexport function checkForbidden(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.FORBIDDEN;\n}\nexport function checkTimeout(errors) {\n  const status = errors['status'];\n  const statusCode = parseInt(status);\n  return statusCode === StatusCodes.REQUEST_TIMEOUT;\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/html.response.utils.ts"],"names":["StatusCodes","isSessionInactiveForSessionDuration","AuthApiService","getTokenFromErrors","errors","checkSessionExpired","status","statusCode","parseInt","UNAUTHORIZED","token","extension","getSessionDurationExtension","extendUserSession","checkSessionExtendable","extendSession","checkNotFound","NOT_FOUND","checkUnauthorized","checkForbidden","FORBIDDEN","checkTimeout","REQUEST_TIMEOUT"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AAEA,SAASC,mCAAT,QAAoD,gCAApD;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AAEA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAA6C;AAChD,SAAOA,MAAM,CAAC,OAAD,CAAb;AACH;AAED,OAAO,SAASC,mBAAT,CAA6BD,MAA7B,EAAuD;AAC1D,QAAME,MAAM,GAAGF,MAAM,CAAC,QAAD,CAArB;AACA,QAAMG,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;;AACA,MAAGC,UAAU,KAAKP,WAAW,CAACS,YAA9B,EAA4C;AACxC,UAAMC,KAAK,GAAGP,kBAAkB,CAACC,MAAD,CAAhC;;AACA,QAAIM,KAAJ,EAAW;AACP,UAAIT,mCAAmC,CAACS,KAAD,CAAvC,EAAgD;AAC5C,eAAO,IAAP,CAD4C,CAC/B;AAChB,OAFD,MAEO;AACH;AACA,cAAMC,SAAS,GAAGT,cAAc,CAACU,2BAAf,CAA2CF,KAA3C,CAAlB;;AACA,YAAIC,SAAS,GAAG,CAAhB,EAAmB;AACfT,UAAAA,cAAc,CAACW,iBAAf,CAAiCF,SAAjC;AACA,iBAAO,KAAP;AACH,SAHD,MAGO;AACH,iBAAO,IAAP;AACH;AACJ;AACJ,KAbD,MAaO;AACH,aAAO,KAAP;AACH;AACJ,GAlBD,MAkBO;AACH,WAAO,KAAP;AACH;AACJ;AAED,OAAO,SAASG,sBAAT,CAAgCV,MAAhC,EAA0D;AAC7D,QAAMM,KAAK,GAAGP,kBAAkB,CAACC,MAAD,CAAhC;AACA,SAAO,CAACH,mCAAmC,CAACS,KAAD,CAA3C;AACH;AAED,OAAO,SAASK,aAAT,CAAuBL,KAAvB,EAAmC;AACtC,QAAMC,SAAS,GAAGT,cAAc,CAACU,2BAAf,CAA2CF,KAA3C,CAAlB;;AACA,MAAIC,SAAS,GAAG,CAAhB,EAAmB;AACfT,IAAAA,cAAc,CAACW,iBAAf,CAAiCF,SAAjC;AACH;AACJ;AAED,OAAO,SAASK,aAAT,CAAuBZ,MAAvB,EAAiD;AACxD,QAAME,MAAM,GAAGF,MAAM,CAAC,QAAD,CAArB;AACA,QAAMG,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKP,WAAW,CAACiB,SAAlC;AACC;AAED,OAAO,SAASC,iBAAT,CAA2Bd,MAA3B,EAAqD;AACxD,QAAME,MAAM,GAAGF,MAAM,CAAC,QAAD,CAArB;AACA,QAAMG,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKP,WAAW,CAACS,YAAlC;AACH;AAED,OAAO,SAASU,cAAT,CAAwBf,MAAxB,EAAkD;AACrD,QAAME,MAAM,GAAGF,MAAM,CAAC,QAAD,CAArB;AACA,QAAMG,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKP,WAAW,CAACoB,SAAlC;AACH;AAED,OAAO,SAASC,YAAT,CAAsBjB,MAAtB,EAAgD;AACnD,QAAME,MAAM,GAAGF,MAAM,CAAC,QAAD,CAArB;AACA,QAAMG,UAAU,GAAGC,QAAQ,CAACF,MAAD,CAA3B;AACA,SAAOC,UAAU,KAAKP,WAAW,CAACsB,eAAlC;AACH","sourcesContent":["import { StatusCodes } from 'http-status-codes';\r\nimport { IErrors } from '../types';\r\nimport { isSessionInactiveForSessionDuration } from '../services/api/AuthApiService';\r\nimport AuthApiService from '../services/api/AuthApiService';\r\n\r\nexport function getTokenFromErrors(errors: IErrors) {\r\n    return errors['token'] as any;\r\n}\r\n\r\nexport function checkSessionExpired(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    if(statusCode === StatusCodes.UNAUTHORIZED) {\r\n        const token = getTokenFromErrors(errors);\r\n        if (token) {\r\n            if (isSessionInactiveForSessionDuration(token)) {\r\n                return true; // session expired for inactivity\r\n            } else {\r\n                // Must extend the session \r\n                const extension = AuthApiService.getSessionDurationExtension(token);\r\n                if (extension > 0) {\r\n                    AuthApiService.extendUserSession(extension);\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function checkSessionExtendable(errors: IErrors): boolean {\r\n    const token = getTokenFromErrors(errors);\r\n    return !isSessionInactiveForSessionDuration(token);\r\n}\r\n\r\nexport function extendSession(token: any) {\r\n    const extension = AuthApiService.getSessionDurationExtension(token);\r\n    if (extension > 0) {\r\n        AuthApiService.extendUserSession(extension);\r\n    }\r\n}\r\n\r\nexport function checkNotFound(errors: IErrors): boolean {\r\nconst status = errors['status'] as any;\r\nconst statusCode = parseInt(status);\r\nreturn statusCode === StatusCodes.NOT_FOUND;\r\n}\r\n\r\nexport function checkUnauthorized(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    return statusCode === StatusCodes.UNAUTHORIZED;\r\n}\r\n\r\nexport function checkForbidden(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    return statusCode === StatusCodes.FORBIDDEN;\r\n}\r\n\r\nexport function checkTimeout(errors: IErrors): boolean {\r\n    const status = errors['status'] as any;\r\n    const statusCode = parseInt(status);\r\n    return statusCode === StatusCodes.REQUEST_TIMEOUT;\r\n}"]},"metadata":{},"sourceType":"module"}