{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\Edit.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createPostForUpdate } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { checkSessionExpired } from '../../utils/session';\nimport { createActionSessionExpired } from '../../reducers/auth';\n\nconst Edit = () => {\n  var _errors$title, _errors$description, _errors$body;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        _useAuth$state = _useAuth.state,\n        isLoading = _useAuth$state.isLoading,\n        user = _useAuth$state.user,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        submitSuccess = _useState4[0],\n        setSubmitSuccess = _useState4[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required'),\n    description: Yup.string().required('Description is required'),\n    body: Yup.string().required('Body is required')\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await PostApiService.getPostById(postId).then(post => {\n          setPost(post);\n        }).catch(apiErrors => handleFetchPostError(apiErrors));\n        dispatch(createActionLoading(false));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const onSubmit = async data => {\n    if (post) {\n      dispatch(createActionLoading(true));\n      const postData = createPostForUpdate(_objectSpread({}, post, {}, data));\n      await PostApiService.updatePost(post.id, postData).then(() => {\n        handleSubmitFormSucess();\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const handleSubmitFormSucess = () => {\n    toast.success(`Post updated successfully...`);\n    navigate('/');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkSessionExpired(apiErrors)) {\n      toast.error(`Post update failed, session expired`);\n      dispatch(createActionSessionExpired());\n    } else {\n      toast.error(`Post update failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \" Edit Post  \"), submitSuccess && React.createElement(\"div\", {\n    className: \"alert alert-info\",\n    role: \"alert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"The post has been edited successfully!\"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-post-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \" Write Content \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter body\"\n  }, register('body'), {\n    className: `form-control ${errors.body ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, (_errors$body = errors.body) === null || _errors$body === void 0 ? void 0 : _errors$body.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Update Post\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })))));\n};\n\nexport default Edit;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/Edit.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","toast","Yup","yupResolver","createPostForUpdate","PostApiService","createActionLoading","useAuth","ListErrors","checkSessionExpired","createActionSessionExpired","Edit","navigate","state","isLoading","user","dispatch","errorList","setErrorList","postId","post","setPost","submitSuccess","setSubmitSuccess","validationSchema","object","shape","title","string","required","description","body","resolver","register","handleSubmit","errors","formState","fetchData","getPostById","then","catch","apiErrors","handleFetchPostError","onSubmit","data","postData","updatePost","id","handleSubmitFormSucess","handleSubmitFormError","error","success","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport { IPost, IUpdatePost, createPostForUpdate } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors } from '../../types';\r\nimport { checkSessionExpired } from '../../utils/session';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\n\r\nconst Edit = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading, user }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { postId } = useParams<{ postId: string }>();\r\n  \r\n  const [post, setPost] = useState<IPost>();\r\n  const [submitSuccess, setSubmitSuccess] = useState<boolean>(false);\r\n \r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required'),\r\n    description: Yup.string().required('Description is required'),\r\n    body: Yup.string().required('Body is required'),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n    title: string;\r\n    description: string;\r\n    body: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm<UpdateSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await PostApiService.getPostById(postId!)\r\n        .then((post) => { setPost(post); })\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        dispatch(createActionLoading(false));\r\n       }\r\n      fetchData();      \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n    if (post) {\r\n      dispatch(createActionLoading(true));\r\n      const postData: IUpdatePost = createPostForUpdate({...post, ...data});\r\n      await PostApiService.updatePost(post.id!, postData)\r\n      .then(() => { handleSubmitFormSucess(); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n      dispatch(createActionLoading(false));\r\n     }\r\n  } \r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n\r\n  const handleSubmitFormSucess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n    navigate('/'); \r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkSessionExpired(apiErrors)) {\r\n      toast.error(`Post update failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n    } else {\r\n      toast.error(`Post update failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n}\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Post  </h2>\r\n\r\n          {submitSuccess && (\r\n            <div className=\"alert alert-info\" role=\"alert\">\r\n              The post has been edited successfully!\r\n                          </div>\r\n          )}\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"create-post-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                {...register('title')}\r\n                className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n           </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter description\"\r\n                {...register('description')}\r\n                className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"body\"> Write Content </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter body\" \r\n                {...register('body')}\r\n                className={`form-control ${errors.body ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.body?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4 pull-right\">\r\n              <button className=\"btn btn-success\" type=\"submit\">\r\n                Update Post\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Edit;"]},"metadata":{},"sourceType":"module"}