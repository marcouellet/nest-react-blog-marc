{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\post\\\\EditPost.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CancelButton from '../common/cancelConfirmation';\nimport { createPostForUpdate, minimumTitleLength, minimumDescriptionLength, minimumBodyLength } from \"../../types\";\nimport { PostApiService } from \"../../services/api/PostApiService\";\nimport { createActionLoading } from '../../reducers/auth';\nimport useAuth from '../../contexts/auth';\nimport ListErrors from '../common/ListErrors';\nimport { checkUnauthorized, checkForbidden } from '../../utils/response';\nimport { createActionSessionExpired } from '../../reducers/auth';\n\nconst EditPost = () => {\n  var _errors$title, _errors$description, _errors$body;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useParams = useParams(),\n        postId = _useParams.postId;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required').min(minimumTitleLength, `Title must be at least ${minimumTitleLength} characters long`),\n    description: Yup.string().required('Description is required').min(minimumDescriptionLength, `Description must be at least ${minimumDescriptionLength} characters long`),\n    body: Yup.string().required('Content is required').min(minimumBodyLength, `Content must be at least ${minimumBodyLength} characters long`)\n  });\n  const defaultValues = {\n    title: post === null || post === void 0 ? void 0 : post.title,\n    description: post === null || post === void 0 ? void 0 : post.description,\n    body: post === null || post === void 0 ? void 0 : post.body\n  };\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultValues\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        _useForm$formState = _useForm.formState,\n        errors = _useForm$formState.errors,\n        isDirty = _useForm$formState.isDirty;\n\n  useEffect(() => {\n    if (!post) {\n      const fetchData = async () => {\n        dispatch(createActionLoading(true));\n        await PostApiService.getPostById(postId).then(post => {\n          setPost(post);\n          reset(post);\n        }).catch(apiErrors => handleFetchPostError(apiErrors));\n        dispatch(createActionLoading(false));\n      };\n\n      fetchData();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const onSubmit = async data => {\n    if (post && isDirty) {\n      dispatch(createActionLoading(true));\n      const postData = createPostForUpdate(_objectSpread({}, post, {}, data));\n      await PostApiService.updatePost(post.id, postData).then(() => {\n        handleSubmitFormSucess();\n      }).catch(apiErrors => {\n        handleSubmitFormError(apiErrors);\n      });\n      dispatch(createActionLoading(false));\n    }\n  };\n\n  const handleFetchPostError = apiErrors => {\n    toast.error(`Post reading failed, see error list`);\n    setErrorList(apiErrors);\n  };\n\n  const handleSubmitFormSucess = () => {\n    toast.success(`Post updated successfully...`);\n    navigate('/');\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`Post update failed, session expired`);\n      dispatch(createActionSessionExpired());\n      navigate('/');\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`Post update failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const cancelEditPostMessage = () => `post edition and loose changes`;\n\n  const handleResetEditPost = () => {\n    reset(defaultValues, {\n      keepDirty: false\n    });\n  };\n\n  const handleCancelEditPost = () => {\n    navigate('/');\n  };\n\n  return React.createElement(\"div\", {\n    className: 'page-wrapper',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, post && React.createElement(\"div\", {\n    className: \"col-md-12 form-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \" Edit Post  \"), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"create-post-form\",\n    onSubmit: handleSubmit(onSubmit),\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \" Title \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter title\"\n  }, register('title'), {\n    className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \" Description \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter description\"\n  }, register('description'), {\n    className: `form-control ${errors.description ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \" Enter Content \"), React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    placeholder: \"Enter content\"\n  }, register('body'), {\n    className: `form-control ${errors.body ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, (_errors$body = errors.body) === null || _errors$body === void 0 ? void 0 : _errors$body.message)), React.createElement(\"div\", {\n    className: \"form-group col-md-4 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    disabled: !isDirty,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Update Post\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    disabled: !isDirty,\n    onClick: () => handleResetEditPost(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Reset\"), isLoading && React.createElement(\"span\", {\n    className: \"fa fa-circle-o-notch fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"form-group col-md-1 pull-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(CancelButton, {\n    prompt: isDirty,\n    message: cancelEditPostMessage(),\n    onClick: () => handleCancelEditPost(),\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default EditPost;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/post/EditPost.tsx"],"names":["React","useState","useEffect","useForm","useParams","useNavigate","toast","Yup","yupResolver","CancelButton","createPostForUpdate","minimumTitleLength","minimumDescriptionLength","minimumBodyLength","PostApiService","createActionLoading","useAuth","ListErrors","checkUnauthorized","checkForbidden","createActionSessionExpired","EditPost","navigate","isLoading","state","dispatch","errorList","setErrorList","postId","post","setPost","validationSchema","object","shape","title","string","required","min","description","body","defaultValues","resolver","register","handleSubmit","reset","formState","errors","isDirty","fetchData","getPostById","then","catch","apiErrors","handleFetchPostError","onSubmit","data","postData","updatePost","id","handleSubmitFormSucess","handleSubmitFormError","error","success","cancelEditPostMessage","handleResetEditPost","keepDirty","handleCancelEditPost","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport CancelButton from '../common/cancelConfirmation'\r\nimport { IPost, IUpdatePost, createPostForUpdate, minimumTitleLength, minimumDescriptionLength,\r\n          minimumBodyLength } from \"../../types\";\r\nimport { PostApiService } from \"../../services/api/PostApiService\";\r\nimport { createActionLoading } from '../../reducers/auth';\r\nimport useAuth from '../../contexts/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors } from '../../types';\r\nimport { checkUnauthorized, checkForbidden } from '../../utils/response';\r\nimport { createActionSessionExpired } from '../../reducers/auth';\r\n\r\nconst EditPost = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const { postId } = useParams<{ postId: string }>();\r\n  const [post, setPost] = useState<IPost>();\r\n \r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Title is required')\r\n      .min(minimumTitleLength, `Title must be at least ${minimumTitleLength} characters long`),\r\n    description: Yup.string().required('Description is required')\r\n      .min(minimumDescriptionLength, `Description must be at least ${minimumDescriptionLength} characters long`),\r\n    body: Yup.string().required('Content is required')\r\n      .min(minimumBodyLength, `Content must be at least ${minimumBodyLength} characters long`),\r\n  });\r\n\r\n  type UpdateSubmitForm = {\r\n    title: string;\r\n    description: string;\r\n    body: string;\r\n  };\r\n\r\n  const defaultValues = {title: post?.title, description: post?.description, body: post?.body};\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    \r\n    formState: { errors, isDirty }\r\n  } = useForm<UpdateSubmitForm>({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      const fetchData = async (): Promise<void> => {\r\n        dispatch(createActionLoading(true));\r\n        await PostApiService.getPostById(postId!)\r\n        .then((post) => { setPost(post); reset(post);})\r\n        .catch((apiErrors: IErrors) => handleFetchPostError(apiErrors));\r\n        dispatch(createActionLoading(false));\r\n       }\r\n      fetchData();      \r\n    }\r\n  // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onSubmit = async (data: UpdateSubmitForm) => {\r\n    if (post && isDirty) {\r\n      dispatch(createActionLoading(true));\r\n      const postData: IUpdatePost = createPostForUpdate({...post, ...data});\r\n      await PostApiService.updatePost(post.id!, postData)\r\n      .then(() => { handleSubmitFormSucess(); })\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n      dispatch(createActionLoading(false));\r\n     }\r\n  } \r\n\r\n  const handleFetchPostError = (apiErrors: IErrors) => {\r\n    toast.error(`Post reading failed, see error list`);\r\n    setErrorList(apiErrors);\r\n  }\r\n\r\n  const handleSubmitFormSucess = () => {\r\n    toast.success(`Post updated successfully...`);\r\n    navigate('/'); \r\n  }\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`Post update failed, session expired`);\r\n      dispatch(createActionSessionExpired());\r\n      navigate('/'); \r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`Post update failed, see error list`);\r\n      setErrorList(apiErrors);      \r\n    }\r\n}\r\n\r\nconst cancelEditPostMessage = () => `post edition and loose changes`;\r\n\r\nconst handleResetEditPost = () => {\r\n  reset(defaultValues, { keepDirty: false});\r\n}\r\n\r\nconst handleCancelEditPost = () => {\r\n  navigate('/');   \r\n};\r\n\r\n  return (\r\n    <div className={'page-wrapper'}>\r\n    {post &&\r\n      (\r\n        <div className={\"col-md-12 form-wrapper\"}>\r\n          <h2> Edit Post  </h2>\r\n          {errorList && <ListErrors errors={errorList} />}\r\n          <form id={\"create-post-form\"} onSubmit={handleSubmit(onSubmit)} noValidate={true}>\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"title\"> Title </label>\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"Enter title\"\r\n                {...register('title')}\r\n                className={`form-control ${errors.title ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\r\n           </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\"> Description </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter description\"\r\n                {...register('description')}\r\n                className={`form-control ${errors.description ? 'is-invalid' : ''}`} \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.description?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"body\"> Enter Content </label>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter content\" \r\n                {...register('body')}\r\n                className={`form-control ${errors.body ? 'is-invalid' : ''}`}           \r\n              />\r\n              <div className=\"invalid-feedback\">{errors.body?.message}</div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4 pull-right\">\r\n              <button className=\"btn btn-success\"  disabled={!isDirty} type=\"submit\">\r\n                Update Post\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-1 pull-right\">\r\n              <button className=\"btn btn-secondary\" disabled={!isDirty} onClick={ () => handleResetEditPost() } >\r\n                Reset\r\n              </button>\r\n              {isLoading &&\r\n                <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n              }\r\n            </div>\r\n          </form>\r\n\r\n          <div className=\"form-group col-md-1 pull-right\">\r\n              {\r\n              <CancelButton prompt={isDirty} message={cancelEditPostMessage()} onClick={() => handleCancelEditPost()} className=\"btn btn-danger\">Cancel</CancelButton>\r\n              }\r\n           </div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default EditPost;"]},"metadata":{},"sourceType":"module"}