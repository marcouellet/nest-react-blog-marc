{"ast":null,"code":"import { fileTypeFromFile } from 'file-type';\n\nconst getArrayBuffer = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n\n    reader.readAsArrayBuffer(file);\n  });\n};\n\nexport function getImageFromFile(file, callback, errorHandler) {\n  getArrayBuffer(file).then(data => {\n    const imageData = {\n      base64: Buffer.from(data).toString('base64'),\n      contentType: file.type\n    };\n    callback(imageData);\n  }).catch(error => errorHandler(error));\n}\nexport function getFileType(filePath) {\n  return fileTypeFromFile(filePath).then(fileType => fileType);\n}\nexport function readImageFile(filePath) {\n  let image = new Image();\n  image.src = filePath;\n\n  image.onload = () => {\n    let canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    let context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    canvas.toBlob(blob => {\n      blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n        const base64 = Buffer.from(array).toString('base64');\n        const newImageData = {\n          base64: base64,\n          contentType: image.contentType.trim()\n        };\n        resolve(newImageData);\n      });\n    });\n  };\n\n  image.onerror = reject;\n}\nexport function resizeImage(imageData, maxWidth, maxHeight) {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.src = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\n\n    image.onload = () => {\n      let width = image.width;\n      let height = image.height;\n\n      if (width <= maxWidth && height <= maxHeight) {\n        resolve(imageData);\n      }\n\n      let newWidth;\n      let newHeight;\n\n      if (width > height) {\n        newHeight = height * (maxWidth / width);\n        newWidth = maxWidth;\n      } else {\n        newWidth = width * (maxHeight / height);\n        newHeight = maxHeight;\n      }\n\n      let canvas = document.createElement('canvas');\n      canvas.width = newWidth;\n      canvas.height = newHeight;\n      let context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, newWidth, newHeight);\n      canvas.toBlob(blob => {\n        blob === null || blob === void 0 ? void 0 : blob.arrayBuffer().then(array => {\n          const base64 = Buffer.from(array).toString('base64');\n          const newImageData = {\n            base64: base64,\n            contentType: imageData.contentType.trim()\n          };\n          resolve(newImageData);\n        });\n      });\n    };\n\n    image.onerror = reject;\n  });\n}","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/utils/image.utils.ts"],"names":["fileTypeFromFile","getArrayBuffer","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsArrayBuffer","getImageFromFile","callback","errorHandler","then","data","imageData","base64","Buffer","from","toString","contentType","type","catch","getFileType","filePath","fileType","readImageFile","image","Image","src","canvas","document","createElement","width","height","context","getContext","drawImage","toBlob","blob","arrayBuffer","array","newImageData","trim","resizeImage","maxWidth","maxHeight","newWidth","newHeight"],"mappings":"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","sourcesContent":["import { ImageData } from '../types';\r\nimport {fileTypeFromFile, FileTypeResult} from 'file-type';\r\n\r\nconst getArrayBuffer = (file: File) => {\r\n    return new Promise<ArrayBuffer>((resolve,reject) => {\r\n       const reader = new FileReader();\r\n       reader.onload = () => resolve(reader.result as ArrayBuffer);\r\n       reader.onerror = error => reject(error);\r\n       reader.readAsArrayBuffer(file);\r\n    });\r\n}\r\n\r\nexport type GetImageCallback = (imageData: ImageData) => void;\r\nexport type GetImageErrorCallback = (error: any) => void;\r\n\r\nexport function getImageFromFile(file: File, callback: GetImageCallback, errorHandler: GetImageErrorCallback) {\r\n\r\n    getArrayBuffer(file).then(data => {\r\n        const imageData: ImageData = { base64: Buffer.from(data).toString('base64'), contentType: file.type };\r\n        callback(imageData);\r\n    })\r\n    .catch((error) => errorHandler(error));\r\n}\r\n\r\nexport function getFileType(filePath: string): Promise<FileTypeResult| undefined> {\r\n    return fileTypeFromFile(filePath)\r\n        .then((fileType) => fileType);\r\n}\r\n\r\nexport function readImageFile(filePath: string): Promise<ImageData> {\r\n\r\n    let image = new Image();\r\n    image.src = filePath;\r\n    image.onload = () => {\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width =image.width;\r\n        canvas.height = image.height;\r\n\r\n        let context = canvas.getContext('2d');\r\n\r\n        context!.drawImage(image, 0, 0);\r\n\r\n        canvas.toBlob(blob => {\r\n            blob?.arrayBuffer()\r\n                .then((array) => {\r\n                    const base64 = Buffer.from(array).toString('base64');\r\n                    const newImageData : ImageData = {base64: base64, contentType: image.contentType.trim() };\r\n                    resolve(newImageData);\r\n                });\r\n        });\r\n\r\n    }\r\n    image.onerror = reject;\r\n\r\n}\r\n\r\nexport function resizeImage(imageData:ImageData, maxWidth:number, maxHeight:number): Promise<ImageData> {\r\n\r\n    return new Promise<ImageData>((resolve, reject) => {\r\n\r\n        let image = new Image();\r\n        image.src = 'data:' + imageData.contentType.trim() + ';base64,' + imageData.base64;\r\n        image.onload = () => {\r\n            let width = image.width;\r\n            let height = image.height;\r\n            \r\n            if (width <= maxWidth && height <= maxHeight) {\r\n                resolve(imageData);\r\n            }\r\n\r\n            let newWidth;\r\n            let newHeight;\r\n\r\n            if (width > height) {\r\n                newHeight = height * (maxWidth / width);\r\n                newWidth = maxWidth;\r\n            } else {\r\n                newWidth = width * (maxHeight / height);\r\n                newHeight = maxHeight;\r\n            }\r\n\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = newWidth;\r\n            canvas.height = newHeight;\r\n\r\n            let context = canvas.getContext('2d');\r\n\r\n            context!.drawImage(image, 0, 0, newWidth, newHeight);\r\n\r\n            canvas.toBlob(blob => {\r\n                blob?.arrayBuffer()\r\n                    .then((array) => {\r\n                        const base64 = Buffer.from(array).toString('base64');\r\n                        const newImageData : ImageData = {base64: base64, contentType: imageData.contentType.trim() };\r\n                        resolve(newImageData);\r\n                    });\r\n            });\r\n        };\r\n        image.onerror = reject;\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}