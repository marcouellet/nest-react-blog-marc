{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\auth\\\\Login.tsx\";\nimport React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../../services/api/AuthApiService';\nimport useAuth from '../../contexts/auth';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createActionLoadUser, createActionLoading } from '../../reducers/auth';\nimport ListErrors from '../common/ListErrors';\nimport { minimumPasswordLength, minimumEmailLength } from \"../../types\";\nimport { checkUnauthorized, checkNotFound, checkTimeout } from '../../utils/html.response.utils';\n\nconst Login = () => {\n  var _errors$email, _errors$password;\n\n  const navigate = useNavigate();\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    password: Yup.string().required('Password is required').min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`)\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkNotFound(apiErrors)) {\n      toast.error(`User not found`);\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Invalid credentials`);\n    } else if (checkTimeout(apiErrors)) {\n      toast.error(`Request timeout`);\n    } else {\n      toast.error(`Login failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    await AUTHAPI.login(data.email, data.password).then(user => {\n      // toast.info(`${user.username} is logged in`);\n      dispatch(createActionLoadUser(user));\n      navigate('/');\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"auth-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, isLoading && React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Loading...\")), React.createElement(\"div\", {\n    className: \"container page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 offset-md-3 col-xs-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Log in\"), React.createElement(\"p\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Need an account?\")), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"email\",\n    placeholder: \"Email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"button\", {\n    className: \"btn btn-lg btn-primary pull-xs-right\",\n    type: \"submit\",\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Log In\"))))));\n};\n\nexport default Login;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/auth/Login.tsx"],"names":["React","useForm","Link","useNavigate","AUTHAPI","useAuth","toast","Yup","Spinner","yupResolver","createActionLoadUser","createActionLoading","ListErrors","minimumPasswordLength","minimumEmailLength","checkUnauthorized","checkNotFound","checkTimeout","Login","navigate","isLoading","state","dispatch","useState","errorList","setErrorList","validationSchema","object","shape","email","string","required","min","password","resolver","register","handleSubmit","errors","formState","handleSubmitFormError","apiErrors","error","onSubmit","data","login","then","user","catch","message"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../../services/api/AuthApiService';\r\nimport useAuth from '../../contexts/auth';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { createActionLoadUser, createActionLoading } from '../../reducers/auth';\r\nimport ListErrors from '../common/ListErrors';\r\nimport { IErrors, minimumPasswordLength, minimumEmailLength } from \"../../types\";\r\nimport { checkUnauthorized, checkNotFound, checkTimeout } from '../../utils/html.response.utils';\r\n\r\nconst Login = () => {\r\n  const navigate = useNavigate();\r\n  const { state: { isLoading }, dispatch } = useAuth();\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n    password: Yup.string().required('Password is required')\r\n      .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\r\n  });\r\n\r\n  type LoginSubmitForm = {\r\n    email: string;\r\n    password: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm<LoginSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n  \r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkNotFound(apiErrors)) {\r\n      toast.error(`User not found`);    \r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Invalid credentials`);\r\n    } else if (checkTimeout(apiErrors)) {\r\n      toast.error(`Request timeout`);\r\n    } else {\r\n      toast.error(`Login failed, see error list`);\r\n      setErrorList(apiErrors);\r\n    }\r\n   }\r\n\r\n  const onSubmit = async (data: LoginSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    await AUTHAPI.login(data.email, data.password)\r\n      .then(\r\n        (user) => {\r\n          // toast.info(`${user.username} is logged in`);\r\n          dispatch(createActionLoadUser(user));\r\n          navigate('/');    \r\n        }\r\n      )\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); });\r\n    dispatch(createActionLoading(false));\r\n  } \r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      {isLoading && \r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      }\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">Log in</h1>\r\n            <p className=\"text-xs-center\">\r\n              <Link to=\"/register\">Need an account?</Link>\r\n            </p>\r\n            {errorList && <ListErrors errors={errorList} />}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  {...register('email')}\r\n                  className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  {...register('password')}\r\n                  className={`form-control ${errors.password ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n              </fieldset>\r\n              <button\r\n                className=\"btn btn-lg btn-primary pull-xs-right\"\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n              >\r\n                Log In\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}