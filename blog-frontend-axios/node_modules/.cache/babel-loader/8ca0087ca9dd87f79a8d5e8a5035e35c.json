{"ast":null,"code":"import _objectSpread from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\Register.tsx\";\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../services/api/AuthApiService';\nimport useAuth from '../contexts/auth';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createActionLoadUser, createActionLoading } from '../reducers/auth';\nimport { checkUnauthorized, checkForbidden } from '../utils/response';\nimport ListErrors from './common/ListErrors';\nimport { minimumUserNameLength, minimumPasswordLength, minimumEmailLength } from \"../types\";\n\nconst Register = () => {\n  var _errors$username, _errors$email, _errors$password;\n\n  const _useState = useState({\n    username: '',\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        form = _useState2[0],\n        setForm = _useState2[1];\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('User name is required').min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\n    email: Yup.string().required('Email is required').min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\n    password: Yup.string().required('Password is required').min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`)\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n  const navigate = useNavigate();\n\n  const handleChange = event => {\n    setForm(_objectSpread({}, form, {\n      [event.currentTarget.name]: event.currentTarget.value\n    }));\n  };\n\n  const handleSubmitFormError = apiErrors => {\n    if (checkForbidden(apiErrors)) {\n      toast.error(`Registration failed, email already used!`);\n    } else if (checkUnauthorized(apiErrors)) {\n      toast.error(`Access denied`);\n    } else {\n      toast.error(`User registration failed, see error list`);\n      setErrorList(apiErrors);\n    }\n  };\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    const username = data.username,\n          email = data.email,\n          password = data.password;\n    await AUTHAPI.register(username, email, password).then(user => {\n      toast.success(`${user.username} is registered`);\n      dispatch(createActionLoadUser(user));\n      navigate('/login');\n    }).catch(apiErrors => {\n      handleSubmitFormError(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"auth-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 offset-md-3 col-xs-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"p\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Have an account?\")), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"username\",\n    placeholder: \"Your Name\"\n  }, register('username'), {\n    className: `form-control ${errors.username ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"email\",\n    placeholder: \"Email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"button\", {\n    className: \"btn btn-lg btn-primary pull-xs-right\",\n    type: \"submit\",\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Register\"))))));\n};\n\nexport default Register;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/Register.tsx"],"names":["React","useState","useForm","Link","useNavigate","AUTHAPI","useAuth","toast","Yup","yupResolver","createActionLoadUser","createActionLoading","checkUnauthorized","checkForbidden","ListErrors","minimumUserNameLength","minimumPasswordLength","minimumEmailLength","Register","username","email","password","form","setForm","errorList","setErrorList","isLoading","state","dispatch","validationSchema","object","shape","string","required","min","resolver","register","handleSubmit","errors","formState","navigate","handleChange","event","currentTarget","name","value","handleSubmitFormError","apiErrors","error","onSubmit","data","then","user","success","catch","message"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../services/api/AuthApiService';\r\nimport useAuth from '../contexts/auth';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { createActionLoadUser, createActionLoading } from '../reducers/auth';\r\nimport { checkUnauthorized, checkForbidden } from '../utils/response';\r\nimport ListErrors from './common/ListErrors';\r\nimport { IErrors, User, minimumUserNameLength, minimumPasswordLength, minimumEmailLength } from \"../types\";\r\n\r\nconst Register = () => {\r\n  const [form, setForm] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n  const {\r\n    state: { isLoading },\r\n    dispatch,\r\n  } = useAuth();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required('User name is required')\r\n    .min(minimumUserNameLength, `User name must be at least ${minimumUserNameLength} characters long`),\r\n    email: Yup.string().required('Email is required')\r\n      .min(minimumEmailLength, `Email must be at least ${minimumEmailLength} characters long`),\r\n    password: Yup.string().required('Password is required')\r\n      .min(minimumPasswordLength, `Password must be at least ${minimumPasswordLength} characters long`),\r\n  });\r\n\r\n  type RegisterSubmitForm = {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm<RegisterSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    setForm({\r\n      ...form,\r\n      [event.currentTarget.name]: event.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmitFormError = (apiErrors: IErrors) => {\r\n    if (checkForbidden(apiErrors)) {\r\n      toast.error(`Registration failed, email already used!`);\r\n    } else if (checkUnauthorized(apiErrors)) {\r\n      toast.error(`Access denied`);\r\n    } else {\r\n      toast.error(`User registration failed, see error list`);\r\n      setErrorList(apiErrors);\r\n      }\r\n  }\r\n\r\n  const onSubmit = async (data: RegisterSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    const { username, email, password } = data;\r\n    await AUTHAPI.register(username, email, password)\r\n      .then(\r\n        (user: User) => {\r\n          toast.success(`${user.username} is registered`);\r\n          dispatch(createActionLoadUser(user));\r\n          navigate('/login');    \r\n        }\r\n      )\r\n      .catch((apiErrors: IErrors) =>  { handleSubmitFormError(apiErrors); }); \r\n    dispatch(createActionLoading(false));\r\n } \r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">Register</h1>\r\n            <p className=\"text-xs-center\">\r\n              <Link to=\"/login\">Have an account?</Link>\r\n            </p>\r\n            {errorList && <ListErrors errors={errorList} />}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                      type=\"username\"\r\n                      placeholder=\"Your Name\"\r\n                      {...register('username')}\r\n                      className={`form-control ${errors.username ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.username?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  {...register('email')}\r\n                  className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    {...register('password')}\r\n                    className={`form-control ${errors.password ? 'is-invalid' : ''}`} \r\n                  />\r\n                <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n             </fieldset>\r\n              <button\r\n                className=\"btn btn-lg btn-primary pull-xs-right\"\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n              >\r\n                Register\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}