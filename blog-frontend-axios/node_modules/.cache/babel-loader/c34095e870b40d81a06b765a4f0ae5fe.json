{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nimport { useNavigate } from 'react-router-dom';\nexport const TOKEN_KEY = 'token';\naxios.defaults.baseURL = API_BASE_URL;\nconst navigate = useNavigate();\nexport function setToken(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\nexport function isTokenValid(token) {\n  try {\n    const decoded_jwt = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst handleSuccess = response => {\n  //console.log(`API::Succes : ${JSON.stringify(response)}`);\n  return response;\n};\n\nconst handleError = err => {\n  console.log(`API::Error : ${err}`);\n\n  if (!err.response) {\n    console.log(`Network error: ${err}`);\n  } else {\n    if (err.response !== undefined) {\n      switch (err.response.status) {\n        case 401:\n        case 500:\n          console.log(`API::Error(401 or 500) : ${err.response.data.Message}`); //navigate('/register');\n\n          break;\n\n        case 404:\n        case 403:\n          //navigate('/');\n          break;\n      }\n    }\n\n    return Promise.reject(err);\n  }\n}; // Add a request interceptor\n\n\naxios.interceptors.request.use(config => config, error => {\n  return Promise.reject(error);\n}); // Add a response interceptor\n\naxios.interceptors.response.use(handleSuccess, handleError);\nexport default axios;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/services/api/APIUtils.ts"],"names":["axios","jwtDecode","API_BASE_URL","useNavigate","TOKEN_KEY","defaults","baseURL","navigate","setToken","token","headers","common","isTokenValid","decoded_jwt","current_time","Date","now","valueOf","exp","error","handleSuccess","response","handleError","err","console","log","undefined","status","data","Message","Promise","reject","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,OAAlB;AAEPJ,KAAK,CAACK,QAAN,CAAeC,OAAf,GAAyBJ,YAAzB;AAEA,MAAMK,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,OAAO,SAASK,QAAT,CAAkBC,KAAlB,EAAwC;AAC7C,MAAIA,KAAJ,EAAW;AACTT,IAAAA,KAAK,CAACK,QAAN,CAAeK,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,SAAQF,KAAM,EAAhE;AACD,GAFD,MAEO;AACL,WAAOT,KAAK,CAACK,QAAN,CAAeK,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF;AAQD,OAAO,SAASC,YAAT,CAAsBH,KAAtB,EAAqC;AAC1C,MAAI;AACF,UAAMI,WAAuB,GAAGZ,SAAS,CAACQ,KAAD,CAAzC;AACA,UAAMK,YAAY,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA5C;AACA,WAAOJ,WAAW,CAACK,GAAZ,GAAkBJ,YAAzB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF;;AAED,MAAMC,aAAa,GAAIC,QAAD,IAA6B;AACjD;AACA,SAAOA,QAAP;AACD,CAHD;;AAKA,MAAMC,WAAW,GAAIC,GAAD,IAAc;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,GAAI,EAAhC;;AACA,MAAI,CAACA,GAAG,CAACF,QAAT,EAAmB;AACfG,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBF,GAAI,EAAlC;AACH,GAFD,MAEO;AACL,QAAIA,GAAG,CAACF,QAAJ,KAAiBK,SAArB,EAAgC;AAC9B,cAAQH,GAAG,CAACF,QAAJ,CAAaM,MAArB;AACE,aAAK,GAAL;AACA,aAAK,GAAL;AACEH,UAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2BF,GAAG,CAACF,QAAJ,CAAaO,IAAb,CAAkBC,OAAQ,EAAlE,EADF,CAEE;;AACA;;AACF,aAAK,GAAL;AACA,aAAK,GAAL;AACE;AACA;AATJ;AAWD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAeR,GAAf,CAAP;AACD;AACF,CApBD,C,CAsBA;;;AACAvB,KAAK,CAACgC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACEC,MAAM,IAAIA,MADZ,EAEEhB,KAAK,IAAI;AACP,SAAOW,OAAO,CAACC,MAAR,CAAeZ,KAAf,CAAP;AACD,CAJH,E,CAOA;;AACAnB,KAAK,CAACgC,YAAN,CAAmBX,QAAnB,CAA4Ba,GAA5B,CACEd,aADF,EAEEE,WAFF;AAKA,eAAetB,KAAf","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { API_BASE_URL } from \"../../config/api.config\";\nimport { useNavigate } from 'react-router-dom';\n\nexport const TOKEN_KEY = 'token';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nconst navigate = useNavigate();\n\nexport function setToken(token: string | null) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\ntype JWTPayload = {\n  id: string;\n  username: string;\n  exp: number;\n};\n\nexport function isTokenValid(token: string) {\n  try {\n    const decoded_jwt: JWTPayload = jwtDecode(token);\n    const current_time = Date.now().valueOf() / 1000;\n    return decoded_jwt.exp > current_time;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst handleSuccess = (response: AxiosResponse) => {\n  //console.log(`API::Succes : ${JSON.stringify(response)}`);\n  return response;\n}\n\nconst handleError = (err: any) => {\n  console.log(`API::Error : ${err}`)\n  if (!err.response) {\n      console.log(`Network error: ${err}`);\n  } else {\n    if (err.response !== undefined) {\n      switch (err.response.status) {\n        case 401:\n        case 500:\n          console.log(`API::Error(401 or 500) : ${err.response.data.Message}`);\n          //navigate('/register');\n          break;\n        case 404:\n        case 403:\n          //navigate('/');\n          break;\n      }\n    }\n    return Promise.reject(err);\n  }\n};\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  config => config,\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor\naxios.interceptors.response.use(\n  handleSuccess,\n  handleError\n);\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}