{"ast":null,"code":"import _slicedToArray from \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Documents\\\\Documents\\\\_Nest\\\\nest-react-blog-marc\\\\blog-frontend-axios\\\\src\\\\components\\\\Login.tsx\";\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport AUTHAPI from '../services/api/AuthAPI';\nimport useAuth from '../contexts/auth';\nimport { toast } from \"react-toastify\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createActionLoadUser, createActionLoading } from '../reducers/auth';\nimport ListErrors from './common/ListErrors';\n\nconst Login = () => {\n  var _errors$email, _errors$password;\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        errorList = _React$useState2[0],\n        setErrorList = _React$useState2[1];\n\n  const _useAuth = useAuth(),\n        isLoading = _useAuth.state.isLoading,\n        dispatch = _useAuth.dispatch;\n\n  const navigate = useNavigate();\n\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        form = _useState2[0],\n        setForm = _useState2[1];\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const _useForm = useForm({\n    resolver: yupResolver(validationSchema)\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        reset = _useForm.reset,\n        errors = _useForm.formState.errors;\n\n  const onSubmit = async data => {\n    dispatch(createActionLoading(true));\n    await AUTHAPI.login(data.email, data.password).then(user => {\n      toast.info(`${user.username} is logged in`);\n      dispatch(createActionLoadUser(user));\n      navigate('/');\n    }).catch(apiErrors => {\n      toast.error(`Login failed, see error list`);\n      setErrorList(apiErrors);\n    });\n    dispatch(createActionLoading(false));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"auth-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 offset-md-3 col-xs-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Log in\"), React.createElement(\"p\", {\n    className: \"text-xs-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Need an account?\")), errorList && React.createElement(ListErrors, {\n    errors: errorList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"email\",\n    placeholder: \"Email\"\n  }, register('email'), {\n    className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)), React.createElement(\"fieldset\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    type: \"password\",\n    placeholder: \"Password\"\n  }, register('password'), {\n    className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message)), React.createElement(\"button\", {\n    className: \"btn btn-lg btn-primary pull-xs-right\",\n    type: \"submit\",\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Log In\"))))));\n};\n\nexport default Login;","map":{"version":3,"sources":["F:/Documents/Documents/_Nest/nest-react-blog-marc/blog-frontend-axios/src/components/Login.tsx"],"names":["React","useState","useForm","Link","useNavigate","AUTHAPI","useAuth","toast","Yup","yupResolver","createActionLoadUser","createActionLoading","ListErrors","Login","errorList","setErrorList","isLoading","state","dispatch","navigate","email","password","form","setForm","validationSchema","object","shape","string","required","resolver","register","handleSubmit","reset","errors","formState","onSubmit","data","login","then","user","info","username","catch","apiErrors","error","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,kBAA1D;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAAA,0BACgBb,KAAK,CAACC,QAAN,EADhB;AAAA;AAAA,QACXa,SADW;AAAA,QACAC,YADA;;AAAA,mBAMdT,OAAO,EANO;AAAA,QAIPU,SAJO,YAIhBC,KAJgB,CAIPD,SAJO;AAAA,QAKhBE,QALgB,YAKhBA,QALgB;;AAQlB,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;;AARkB,oBAUMH,QAAQ,CAAC;AAC/BmB,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,QAAQ,EAAE;AAFqB,GAAD,CAVd;AAAA;AAAA,QAUXC,IAVW;AAAA,QAULC,OAVK;;AAelB,QAAMC,gBAAgB,GAAGhB,GAAG,CAACiB,MAAJ,GAAaC,KAAb,CAAmB;AAC1CN,IAAAA,KAAK,EAAEZ,GAAG,CAACmB,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CADmC;AAE1CP,IAAAA,QAAQ,EAAEb,GAAG,CAACmB,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB;AAFgC,GAAnB,CAAzB;;AAfkB,mBA8Bd1B,OAAO,CAAkB;AAC3B2B,IAAAA,QAAQ,EAAEpB,WAAW,CAACe,gBAAD;AADM,GAAlB,CA9BO;AAAA,QA0BhBM,QA1BgB,YA0BhBA,QA1BgB;AAAA,QA2BhBC,YA3BgB,YA2BhBA,YA3BgB;AAAA,QA4BhBC,KA5BgB,YA4BhBA,KA5BgB;AAAA,QA6BHC,MA7BG,YA6BhBC,SA7BgB,CA6BHD,MA7BG;;AAmClB,QAAME,QAAQ,GAAG,MAAOC,IAAP,IAAiC;AAChDlB,IAAAA,QAAQ,CAACP,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACA,UAAMN,OAAO,CAACgC,KAAR,CAAcD,IAAI,CAAChB,KAAnB,EAA0BgB,IAAI,CAACf,QAA/B,EACHiB,IADG,CAEDC,IAAD,IAAU;AACRhC,MAAAA,KAAK,CAACiC,IAAN,CAAY,GAAED,IAAI,CAACE,QAAS,eAA5B;AACAvB,MAAAA,QAAQ,CAACR,oBAAoB,CAAC6B,IAAD,CAArB,CAAR;AACApB,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACD,KANC,EAQHuB,KARG,CAQIC,SAAD,IAAwB;AAC7BpC,MAAAA,KAAK,CAACqC,KAAN,CAAa,8BAAb;AACA7B,MAAAA,YAAY,CAAC4B,SAAD,CAAZ;AACD,KAXG,CAAN;AAYAzB,IAAAA,QAAQ,CAACP,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACD,GAfD;;AAiBA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAG,IAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CAFF,EAKGG,SAAS,IAAI,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEA,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALhB,EAME;AAAM,IAAA,QAAQ,EAAEiB,YAAY,CAACI,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAU,IAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,WAAW,EAAC;AAFd,KAGML,QAAQ,CAAC,OAAD,CAHd;AAIE,IAAA,SAAS,EAAG,gBAAeG,MAAM,CAACb,KAAP,GAAe,YAAf,GAA8B,EAAG,EAJ9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAOE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmCa,MAAM,CAACb,KAA1C,kDAAmC,cAAcyB,OAAjD,CAPF,CADF,EAUE;AAAU,IAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC;AAFd,KAGMf,QAAQ,CAAC,UAAD,CAHd;AAIE,IAAA,SAAS,EAAG,gBAAeG,MAAM,CAACZ,QAAP,GAAkB,YAAlB,GAAiC,EAAG,EAJjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAOE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmCY,MAAM,CAACZ,QAA1C,qDAAmC,iBAAiBwB,OAApD,CAPF,CAVF,EAmBE;AACE,IAAA,SAAS,EAAC,sCADZ;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,QAAQ,EAAE7B,SAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,CANF,CADF,CADF,CADF,CADF;AA0CD,CA9FD;;AAgGA,eAAeH,KAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport AUTHAPI from '../services/api/AuthAPI';\r\nimport useAuth from '../contexts/auth';\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { createActionLoadUser, createActionLoading } from '../reducers/auth';\r\nimport ListErrors from './common/ListErrors';\r\nimport { IErrors } from '../types';\r\n\r\nconst Login = () => {\r\n  const [errorList, setErrorList] = React.useState<IErrors | null>();\r\n\r\n  const {\r\n    state: { isLoading },\r\n    dispatch,\r\n  } = useAuth();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [form, setForm] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().required('Email is required'),\r\n    password: Yup.string().required('Password is required')\r\n  });\r\n\r\n  type LoginSubmitForm = {\r\n    email: string;\r\n    password: string;\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm<LoginSubmitForm>({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n\r\n  const onSubmit = async (data: LoginSubmitForm) => {\r\n    dispatch(createActionLoading(true));\r\n    await AUTHAPI.login(data.email, data.password)\r\n      .then(\r\n        (user) => {\r\n          toast.info(`${user.username} is logged in`);\r\n          dispatch(createActionLoadUser(user));\r\n          navigate('/');    \r\n        }\r\n      )\r\n      .catch((apiErrors: IErrors) => {\r\n        toast.error(`Login failed, see error list`);\r\n        setErrorList(apiErrors);\r\n      });\r\n    dispatch(createActionLoading(false));\r\n  } \r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">Log in</h1>\r\n            <p className=\"text-xs-center\">\r\n              <Link to=\"/register\">Need an account?</Link>\r\n            </p>\r\n            {errorList && <ListErrors errors={errorList} />}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  {...register('email')}\r\n                  className={`form-control ${errors.email ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n              </fieldset>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  {...register('password')}\r\n                  className={`form-control ${errors.password ? 'is-invalid' : ''}`} \r\n                />\r\n                <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n              </fieldset>\r\n              <button\r\n                className=\"btn btn-lg btn-primary pull-xs-right\"\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n              >\r\n                Log In\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}