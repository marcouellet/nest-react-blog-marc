{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = htmlAttributesToReact;\n\nvar _BooleanAttributes = require('../dom/attributes/BooleanAttributes');\n\nvar _BooleanAttributes2 = _interopRequireDefault(_BooleanAttributes);\n\nvar _ReactAttributes = require('../dom/attributes/ReactAttributes');\n\nvar _ReactAttributes2 = _interopRequireDefault(_ReactAttributes);\n\nvar _isValidTagOrAttributeName = require('./isValidTagOrAttributeName');\n\nvar _isValidTagOrAttributeName2 = _interopRequireDefault(_isValidTagOrAttributeName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Returns the parsed attribute value taking into account things like boolean attributes\r\n *\r\n * @param {String} attribute The name of the attribute\r\n * @param {*} value The value of the attribute from the HTML\r\n * @returns {*} The parsed attribute value\r\n */\n\n\nvar getParsedAttributeValue = function getParsedAttributeValue(attribute, value) {\n  // if the attribute if a boolean then it's value should be the same as it's name\n  // e.g. disabled=\"disabled\"\n  var lowerBooleanAttributes = _BooleanAttributes2.default.map(function (attr) {\n    return attr.toLowerCase();\n  });\n\n  if (lowerBooleanAttributes.indexOf(attribute.toLowerCase()) >= 0) {\n    value = attribute;\n  }\n\n  return value;\n};\n/**\r\n * Takes an object of standard HTML property names and converts them to their React counterpart. If the react\r\n * version does not exist for an attribute then just use it as it is\r\n *\r\n * @param {Object} attributes The HTML attributes to convert\r\n * @returns {Object} The React attributes\r\n */\n\n\nfunction htmlAttributesToReact(attributes) {\n  return Object.keys(attributes).filter(function (attr) {\n    return (0, _isValidTagOrAttributeName2.default)(attr);\n  }).reduce(function (mappedAttributes, attribute) {\n    // lowercase the attribute name and find it in the react attribute map\n    var lowerCaseAttribute = attribute.toLowerCase(); // format the attribute name\n\n    var name = _ReactAttributes2.default[lowerCaseAttribute] || lowerCaseAttribute; // add the parsed attribute value to the mapped attributes\n\n    mappedAttributes[name] = getParsedAttributeValue(name, attributes[attribute]);\n    return mappedAttributes;\n  }, {});\n}","map":null,"metadata":{},"sourceType":"script"}